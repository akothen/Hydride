from ARMTypes import *
from ARMAST import *
AllSema = {   'vaba_s16': ARMSema(intrin='vaba_s16', inst='SABA', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(16)), '32'), Update(Var('result', '33'), VReg(Var('d', '35'), '36')), For(Var('e', '83'), Number(0), Number(3), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(16), '49'), Number(0)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(16), '58'), Number(0)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(15), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(16), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(16), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SABA Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False, 'accumulate': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vaba_s32': ARMSema(intrin='vaba_s32', inst='SABA', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(32)), '32'), Update(Var('result', '33'), VReg(Var('d', '35'), '36')), For(Var('e', '83'), Number(0), Number(1), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(32), '49'), Number(0)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(32), '58'), Number(0)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(31), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(32), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(32), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SABA Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False, 'accumulate': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vaba_s8': ARMSema(intrin='vaba_s8', inst='SABA', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(8)), '32'), Update(Var('result', '33'), VReg(Var('d', '35'), '36')), For(Var('e', '83'), Number(0), Number(7), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(8), '49'), Number(0)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(8), '58'), Number(0)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(7), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(8), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(8), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SABA Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False, 'accumulate': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vaba_u16': ARMSema(intrin='vaba_u16', inst='UABA', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(16)), '32'), Update(Var('result', '33'), VReg(Var('d', '35'), '36')), For(Var('e', '83'), Number(0), Number(3), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(16), '49'), Number(1)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(16), '58'), Number(1)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(15), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(16), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(16), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='UABA Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True, 'accumulate': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vaba_u32': ARMSema(intrin='vaba_u32', inst='UABA', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(32)), '32'), Update(Var('result', '33'), VReg(Var('d', '35'), '36')), For(Var('e', '83'), Number(0), Number(1), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(32), '49'), Number(1)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(32), '58'), Number(1)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(31), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(32), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(32), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='UABA Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True, 'accumulate': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vaba_u8': ARMSema(intrin='vaba_u8', inst='UABA', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(8)), '32'), Update(Var('result', '33'), VReg(Var('d', '35'), '36')), For(Var('e', '83'), Number(0), Number(7), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(8), '49'), Number(1)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(8), '58'), Number(1)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(7), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(8), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(8), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='UABA Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True, 'accumulate': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vabal_high_s16': ARMSema(intrin='vabal_high_s16', inst='SABAL2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(32)), '37'), Update(Var('result', '38'), VReg(Var('d', '40'), '41')), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(16), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '63'), Number(0)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(31), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(32), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(32), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SABAL2 Vd.4S,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'accumulate': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabal_high_s32': ARMSema(intrin='vabal_high_s32', inst='SABAL2', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(64)), '37'), Update(Var('result', '38'), VReg(Var('d', '40'), '41')), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(32), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '63'), Number(0)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(63), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(64), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(64), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SABAL2 Vd.2D,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'accumulate': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabal_high_s8': ARMSema(intrin='vabal_high_s8', inst='SABAL2', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(16)), '37'), Update(Var('result', '38'), VReg(Var('d', '40'), '41')), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(8), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(8), '63'), Number(0)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(15), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(16), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(16), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SABAL2 Vd.8H,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'accumulate': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabal_high_u16': ARMSema(intrin='vabal_high_u16', inst='UABAL2', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(32)), '37'), Update(Var('result', '38'), VReg(Var('d', '40'), '41')), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(16), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '63'), Number(1)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(31), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(32), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(32), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UABAL2 Vd.4S,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'accumulate': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabal_high_u32': ARMSema(intrin='vabal_high_u32', inst='UABAL2', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(64)), '37'), Update(Var('result', '38'), VReg(Var('d', '40'), '41')), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(32), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '63'), Number(1)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(63), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(64), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(64), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UABAL2 Vd.2D,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'accumulate': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabal_high_u8': ARMSema(intrin='vabal_high_u8', inst='UABAL2', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(16)), '37'), Update(Var('result', '38'), VReg(Var('d', '40'), '41')), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(8), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(8), '63'), Number(1)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(15), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(16), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(16), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UABAL2 Vd.8H,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'accumulate': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabal_s16': ARMSema(intrin='vabal_s16', inst='SABAL', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(32)), '37'), Update(Var('result', '38'), VReg(Var('d', '40'), '41')), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(16), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '63'), Number(0)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(31), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(32), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(32), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SABAL Vd.4S,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'accumulate': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabal_s32': ARMSema(intrin='vabal_s32', inst='SABAL', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(64)), '37'), Update(Var('result', '38'), VReg(Var('d', '40'), '41')), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(32), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '63'), Number(0)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(63), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(64), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(64), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SABAL Vd.2D,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'accumulate': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabal_s8': ARMSema(intrin='vabal_s8', inst='SABAL', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(16)), '37'), Update(Var('result', '38'), VReg(Var('d', '40'), '41')), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(8), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(8), '63'), Number(0)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(15), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(16), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(16), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SABAL Vd.8H,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'accumulate': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabal_u16': ARMSema(intrin='vabal_u16', inst='UABAL', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(32)), '37'), Update(Var('result', '38'), VReg(Var('d', '40'), '41')), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(16), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '63'), Number(1)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(31), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(32), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(32), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UABAL Vd.4S,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'accumulate': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabal_u32': ARMSema(intrin='vabal_u32', inst='UABAL', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(64)), '37'), Update(Var('result', '38'), VReg(Var('d', '40'), '41')), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(32), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '63'), Number(1)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(63), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(64), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(64), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UABAL Vd.2D,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'accumulate': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabal_u8': ARMSema(intrin='vabal_u8', inst='UABAL', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(16)), '37'), Update(Var('result', '38'), VReg(Var('d', '40'), '41')), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(8), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(8), '63'), Number(1)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(15), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(16), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(16), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UABAL Vd.8H,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'accumulate': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabaq_s16': ARMSema(intrin='vabaq_s16', inst='SABA', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(128)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(16)), '32'), Update(Var('result', '33'), VReg(Var('d', '35'), '36')), For(Var('e', '83'), Number(0), Number(7), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(16), '49'), Number(0)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(16), '58'), Number(0)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(15), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(16), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(16), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SABA Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False, 'accumulate': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vabaq_s32': ARMSema(intrin='vabaq_s32', inst='SABA', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(128)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(32)), '32'), Update(Var('result', '33'), VReg(Var('d', '35'), '36')), For(Var('e', '83'), Number(0), Number(3), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(32), '49'), Number(0)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(32), '58'), Number(0)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(31), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(32), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(32), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SABA Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False, 'accumulate': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vabaq_s8': ARMSema(intrin='vabaq_s8', inst='SABA', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(128)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(8)), '32'), Update(Var('result', '33'), VReg(Var('d', '35'), '36')), For(Var('e', '83'), Number(0), Number(15), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(8), '49'), Number(0)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(8), '58'), Number(0)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(7), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(8), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(8), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SABA Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False, 'accumulate': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vabaq_u16': ARMSema(intrin='vabaq_u16', inst='UABA', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(128)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(16)), '32'), Update(Var('result', '33'), VReg(Var('d', '35'), '36')), For(Var('e', '83'), Number(0), Number(7), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(16), '49'), Number(1)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(16), '58'), Number(1)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(15), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(16), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(16), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UABA Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True, 'accumulate': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vabaq_u32': ARMSema(intrin='vabaq_u32', inst='UABA', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(128)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(32)), '32'), Update(Var('result', '33'), VReg(Var('d', '35'), '36')), For(Var('e', '83'), Number(0), Number(3), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(32), '49'), Number(1)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(32), '58'), Number(1)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(31), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(32), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(32), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UABA Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True, 'accumulate': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vabaq_u8': ARMSema(intrin='vabaq_u8', inst='UABA', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(128)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(8)), '32'), Update(Var('result', '33'), VReg(Var('d', '35'), '36')), For(Var('e', '83'), Number(0), Number(15), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(8), '49'), Number(1)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(8), '58'), Number(1)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(7), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(8), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(8), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='UABA Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True, 'accumulate': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vabd_s16': ARMSema(intrin='vabd_s16', inst='SABD', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(16)), '32'), Update(Var('result', '33'), Call('Zeros', [], '39')), For(Var('e', '83'), Number(0), Number(3), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(16), '49'), Number(0)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(16), '58'), Number(0)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(15), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(16), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(16), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SABD Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False, 'accumulate': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vabd_s32': ARMSema(intrin='vabd_s32', inst='SABD', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(32)), '32'), Update(Var('result', '33'), Call('Zeros', [], '39')), For(Var('e', '83'), Number(0), Number(1), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(32), '49'), Number(0)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(32), '58'), Number(0)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(31), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(32), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(32), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SABD Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False, 'accumulate': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vabd_s8': ARMSema(intrin='vabd_s8', inst='SABD', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(8)), '32'), Update(Var('result', '33'), Call('Zeros', [], '39')), For(Var('e', '83'), Number(0), Number(7), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(8), '49'), Number(0)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(8), '58'), Number(0)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(7), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(8), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(8), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SABD Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False, 'accumulate': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vabd_u16': ARMSema(intrin='vabd_u16', inst='UABD', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(16)), '32'), Update(Var('result', '33'), Call('Zeros', [], '39')), For(Var('e', '83'), Number(0), Number(3), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(16), '49'), Number(1)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(16), '58'), Number(1)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(15), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(16), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(16), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='UABD Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True, 'accumulate': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vabd_u32': ARMSema(intrin='vabd_u32', inst='UABD', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(32)), '32'), Update(Var('result', '33'), Call('Zeros', [], '39')), For(Var('e', '83'), Number(0), Number(1), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(32), '49'), Number(1)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(32), '58'), Number(1)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(31), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(32), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(32), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='UABD Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True, 'accumulate': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vabd_u8': ARMSema(intrin='vabd_u8', inst='UABD', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(8)), '32'), Update(Var('result', '33'), Call('Zeros', [], '39')), For(Var('e', '83'), Number(0), Number(7), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(8), '49'), Number(1)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(8), '58'), Number(1)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(7), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(8), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(8), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='UABD Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True, 'accumulate': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vabdl_high_s16': ARMSema(intrin='vabdl_high_s16', inst='SABDL2', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(32)), '37'), Update(Var('result', '38'), Call('Zeros', [], '44')), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(16), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '63'), Number(0)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(31), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(32), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(32), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SABDL2 Vd.4S,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'accumulate': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabdl_high_s32': ARMSema(intrin='vabdl_high_s32', inst='SABDL2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(64)), '37'), Update(Var('result', '38'), Call('Zeros', [], '44')), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(32), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '63'), Number(0)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(63), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(64), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(64), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SABDL2 Vd.2D,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'accumulate': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabdl_high_s8': ARMSema(intrin='vabdl_high_s8', inst='SABDL2', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(16)), '37'), Update(Var('result', '38'), Call('Zeros', [], '44')), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(8), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(8), '63'), Number(0)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(15), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(16), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(16), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SABDL2 Vd.8H,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'accumulate': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabdl_high_u16': ARMSema(intrin='vabdl_high_u16', inst='UABDL2', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(32)), '37'), Update(Var('result', '38'), Call('Zeros', [], '44')), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(16), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '63'), Number(1)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(31), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(32), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(32), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UABDL2 Vd.4S,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'accumulate': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabdl_high_u32': ARMSema(intrin='vabdl_high_u32', inst='UABDL2', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(64)), '37'), Update(Var('result', '38'), Call('Zeros', [], '44')), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(32), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '63'), Number(1)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(63), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(64), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(64), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UABDL2 Vd.2D,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'accumulate': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabdl_high_u8': ARMSema(intrin='vabdl_high_u8', inst='UABDL2', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(16)), '37'), Update(Var('result', '38'), Call('Zeros', [], '44')), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(8), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(8), '63'), Number(1)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(15), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(16), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(16), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UABDL2 Vd.8H,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'accumulate': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabdl_s16': ARMSema(intrin='vabdl_s16', inst='SABDL', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(32)), '37'), Update(Var('result', '38'), Call('Zeros', [], '44')), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(16), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '63'), Number(0)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(31), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(32), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(32), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SABDL Vd.4S,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'accumulate': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabdl_s32': ARMSema(intrin='vabdl_s32', inst='SABDL', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(64)), '37'), Update(Var('result', '38'), Call('Zeros', [], '44')), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(32), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '63'), Number(0)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(63), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(64), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(64), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SABDL Vd.2D,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'accumulate': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabdl_s8': ARMSema(intrin='vabdl_s8', inst='SABDL', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(16)), '37'), Update(Var('result', '38'), Call('Zeros', [], '44')), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(8), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(8), '63'), Number(0)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(15), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(16), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(16), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SABDL Vd.8H,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'accumulate': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabdl_u16': ARMSema(intrin='vabdl_u16', inst='UABDL', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(32)), '37'), Update(Var('result', '38'), Call('Zeros', [], '44')), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(16), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '63'), Number(1)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(31), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(32), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(32), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UABDL Vd.4S,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'accumulate': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabdl_u32': ARMSema(intrin='vabdl_u32', inst='UABDL', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(64)), '37'), Update(Var('result', '38'), Call('Zeros', [], '44')), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(32), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '63'), Number(1)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(63), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(64), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(64), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UABDL Vd.2D,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'accumulate': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabdl_u8': ARMSema(intrin='vabdl_u8', inst='UABDL', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result2', '24'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('absdiff', '35'), '36')], ('bits', Number(16)), '37'), Update(Var('result', '38'), Call('Zeros', [], '44')), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(8), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(8), '63'), Number(1)], '65')), Update(Var('absdiff', '66'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '68'), Var('element2', '69'), '70')], '71'), [SliceRange(Number(15), Number(0), '75')], '76')), Update(ElemSlice(Var('result2', '78'), Var('e', '79'), Number(16), '82'), BinaryExpr('+', ElemSlice(Var('result', '84'), Var('e', '85'), Number(16), '88'), Var('absdiff', '89'), '90'))], 1, '92'), Update(VReg(Var('d', '94'), '95'), Var('result2', '96'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UABDL Vd.8H,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'accumulate': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_diff'),
    'vabdq_s16': ARMSema(intrin='vabdq_s16', inst='SABD', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(128)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(16)), '32'), Update(Var('result', '33'), Call('Zeros', [], '39')), For(Var('e', '83'), Number(0), Number(7), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(16), '49'), Number(0)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(16), '58'), Number(0)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(15), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(16), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(16), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SABD Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False, 'accumulate': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vabdq_s32': ARMSema(intrin='vabdq_s32', inst='SABD', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(128)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(32)), '32'), Update(Var('result', '33'), Call('Zeros', [], '39')), For(Var('e', '83'), Number(0), Number(3), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(32), '49'), Number(0)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(32), '58'), Number(0)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(31), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(32), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(32), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SABD Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False, 'accumulate': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vabdq_s8': ARMSema(intrin='vabdq_s8', inst='SABD', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(128)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(8)), '32'), Update(Var('result', '33'), Call('Zeros', [], '39')), For(Var('e', '83'), Number(0), Number(15), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(8), '49'), Number(0)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(8), '58'), Number(0)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(7), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(8), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(8), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SABD Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False, 'accumulate': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vabdq_u16': ARMSema(intrin='vabdq_u16', inst='UABD', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(128)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(16)), '32'), Update(Var('result', '33'), Call('Zeros', [], '39')), For(Var('e', '83'), Number(0), Number(7), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(16), '49'), Number(1)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(16), '58'), Number(1)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(15), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(16), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(16), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UABD Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True, 'accumulate': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vabdq_u32': ARMSema(intrin='vabdq_u32', inst='UABD', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(128)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(32)), '32'), Update(Var('result', '33'), Call('Zeros', [], '39')), For(Var('e', '83'), Number(0), Number(3), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(32), '49'), Number(1)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(32), '58'), Number(1)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(31), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(32), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(32), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UABD Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True, 'accumulate': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vabdq_u8': ARMSema(intrin='vabdq_u8', inst='UABD', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(128)), '22'), VarsDecl([VarDeclUndef(Var('element1', '23'), '24')], ('integer', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element2', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('absdiff', '30'), '31')], ('bits', Number(8)), '32'), Update(Var('result', '33'), Call('Zeros', [], '39')), For(Var('e', '83'), Number(0), Number(15), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(8), '49'), Number(1)], '51')), Update(Var('element2', '52'), Call('Int', [ElemSlice(Var('operand2', '55'), Var('e', '56'), Number(8), '58'), Number(1)], '60')), Update(Var('absdiff', '61'), ArrayIndex(Call('Abs', [BinaryExpr('-', Var('element1', '63'), Var('element2', '64'), '65')], '66'), [SliceRange(Number(7), Number(0), '69')], '70')), Update(ElemSlice(Var('result2', '72'), Var('e', '73'), Number(8), '75'), BinaryExpr('+', ElemSlice(Var('result', '77'), Var('e', '78'), Number(8), '80'), Var('absdiff', '81'), '82'))], 1, '84'), Update(VReg(Var('d', '86'), '87'), Var('result2', '88'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='UABD Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True, 'accumulate': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_diff'),
    'vabs_s16': ARMSema(intrin='vabs_s16', inst='ABS', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), For(Var('e', '47'), Number(0), Number(3), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26')], '27')), Update(Var('element2', '32'), Call('Abs', [Var('element', '34')], '35')), Update(ElemSlice(Var('result', '38'), Var('e', '39'), Number(16), '41'), ArrayIndex(Var('element2', '42'), [SliceRange(Number(15), Number(0), '45')], '46'))], 1, '48'), Update(VReg(Var('d', '50'), '51'), Var('result', '52'))], rettype='int16x4_t', ret_is_signed=True, inst_form='ABS Vd.4H,Vn.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_int_simd'),
    'vabs_s32': ARMSema(intrin='vabs_s32', inst='ABS', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), For(Var('e', '47'), Number(0), Number(1), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26')], '27')), Update(Var('element2', '32'), Call('Abs', [Var('element', '34')], '35')), Update(ElemSlice(Var('result', '38'), Var('e', '39'), Number(32), '41'), ArrayIndex(Var('element2', '42'), [SliceRange(Number(31), Number(0), '45')], '46'))], 1, '48'), Update(VReg(Var('d', '50'), '51'), Var('result', '52'))], rettype='int32x2_t', ret_is_signed=True, inst_form='ABS Vd.2S,Vn.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_int_simd'),
    'vabs_s64': ARMSema(intrin='vabs_s64', inst='ABS', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), For(Var('e', '47'), Number(0), Number(0), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('element2', '32'), Call('Abs', [Var('element', '34')], '35')), Update(ElemSlice(Var('result', '38'), Var('e', '39'), Number(64), '41'), ArrayIndex(Var('element2', '42'), [SliceRange(Number(63), Number(0), '45')], '46'))], 1, '48'), Update(VReg(Var('d', '50'), '51'), Var('result', '52'))], rettype='int64x1_t', ret_is_signed=True, inst_form='ABS Dd,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_int_sisd'),
    'vabs_s8': ARMSema(intrin='vabs_s8', inst='ABS', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), For(Var('e', '47'), Number(0), Number(7), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26')], '27')), Update(Var('element2', '32'), Call('Abs', [Var('element', '34')], '35')), Update(ElemSlice(Var('result', '38'), Var('e', '39'), Number(8), '41'), ArrayIndex(Var('element2', '42'), [SliceRange(Number(7), Number(0), '45')], '46'))], 1, '48'), Update(VReg(Var('d', '50'), '51'), Var('result', '52'))], rettype='int8x8_t', ret_is_signed=True, inst_form='ABS Vd.8B,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_int_simd'),
    'vabsd_s64': ARMSema(intrin='vabsd_s64', inst='ABS', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), For(Var('e', '47'), Number(0), Number(0), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('element2', '32'), Call('Abs', [Var('element', '34')], '35')), Update(ElemSlice(Var('result', '38'), Var('e', '39'), Number(64), '41'), ArrayIndex(Var('element2', '42'), [SliceRange(Number(63), Number(0), '45')], '46'))], 1, '48'), Update(VReg(Var('d', '50'), '51'), Var('result', '52'))], rettype='int64_t', ret_is_signed=True, inst_form='ABS Dd,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_int_sisd'),
    'vabsq_s16': ARMSema(intrin='vabsq_s16', inst='ABS', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), For(Var('e', '47'), Number(0), Number(7), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26')], '27')), Update(Var('element2', '32'), Call('Abs', [Var('element', '34')], '35')), Update(ElemSlice(Var('result', '38'), Var('e', '39'), Number(16), '41'), ArrayIndex(Var('element2', '42'), [SliceRange(Number(15), Number(0), '45')], '46'))], 1, '48'), Update(VReg(Var('d', '50'), '51'), Var('result', '52'))], rettype='int16x8_t', ret_is_signed=True, inst_form='ABS Vd.8H,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_int_simd'),
    'vabsq_s32': ARMSema(intrin='vabsq_s32', inst='ABS', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), For(Var('e', '47'), Number(0), Number(3), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26')], '27')), Update(Var('element2', '32'), Call('Abs', [Var('element', '34')], '35')), Update(ElemSlice(Var('result', '38'), Var('e', '39'), Number(32), '41'), ArrayIndex(Var('element2', '42'), [SliceRange(Number(31), Number(0), '45')], '46'))], 1, '48'), Update(VReg(Var('d', '50'), '51'), Var('result', '52'))], rettype='int32x4_t', ret_is_signed=True, inst_form='ABS Vd.4S,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_int_simd'),
    'vabsq_s64': ARMSema(intrin='vabsq_s64', inst='ABS', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), For(Var('e', '47'), Number(0), Number(1), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('element2', '32'), Call('Abs', [Var('element', '34')], '35')), Update(ElemSlice(Var('result', '38'), Var('e', '39'), Number(64), '41'), ArrayIndex(Var('element2', '42'), [SliceRange(Number(63), Number(0), '45')], '46'))], 1, '48'), Update(VReg(Var('d', '50'), '51'), Var('result', '52'))], rettype='int64x2_t', ret_is_signed=True, inst_form='ABS Vd.2D,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_int_simd'),
    'vabsq_s8': ARMSema(intrin='vabsq_s8', inst='ABS', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), For(Var('e', '47'), Number(0), Number(15), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26')], '27')), Update(Var('element2', '32'), Call('Abs', [Var('element', '34')], '35')), Update(ElemSlice(Var('result', '38'), Var('e', '39'), Number(8), '41'), ArrayIndex(Var('element2', '42'), [SliceRange(Number(7), Number(0), '45')], '46'))], 1, '48'), Update(VReg(Var('d', '50'), '51'), Var('result', '52'))], rettype='int8x16_t', ret_is_signed=True, inst_form='ABS Vd.16B,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_int_simd'),
    'vadd_s16': ARMSema(intrin='vadd_s16', inst='ADD', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(16)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(16)), '26'), For(Var('e', '59'), Number(0), Number(3), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(16), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(16), '40')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), BinaryExpr('+', Var('element1', '55'), Var('element2', '56'), '57'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='int16x4_t', ret_is_signed=True, inst_form='ADD Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vadd_s32': ARMSema(intrin='vadd_s32', inst='ADD', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(32)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(32)), '26'), For(Var('e', '59'), Number(0), Number(1), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(32), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(32), '40')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), BinaryExpr('+', Var('element1', '55'), Var('element2', '56'), '57'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='int32x2_t', ret_is_signed=True, inst_form='ADD Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vadd_s64': ARMSema(intrin='vadd_s64', inst='ADD', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), For(Var('e', '59'), Number(0), Number(0), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(64), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(64), '40')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', Var('element1', '55'), Var('element2', '56'), '57'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='int64x1_t', ret_is_signed=True, inst_form='ADD Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_sisd'),
    'vadd_s8': ARMSema(intrin='vadd_s8', inst='ADD', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(8)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(8)), '26'), For(Var('e', '59'), Number(0), Number(7), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(8), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(8), '40')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), BinaryExpr('+', Var('element1', '55'), Var('element2', '56'), '57'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='int8x8_t', ret_is_signed=True, inst_form='ADD Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vadd_u16': ARMSema(intrin='vadd_u16', inst='ADD', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(16)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(16)), '26'), For(Var('e', '59'), Number(0), Number(3), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(16), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(16), '40')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), BinaryExpr('+', Var('element1', '55'), Var('element2', '56'), '57'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='ADD Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vadd_u32': ARMSema(intrin='vadd_u32', inst='ADD', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(32)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(32)), '26'), For(Var('e', '59'), Number(0), Number(1), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(32), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(32), '40')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), BinaryExpr('+', Var('element1', '55'), Var('element2', '56'), '57'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='ADD Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vadd_u64': ARMSema(intrin='vadd_u64', inst='ADD', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), For(Var('e', '59'), Number(0), Number(0), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(64), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(64), '40')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', Var('element1', '55'), Var('element2', '56'), '57'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='ADD Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_sisd'),
    'vadd_u8': ARMSema(intrin='vadd_u8', inst='ADD', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(8)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(8)), '26'), For(Var('e', '59'), Number(0), Number(7), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(8), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(8), '40')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), BinaryExpr('+', Var('element1', '55'), Var('element2', '56'), '57'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='ADD Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vaddd_s64': ARMSema(intrin='vaddd_s64', inst='ADD', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), For(Var('e', '59'), Number(0), Number(0), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(64), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(64), '40')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', Var('element1', '55'), Var('element2', '56'), '57'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='int64_t', ret_is_signed=True, inst_form='ADD Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_sisd'),
    'vaddd_u64': ARMSema(intrin='vaddd_u64', inst='ADD', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), For(Var('e', '59'), Number(0), Number(0), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(64), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(64), '40')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', Var('element1', '55'), Var('element2', '56'), '57'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='uint64_t', ret_is_signed=False, inst_form='ADD Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_sisd'),
    'vaddhn_high_s16': ARMSema(intrin='vaddhn_high_s16', inst='ADDHN2', params=[Parameter(name='r', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(16)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(16)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(16)), '48'), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(16), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(8), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(15), Number(8), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='int8x16_t', ret_is_signed=True, inst_form='ADDHN2 Vd.16B,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'sub_op': False, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vaddhn_high_s32': ARMSema(intrin='vaddhn_high_s32', inst='ADDHN2', params=[Parameter(name='r', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(32)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(32)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(32)), '48'), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(32), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(16), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(31), Number(16), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='int16x8_t', ret_is_signed=True, inst_form='ADDHN2 Vd.8H,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': False, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vaddhn_high_s64': ARMSema(intrin='vaddhn_high_s64', inst='ADDHN2', params=[Parameter(name='r', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(64)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(64)), '48'), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(64), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(64), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(32), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(63), Number(32), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='int32x4_t', ret_is_signed=True, inst_form='ADDHN2 Vd.4S,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': False, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vaddhn_high_u16': ARMSema(intrin='vaddhn_high_u16', inst='ADDHN2', params=[Parameter(name='r', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(16)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(16)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(16)), '48'), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(16), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(8), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(15), Number(8), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='ADDHN2 Vd.16B,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'sub_op': False, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vaddhn_high_u32': ARMSema(intrin='vaddhn_high_u32', inst='ADDHN2', params=[Parameter(name='r', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(32)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(32)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(32)), '48'), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(32), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(16), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(31), Number(16), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='ADDHN2 Vd.8H,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': False, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vaddhn_high_u64': ARMSema(intrin='vaddhn_high_u64', inst='ADDHN2', params=[Parameter(name='r', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(64)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(64)), '48'), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(64), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(64), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(32), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(63), Number(32), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='ADDHN2 Vd.4S,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': False, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vaddhn_s16': ARMSema(intrin='vaddhn_s16', inst='ADDHN', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(16)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(16)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(16)), '48'), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(16), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(8), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(15), Number(8), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='int8x8_t', ret_is_signed=True, inst_form='ADDHN Vd.8B,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'sub_op': False, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vaddhn_s32': ARMSema(intrin='vaddhn_s32', inst='ADDHN', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(32)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(32)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(32)), '48'), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(32), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(16), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(31), Number(16), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='int16x4_t', ret_is_signed=True, inst_form='ADDHN Vd.4H,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': False, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vaddhn_s64': ARMSema(intrin='vaddhn_s64', inst='ADDHN', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(64)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(64)), '48'), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(64), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(64), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(32), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(63), Number(32), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='int32x2_t', ret_is_signed=True, inst_form='ADDHN Vd.2S,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': False, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vaddhn_u16': ARMSema(intrin='vaddhn_u16', inst='ADDHN', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(16)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(16)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(16)), '48'), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(16), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(8), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(15), Number(8), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='ADDHN Vd.8B,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'sub_op': False, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vaddhn_u32': ARMSema(intrin='vaddhn_u32', inst='ADDHN', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(32)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(32)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(32)), '48'), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(32), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(16), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(31), Number(16), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='ADDHN Vd.4H,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': False, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vaddhn_u64': ARMSema(intrin='vaddhn_u64', inst='ADDHN', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(64)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(64)), '48'), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(64), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(64), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(32), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(63), Number(32), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='ADDHN Vd.2S,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': False, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vaddl_high_s16': ARMSema(intrin='vaddl_high_s16', inst='SADDL2', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(16), '48'), Number(0)], '50')), Update(Var('sum', '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(32), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(31), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SADDL2 Vd.4S,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vaddl_high_s32': ARMSema(intrin='vaddl_high_s32', inst='SADDL2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(32), '48'), Number(0)], '50')), Update(Var('sum', '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(64), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(63), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SADDL2 Vd.2D,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vaddl_high_s8': ARMSema(intrin='vaddl_high_s8', inst='SADDL2', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(8), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(8), '48'), Number(0)], '50')), Update(Var('sum', '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(16), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(15), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SADDL2 Vd.8H,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'sub_op': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vaddl_high_u16': ARMSema(intrin='vaddl_high_u16', inst='UADDL2', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(16), '48'), Number(1)], '50')), Update(Var('sum', '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(32), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(31), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UADDL2 Vd.4S,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vaddl_high_u32': ARMSema(intrin='vaddl_high_u32', inst='UADDL2', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(32), '48'), Number(1)], '50')), Update(Var('sum', '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(64), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(63), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UADDL2 Vd.2D,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vaddl_high_u8': ARMSema(intrin='vaddl_high_u8', inst='UADDL2', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(8), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(8), '48'), Number(1)], '50')), Update(Var('sum', '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(16), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(15), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UADDL2 Vd.8H,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'sub_op': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vaddl_s16': ARMSema(intrin='vaddl_s16', inst='SADDL', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(16), '48'), Number(0)], '50')), Update(Var('sum', '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(32), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(31), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SADDL Vd.4S,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vaddl_s32': ARMSema(intrin='vaddl_s32', inst='SADDL', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(32), '48'), Number(0)], '50')), Update(Var('sum', '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(64), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(63), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SADDL Vd.2D,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vaddl_s8': ARMSema(intrin='vaddl_s8', inst='SADDL', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(8), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(8), '48'), Number(0)], '50')), Update(Var('sum', '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(16), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(15), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SADDL Vd.8H,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'sub_op': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vaddl_u16': ARMSema(intrin='vaddl_u16', inst='UADDL', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(16), '48'), Number(1)], '50')), Update(Var('sum', '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(32), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(31), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UADDL Vd.4S,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vaddl_u32': ARMSema(intrin='vaddl_u32', inst='UADDL', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(32), '48'), Number(1)], '50')), Update(Var('sum', '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(64), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(63), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UADDL Vd.2D,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vaddl_u8': ARMSema(intrin='vaddl_u8', inst='UADDL', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(8), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(8), '48'), Number(1)], '50')), Update(Var('sum', '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(16), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(15), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UADDL Vd.8H,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'sub_op': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vaddq_s16': ARMSema(intrin='vaddq_s16', inst='ADD', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(16)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(16)), '26'), For(Var('e', '59'), Number(0), Number(7), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(16), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(16), '40')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), BinaryExpr('+', Var('element1', '55'), Var('element2', '56'), '57'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='int16x8_t', ret_is_signed=True, inst_form='ADD Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vaddq_s32': ARMSema(intrin='vaddq_s32', inst='ADD', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(32)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(32)), '26'), For(Var('e', '59'), Number(0), Number(3), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(32), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(32), '40')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), BinaryExpr('+', Var('element1', '55'), Var('element2', '56'), '57'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='int32x4_t', ret_is_signed=True, inst_form='ADD Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vaddq_s64': ARMSema(intrin='vaddq_s64', inst='ADD', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), For(Var('e', '59'), Number(0), Number(1), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(64), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(64), '40')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', Var('element1', '55'), Var('element2', '56'), '57'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='int64x2_t', ret_is_signed=True, inst_form='ADD Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vaddq_s8': ARMSema(intrin='vaddq_s8', inst='ADD', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(8)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(8)), '26'), For(Var('e', '59'), Number(0), Number(15), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(8), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(8), '40')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), BinaryExpr('+', Var('element1', '55'), Var('element2', '56'), '57'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='int8x16_t', ret_is_signed=True, inst_form='ADD Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vaddq_u16': ARMSema(intrin='vaddq_u16', inst='ADD', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(16)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(16)), '26'), For(Var('e', '59'), Number(0), Number(7), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(16), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(16), '40')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), BinaryExpr('+', Var('element1', '55'), Var('element2', '56'), '57'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='ADD Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vaddq_u32': ARMSema(intrin='vaddq_u32', inst='ADD', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(32)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(32)), '26'), For(Var('e', '59'), Number(0), Number(3), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(32), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(32), '40')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), BinaryExpr('+', Var('element1', '55'), Var('element2', '56'), '57'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='ADD Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vaddq_u64': ARMSema(intrin='vaddq_u64', inst='ADD', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), For(Var('e', '59'), Number(0), Number(1), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(64), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(64), '40')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', Var('element1', '55'), Var('element2', '56'), '57'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='ADD Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vaddq_u8': ARMSema(intrin='vaddq_u8', inst='ADD', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(8)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(8)), '26'), For(Var('e', '59'), Number(0), Number(15), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(8), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(8), '40')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), BinaryExpr('+', Var('element1', '55'), Var('element2', '56'), '57'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='ADD Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vaddv_s16': ARMSema(intrin='vaddv_s16', inst='ADDV', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), Update(VReg(Var('d', '9'), '10'), Call('Reduce', [Number(5), Var('operand', '13'), Number(16)], '15'))], rettype='int16_t', ret_is_signed=True, inst_form='ADDV Hd,Vn.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'op': 5}, belongs_to='aarch64_vector_reduce_add_simd'),
    'vaddv_s32': ARMSema(intrin='vaddv_s32', inst='ADDP', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), Update(VReg(Var('d', '9'), '10'), Call('Reduce', [Number(5), Var('operand', '13'), Number(32)], '15'))], rettype='int32_t', ret_is_signed=True, inst_form='ADDP  Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'op': 5}, belongs_to='aarch64_vector_reduce_add_simd'),
    'vaddv_s8': ARMSema(intrin='vaddv_s8', inst='ADDV', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), Update(VReg(Var('d', '9'), '10'), Call('Reduce', [Number(5), Var('operand', '13'), Number(8)], '15'))], rettype='int8_t', ret_is_signed=True, inst_form='ADDV Bd,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'op': 5}, belongs_to='aarch64_vector_reduce_add_simd'),
    'vaddv_u16': ARMSema(intrin='vaddv_u16', inst='ADDV', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), Update(VReg(Var('d', '9'), '10'), Call('Reduce', [Number(5), Var('operand', '13'), Number(16)], '15'))], rettype='uint16_t', ret_is_signed=False, inst_form='ADDV Hd,Vn.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'op': 5}, belongs_to='aarch64_vector_reduce_add_simd'),
    'vaddv_u32': ARMSema(intrin='vaddv_u32', inst='ADDP', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), Update(VReg(Var('d', '9'), '10'), Call('Reduce', [Number(5), Var('operand', '13'), Number(32)], '15'))], rettype='uint32_t', ret_is_signed=False, inst_form='ADDP  Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'op': 5}, belongs_to='aarch64_vector_reduce_add_simd'),
    'vaddv_u8': ARMSema(intrin='vaddv_u8', inst='ADDV', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), Update(VReg(Var('d', '9'), '10'), Call('Reduce', [Number(5), Var('operand', '13'), Number(8)], '15'))], rettype='uint8_t', ret_is_signed=False, inst_form='ADDV Bd,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'op': 5}, belongs_to='aarch64_vector_reduce_add_simd'),
    'vaddvq_s16': ARMSema(intrin='vaddvq_s16', inst='ADDV', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), Update(VReg(Var('d', '9'), '10'), Call('Reduce', [Number(5), Var('operand', '13'), Number(16)], '15'))], rettype='int16_t', ret_is_signed=True, inst_form='ADDV Hd,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'op': 5}, belongs_to='aarch64_vector_reduce_add_simd'),
    'vaddvq_s32': ARMSema(intrin='vaddvq_s32', inst='ADDV', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), Update(VReg(Var('d', '9'), '10'), Call('Reduce', [Number(5), Var('operand', '13'), Number(32)], '15'))], rettype='int32_t', ret_is_signed=True, inst_form='ADDV Sd,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'op': 5}, belongs_to='aarch64_vector_reduce_add_simd'),
    'vaddvq_s64': ARMSema(intrin='vaddvq_s64', inst='ADDP', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), Update(VReg(Var('d', '9'), '10'), Call('Reduce', [Number(5), Var('operand', '13'), Number(64)], '15'))], rettype='int64_t', ret_is_signed=True, inst_form='ADDP Dd,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'op': 5}, belongs_to='aarch64_vector_reduce_add_sisd'),
    'vaddvq_s8': ARMSema(intrin='vaddvq_s8', inst='ADDV', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), Update(VReg(Var('d', '9'), '10'), Call('Reduce', [Number(5), Var('operand', '13'), Number(8)], '15'))], rettype='int8_t', ret_is_signed=True, inst_form='ADDV Bd,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'op': 5}, belongs_to='aarch64_vector_reduce_add_simd'),
    'vaddvq_u16': ARMSema(intrin='vaddvq_u16', inst='ADDV', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), Update(VReg(Var('d', '9'), '10'), Call('Reduce', [Number(5), Var('operand', '13'), Number(16)], '15'))], rettype='uint16_t', ret_is_signed=False, inst_form='ADDV Hd,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'op': 5}, belongs_to='aarch64_vector_reduce_add_simd'),
    'vaddvq_u32': ARMSema(intrin='vaddvq_u32', inst='ADDV', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), Update(VReg(Var('d', '9'), '10'), Call('Reduce', [Number(5), Var('operand', '13'), Number(32)], '15'))], rettype='uint32_t', ret_is_signed=False, inst_form='ADDV Sd,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'op': 5}, belongs_to='aarch64_vector_reduce_add_simd'),
    'vaddvq_u64': ARMSema(intrin='vaddvq_u64', inst='ADDP', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), Update(VReg(Var('d', '9'), '10'), Call('Reduce', [Number(5), Var('operand', '13'), Number(64)], '15'))], rettype='uint64_t', ret_is_signed=False, inst_form='ADDP Dd,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'op': 5}, belongs_to='aarch64_vector_reduce_add_sisd'),
    'vaddvq_u8': ARMSema(intrin='vaddvq_u8', inst='ADDV', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), Update(VReg(Var('d', '9'), '10'), Call('Reduce', [Number(5), Var('operand', '13'), Number(8)], '15'))], rettype='uint8_t', ret_is_signed=False, inst_form='ADDV Bd,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'op': 5}, belongs_to='aarch64_vector_reduce_add_simd'),
    'vaddw_high_s16': ARMSema(intrin='vaddw_high_s16', inst='SADDW2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '40'), Number(0)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(16), '49'), Number(0)], '51')), Update(Var('sum', '57'), BinaryExpr('+', Var('element1', '58'), Var('element2', '59'), '60')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(32), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(31), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SADDW2 Vd.4S,Vn.4S,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vaddw_high_s32': ARMSema(intrin='vaddw_high_s32', inst='SADDW2', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(64), '40'), Number(0)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(32), '49'), Number(0)], '51')), Update(Var('sum', '57'), BinaryExpr('+', Var('element1', '58'), Var('element2', '59'), '60')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(64), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(63), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SADDW2 Vd.2D,Vn.2D,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vaddw_high_s8': ARMSema(intrin='vaddw_high_s8', inst='SADDW2', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '40'), Number(0)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(8), '49'), Number(0)], '51')), Update(Var('sum', '57'), BinaryExpr('+', Var('element1', '58'), Var('element2', '59'), '60')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(16), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(15), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SADDW2 Vd.8H,Vn.8H,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'sub_op': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vaddw_high_u16': ARMSema(intrin='vaddw_high_u16', inst='UADDW2', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '40'), Number(1)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(16), '49'), Number(1)], '51')), Update(Var('sum', '57'), BinaryExpr('+', Var('element1', '58'), Var('element2', '59'), '60')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(32), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(31), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UADDW2 Vd.4S,Vn.4S,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vaddw_high_u32': ARMSema(intrin='vaddw_high_u32', inst='UADDW2', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(64), '40'), Number(1)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(32), '49'), Number(1)], '51')), Update(Var('sum', '57'), BinaryExpr('+', Var('element1', '58'), Var('element2', '59'), '60')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(64), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(63), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UADDW2 Vd.2D,Vn.2D,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vaddw_high_u8': ARMSema(intrin='vaddw_high_u8', inst='UADDW2', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '40'), Number(1)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(8), '49'), Number(1)], '51')), Update(Var('sum', '57'), BinaryExpr('+', Var('element1', '58'), Var('element2', '59'), '60')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(16), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(15), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UADDW2 Vd.8H,Vn.8H,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'sub_op': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vaddw_s16': ARMSema(intrin='vaddw_s16', inst='SADDW', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '40'), Number(0)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(16), '49'), Number(0)], '51')), Update(Var('sum', '57'), BinaryExpr('+', Var('element1', '58'), Var('element2', '59'), '60')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(32), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(31), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SADDW Vd.4S,Vn.4S,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vaddw_s32': ARMSema(intrin='vaddw_s32', inst='SADDW', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(64), '40'), Number(0)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(32), '49'), Number(0)], '51')), Update(Var('sum', '57'), BinaryExpr('+', Var('element1', '58'), Var('element2', '59'), '60')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(64), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(63), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SADDW Vd.2D,Vn.2D,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vaddw_s8': ARMSema(intrin='vaddw_s8', inst='SADDW', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '40'), Number(0)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(8), '49'), Number(0)], '51')), Update(Var('sum', '57'), BinaryExpr('+', Var('element1', '58'), Var('element2', '59'), '60')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(16), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(15), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SADDW Vd.8H,Vn.8H,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'sub_op': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vaddw_u16': ARMSema(intrin='vaddw_u16', inst='UADDW', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '40'), Number(1)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(16), '49'), Number(1)], '51')), Update(Var('sum', '57'), BinaryExpr('+', Var('element1', '58'), Var('element2', '59'), '60')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(32), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(31), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UADDW Vd.4S,Vn.4S,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vaddw_u32': ARMSema(intrin='vaddw_u32', inst='UADDW', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(64), '40'), Number(1)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(32), '49'), Number(1)], '51')), Update(Var('sum', '57'), BinaryExpr('+', Var('element1', '58'), Var('element2', '59'), '60')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(64), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(63), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UADDW Vd.2D,Vn.2D,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vaddw_u8': ARMSema(intrin='vaddw_u8', inst='UADDW', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '40'), Number(1)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(8), '49'), Number(1)], '51')), Update(Var('sum', '57'), BinaryExpr('+', Var('element1', '58'), Var('element2', '59'), '60')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(16), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(15), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UADDW Vd.8H,Vn.8H,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'sub_op': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vand_s16': ARMSema(intrin='vand_s16', inst='AND', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int16x4_t', ret_is_signed=True, inst_form='AND Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': False, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vand_s32': ARMSema(intrin='vand_s32', inst='AND', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int32x2_t', ret_is_signed=True, inst_form='AND Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': False, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vand_s64': ARMSema(intrin='vand_s64', inst='AND', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int64x1_t', ret_is_signed=True, inst_form='AND Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': False, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vand_s8': ARMSema(intrin='vand_s8', inst='AND', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int8x8_t', ret_is_signed=True, inst_form='AND Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': False, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vand_u16': ARMSema(intrin='vand_u16', inst='AND', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='AND Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': False, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vand_u32': ARMSema(intrin='vand_u32', inst='AND', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='AND Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': False, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vand_u64': ARMSema(intrin='vand_u64', inst='AND', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='AND Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': False, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vand_u8': ARMSema(intrin='vand_u8', inst='AND', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='AND Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': False, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vandq_s16': ARMSema(intrin='vandq_s16', inst='AND', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int16x8_t', ret_is_signed=True, inst_form='AND Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': False, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vandq_s32': ARMSema(intrin='vandq_s32', inst='AND', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int32x4_t', ret_is_signed=True, inst_form='AND Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': False, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vandq_s64': ARMSema(intrin='vandq_s64', inst='AND', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int64x2_t', ret_is_signed=True, inst_form='AND Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': False, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vandq_s8': ARMSema(intrin='vandq_s8', inst='AND', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int8x16_t', ret_is_signed=True, inst_form='AND Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': False, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vandq_u16': ARMSema(intrin='vandq_u16', inst='AND', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='AND Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': False, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vandq_u32': ARMSema(intrin='vandq_u32', inst='AND', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='AND Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': False, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vandq_u64': ARMSema(intrin='vandq_u64', inst='AND', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='AND Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': False, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vandq_u8': ARMSema(intrin='vandq_u8', inst='AND', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='AND Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': False, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vbic_s16': ARMSema(intrin='vbic_s16', inst='BIC', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int16x4_t', ret_is_signed=True, inst_form='BIC Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': True, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vbic_s32': ARMSema(intrin='vbic_s32', inst='BIC', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int32x2_t', ret_is_signed=True, inst_form='BIC Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': True, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vbic_s64': ARMSema(intrin='vbic_s64', inst='BIC', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int64x1_t', ret_is_signed=True, inst_form='BIC Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': True, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vbic_s8': ARMSema(intrin='vbic_s8', inst='BIC', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int8x8_t', ret_is_signed=True, inst_form='BIC Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': True, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vbic_u16': ARMSema(intrin='vbic_u16', inst='BIC', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='BIC Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': True, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vbic_u32': ARMSema(intrin='vbic_u32', inst='BIC', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='BIC Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': True, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vbic_u64': ARMSema(intrin='vbic_u64', inst='BIC', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='BIC Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': True, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vbic_u8': ARMSema(intrin='vbic_u8', inst='BIC', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='BIC Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': True, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vbicq_s16': ARMSema(intrin='vbicq_s16', inst='BIC', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int16x8_t', ret_is_signed=True, inst_form='BIC Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': True, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vbicq_s32': ARMSema(intrin='vbicq_s32', inst='BIC', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int32x4_t', ret_is_signed=True, inst_form='BIC Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': True, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vbicq_s64': ARMSema(intrin='vbicq_s64', inst='BIC', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int64x2_t', ret_is_signed=True, inst_form='BIC Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': True, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vbicq_s8': ARMSema(intrin='vbicq_s8', inst='BIC', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int8x16_t', ret_is_signed=True, inst_form='BIC Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': True, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vbicq_u16': ARMSema(intrin='vbicq_u16', inst='BIC', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='BIC Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': True, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vbicq_u32': ARMSema(intrin='vbicq_u32', inst='BIC', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='BIC Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': True, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vbicq_u64': ARMSema(intrin='vbicq_u64', inst='BIC', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='BIC Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': True, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vbicq_u8': ARMSema(intrin='vbicq_u8', inst='BIC', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '26'), BinaryExpr('AND', Var('operand1', '27'), Var('operand2', '28'), '29')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='BIC Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': True, 'op': 0}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vbsl_s16': ARMSema(intrin='vbsl_s16', inst='BSL', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(64)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(64)), '19'), Update(Var('operand1', '32'), VReg(Var('m', '34'), '35')), Update(Var('operand2', '36'), Var('operand1', '37')), Update(Var('operand3', '38'), VReg(Var('d', '40'), '41')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='int16x4_t', ret_is_signed=True, inst_form='BSL Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'vbsl_s32': ARMSema(intrin='vbsl_s32', inst='BSL', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(64)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(64)), '19'), Update(Var('operand1', '32'), VReg(Var('m', '34'), '35')), Update(Var('operand2', '36'), Var('operand1', '37')), Update(Var('operand3', '38'), VReg(Var('d', '40'), '41')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='int32x2_t', ret_is_signed=True, inst_form='BSL Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'vbsl_s64': ARMSema(intrin='vbsl_s64', inst='BSL', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(64)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(64)), '19'), Update(Var('operand1', '32'), VReg(Var('m', '34'), '35')), Update(Var('operand2', '36'), Var('operand1', '37')), Update(Var('operand3', '38'), VReg(Var('d', '40'), '41')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='int64x1_t', ret_is_signed=True, inst_form='BSL Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'vbsl_s8': ARMSema(intrin='vbsl_s8', inst='BSL', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(64)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(64)), '19'), Update(Var('operand1', '32'), VReg(Var('m', '34'), '35')), Update(Var('operand2', '36'), Var('operand1', '37')), Update(Var('operand3', '38'), VReg(Var('d', '40'), '41')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='int8x8_t', ret_is_signed=True, inst_form='BSL Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'vbsl_u16': ARMSema(intrin='vbsl_u16', inst='BSL', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(64)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(64)), '19'), Update(Var('operand1', '32'), VReg(Var('m', '34'), '35')), Update(Var('operand2', '36'), Var('operand1', '37')), Update(Var('operand3', '38'), VReg(Var('d', '40'), '41')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='BSL Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'vbsl_u32': ARMSema(intrin='vbsl_u32', inst='BSL', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(64)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(64)), '19'), Update(Var('operand1', '32'), VReg(Var('m', '34'), '35')), Update(Var('operand2', '36'), Var('operand1', '37')), Update(Var('operand3', '38'), VReg(Var('d', '40'), '41')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='BSL Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'vbsl_u64': ARMSema(intrin='vbsl_u64', inst='BSL', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(64)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(64)), '19'), Update(Var('operand1', '32'), VReg(Var('m', '34'), '35')), Update(Var('operand2', '36'), Var('operand1', '37')), Update(Var('operand3', '38'), VReg(Var('d', '40'), '41')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='BSL Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'vbsl_u8': ARMSema(intrin='vbsl_u8', inst='BSL', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(64)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(64)), '19'), Update(Var('operand1', '32'), VReg(Var('m', '34'), '35')), Update(Var('operand2', '36'), Var('operand1', '37')), Update(Var('operand3', '38'), VReg(Var('d', '40'), '41')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='BSL Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'vbslq_s16': ARMSema(intrin='vbslq_s16', inst='BSL', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(128)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(128)), '19'), Update(Var('operand1', '32'), VReg(Var('m', '34'), '35')), Update(Var('operand2', '36'), Var('operand1', '37')), Update(Var('operand3', '38'), VReg(Var('d', '40'), '41')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='int16x8_t', ret_is_signed=True, inst_form='BSL Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'vbslq_s32': ARMSema(intrin='vbslq_s32', inst='BSL', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(128)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(128)), '19'), Update(Var('operand1', '32'), VReg(Var('m', '34'), '35')), Update(Var('operand2', '36'), Var('operand1', '37')), Update(Var('operand3', '38'), VReg(Var('d', '40'), '41')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='int32x4_t', ret_is_signed=True, inst_form='BSL Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'vbslq_s64': ARMSema(intrin='vbslq_s64', inst='BSL', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(128)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(128)), '19'), Update(Var('operand1', '32'), VReg(Var('m', '34'), '35')), Update(Var('operand2', '36'), Var('operand1', '37')), Update(Var('operand3', '38'), VReg(Var('d', '40'), '41')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='int64x2_t', ret_is_signed=True, inst_form='BSL Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'vbslq_s8': ARMSema(intrin='vbslq_s8', inst='BSL', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(128)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(128)), '19'), Update(Var('operand1', '32'), VReg(Var('m', '34'), '35')), Update(Var('operand2', '36'), Var('operand1', '37')), Update(Var('operand3', '38'), VReg(Var('d', '40'), '41')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='int8x16_t', ret_is_signed=True, inst_form='BSL Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'vbslq_u16': ARMSema(intrin='vbslq_u16', inst='BSL', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(128)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(128)), '19'), Update(Var('operand1', '32'), VReg(Var('m', '34'), '35')), Update(Var('operand2', '36'), Var('operand1', '37')), Update(Var('operand3', '38'), VReg(Var('d', '40'), '41')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='BSL Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'vbslq_u32': ARMSema(intrin='vbslq_u32', inst='BSL', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(128)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(128)), '19'), Update(Var('operand1', '32'), VReg(Var('m', '34'), '35')), Update(Var('operand2', '36'), Var('operand1', '37')), Update(Var('operand3', '38'), VReg(Var('d', '40'), '41')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='BSL Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'vbslq_u64': ARMSema(intrin='vbslq_u64', inst='BSL', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(128)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(128)), '19'), Update(Var('operand1', '32'), VReg(Var('m', '34'), '35')), Update(Var('operand2', '36'), Var('operand1', '37')), Update(Var('operand3', '38'), VReg(Var('d', '40'), '41')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='BSL Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'vbslq_u8': ARMSema(intrin='vbslq_u8', inst='BSL', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(128)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(128)), '19'), Update(Var('operand1', '32'), VReg(Var('m', '34'), '35')), Update(Var('operand2', '36'), Var('operand1', '37')), Update(Var('operand3', '38'), VReg(Var('d', '40'), '41')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='BSL Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'vceq_s16': ARMSema(intrin='vceq_s16', inst='CMEQ', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(16)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(16)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(16), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(16), '43')), Update(Var('test_passed', '52'), BinaryExpr('==', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='CMEQ Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'and_test': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vceq_s32': ARMSema(intrin='vceq_s32', inst='CMEQ', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(32)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(32)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(32), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(32), '43')), Update(Var('test_passed', '52'), BinaryExpr('==', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='CMEQ Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'and_test': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vceq_s64': ARMSema(intrin='vceq_s64', inst='CMEQ', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(64), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(64), '43')), Update(Var('test_passed', '52'), BinaryExpr('==', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='CMEQ Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'and_test': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_sisd'),
    'vceq_s8': ARMSema(intrin='vceq_s8', inst='CMEQ', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(8)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(8)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(8), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(8), '43')), Update(Var('test_passed', '52'), BinaryExpr('==', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='CMEQ Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'and_test': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vceq_u16': ARMSema(intrin='vceq_u16', inst='CMEQ', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(16)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(16)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(16), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(16), '43')), Update(Var('test_passed', '52'), BinaryExpr('==', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='CMEQ Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'and_test': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vceq_u32': ARMSema(intrin='vceq_u32', inst='CMEQ', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(32)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(32)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(32), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(32), '43')), Update(Var('test_passed', '52'), BinaryExpr('==', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='CMEQ Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'and_test': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vceq_u64': ARMSema(intrin='vceq_u64', inst='CMEQ', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(64), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(64), '43')), Update(Var('test_passed', '52'), BinaryExpr('==', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='CMEQ Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'and_test': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_sisd'),
    'vceq_u8': ARMSema(intrin='vceq_u8', inst='CMEQ', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(8)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(8)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(8), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(8), '43')), Update(Var('test_passed', '52'), BinaryExpr('==', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='CMEQ Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'and_test': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vceqd_s64': ARMSema(intrin='vceqd_s64', inst='CMEQ', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(64), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(64), '43')), Update(Var('test_passed', '52'), BinaryExpr('==', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64_t', ret_is_signed=False, inst_form='CMEQ Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'and_test': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_sisd'),
    'vceqd_u64': ARMSema(intrin='vceqd_u64', inst='CMEQ', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(64), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(64), '43')), Update(Var('test_passed', '52'), BinaryExpr('==', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64_t', ret_is_signed=False, inst_form='CMEQ Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'and_test': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_sisd'),
    'vceqq_s16': ARMSema(intrin='vceqq_s16', inst='CMEQ', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(16)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(16)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(16), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(16), '43')), Update(Var('test_passed', '52'), BinaryExpr('==', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='CMEQ Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'and_test': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vceqq_s32': ARMSema(intrin='vceqq_s32', inst='CMEQ', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(32)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(32)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(32), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(32), '43')), Update(Var('test_passed', '52'), BinaryExpr('==', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='CMEQ Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'and_test': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vceqq_s64': ARMSema(intrin='vceqq_s64', inst='CMEQ', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(64), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(64), '43')), Update(Var('test_passed', '52'), BinaryExpr('==', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='CMEQ Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'and_test': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vceqq_s8': ARMSema(intrin='vceqq_s8', inst='CMEQ', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(8)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(8)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(15), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(8), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(8), '43')), Update(Var('test_passed', '52'), BinaryExpr('==', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='CMEQ Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'and_test': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vceqq_u16': ARMSema(intrin='vceqq_u16', inst='CMEQ', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(16)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(16)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(16), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(16), '43')), Update(Var('test_passed', '52'), BinaryExpr('==', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='CMEQ Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'and_test': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vceqq_u32': ARMSema(intrin='vceqq_u32', inst='CMEQ', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(32)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(32)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(32), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(32), '43')), Update(Var('test_passed', '52'), BinaryExpr('==', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='CMEQ Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'and_test': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vceqq_u64': ARMSema(intrin='vceqq_u64', inst='CMEQ', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(64), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(64), '43')), Update(Var('test_passed', '52'), BinaryExpr('==', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='CMEQ Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'and_test': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vceqq_u8': ARMSema(intrin='vceqq_u8', inst='CMEQ', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(8)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(8)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(15), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(8), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(8), '43')), Update(Var('test_passed', '52'), BinaryExpr('==', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='CMEQ Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'and_test': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vceqz_s16': ARMSema(intrin='vceqz_s16', inst='CMEQ', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26')], '27')), Update(Var('test_passed', '37'), BinaryExpr('==', Var('element', '38'), Number(0), '39')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='CMEQ Vd.4H,Vn.4H,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'comparison': 2}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vceqz_s32': ARMSema(intrin='vceqz_s32', inst='CMEQ', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(1), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26')], '27')), Update(Var('test_passed', '37'), BinaryExpr('==', Var('element', '38'), Number(0), '39')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='CMEQ Vd.2S,Vn.2S,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'comparison': 2}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vceqz_s64': ARMSema(intrin='vceqz_s64', inst='CMEQ', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('test_passed', '37'), BinaryExpr('==', Var('element', '38'), Number(0), '39')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='CMEQ Dd,Dn,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'comparison': 2}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_sisd'),
    'vceqz_s8': ARMSema(intrin='vceqz_s8', inst='CMEQ', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26')], '27')), Update(Var('test_passed', '37'), BinaryExpr('==', Var('element', '38'), Number(0), '39')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='CMEQ Vd.8B,Vn.8B,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'comparison': 2}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vceqz_u16': ARMSema(intrin='vceqz_u16', inst='CMEQ', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26')], '27')), Update(Var('test_passed', '37'), BinaryExpr('==', Var('element', '38'), Number(0), '39')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='CMEQ Vd.4H,Vn.4H,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'comparison': 2}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vceqz_u32': ARMSema(intrin='vceqz_u32', inst='CMEQ', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(1), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26')], '27')), Update(Var('test_passed', '37'), BinaryExpr('==', Var('element', '38'), Number(0), '39')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='CMEQ Vd.2S,Vn.2S,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'comparison': 2}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vceqz_u64': ARMSema(intrin='vceqz_u64', inst='CMEQ', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('test_passed', '37'), BinaryExpr('==', Var('element', '38'), Number(0), '39')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='CMEQ Dd,Dn,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'comparison': 2}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_sisd'),
    'vceqz_u8': ARMSema(intrin='vceqz_u8', inst='CMEQ', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26')], '27')), Update(Var('test_passed', '37'), BinaryExpr('==', Var('element', '38'), Number(0), '39')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='CMEQ Vd.8B,Vn.8B,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'comparison': 2}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vceqzd_s64': ARMSema(intrin='vceqzd_s64', inst='CMEQ', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('test_passed', '37'), BinaryExpr('==', Var('element', '38'), Number(0), '39')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64_t', ret_is_signed=False, inst_form='CMEQ Dd,Dn,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'comparison': 2}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_sisd'),
    'vceqzd_u64': ARMSema(intrin='vceqzd_u64', inst='CMEQ', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('test_passed', '37'), BinaryExpr('==', Var('element', '38'), Number(0), '39')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64_t', ret_is_signed=False, inst_form='CMEQ Dd,Dn,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'comparison': 2}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_sisd'),
    'vceqzq_s16': ARMSema(intrin='vceqzq_s16', inst='CMEQ', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26')], '27')), Update(Var('test_passed', '37'), BinaryExpr('==', Var('element', '38'), Number(0), '39')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='CMEQ Vd.8H,Vn.8H,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'comparison': 2}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vceqzq_s32': ARMSema(intrin='vceqzq_s32', inst='CMEQ', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26')], '27')), Update(Var('test_passed', '37'), BinaryExpr('==', Var('element', '38'), Number(0), '39')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='CMEQ Vd.4S,Vn.4S,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'comparison': 2}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vceqzq_s64': ARMSema(intrin='vceqzq_s64', inst='CMEQ', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(1), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('test_passed', '37'), BinaryExpr('==', Var('element', '38'), Number(0), '39')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='CMEQ Vd.2D,Vn.2D,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'comparison': 2}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vceqzq_s8': ARMSema(intrin='vceqzq_s8', inst='CMEQ', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(15), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26')], '27')), Update(Var('test_passed', '37'), BinaryExpr('==', Var('element', '38'), Number(0), '39')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='CMEQ Vd.16B,Vn.16B,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'comparison': 2}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vceqzq_u16': ARMSema(intrin='vceqzq_u16', inst='CMEQ', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26')], '27')), Update(Var('test_passed', '37'), BinaryExpr('==', Var('element', '38'), Number(0), '39')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='CMEQ Vd.8H,Vn.8H,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'comparison': 2}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vceqzq_u32': ARMSema(intrin='vceqzq_u32', inst='CMEQ', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26')], '27')), Update(Var('test_passed', '37'), BinaryExpr('==', Var('element', '38'), Number(0), '39')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='CMEQ Vd.4S,Vn.4S,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'comparison': 2}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vceqzq_u64': ARMSema(intrin='vceqzq_u64', inst='CMEQ', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(1), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('test_passed', '37'), BinaryExpr('==', Var('element', '38'), Number(0), '39')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='CMEQ Vd.2D,Vn.2D,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'comparison': 2}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vceqzq_u8': ARMSema(intrin='vceqzq_u8', inst='CMEQ', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(15), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26')], '27')), Update(Var('test_passed', '37'), BinaryExpr('==', Var('element', '38'), Number(0), '39')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='CMEQ Vd.16B,Vn.16B,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'comparison': 2}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vcge_s16': ARMSema(intrin='vcge_s16', inst='CMGE', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='CMGE Vd.4H,Vm.4H,Vn.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcge_s32': ARMSema(intrin='vcge_s32', inst='CMGE', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='CMGE Vd.2S,Vm.2S,Vn.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcge_s64': ARMSema(intrin='vcge_s64', inst='CMGE', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='CMGE Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_sisd'),
    'vcge_s8': ARMSema(intrin='vcge_s8', inst='CMGE', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='CMGE Vd.8B,Vm.8B,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcge_u16': ARMSema(intrin='vcge_u16', inst='CMHS', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='CMHS Vd.4H,Vm.4H,Vn.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcge_u32': ARMSema(intrin='vcge_u32', inst='CMHS', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='CMHS Vd.2S,Vm.2S,Vn.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcge_u64': ARMSema(intrin='vcge_u64', inst='CMHS', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='CMHS Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_sisd'),
    'vcge_u8': ARMSema(intrin='vcge_u8', inst='CMHS', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='CMHS Vd.8B,Vm.8B,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcged_s64': ARMSema(intrin='vcged_s64', inst='CMGE', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64_t', ret_is_signed=False, inst_form='CMGE Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_sisd'),
    'vcged_u64': ARMSema(intrin='vcged_u64', inst='CMHS', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64_t', ret_is_signed=False, inst_form='CMHS Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_sisd'),
    'vcgeq_s16': ARMSema(intrin='vcgeq_s16', inst='CMGE', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='CMGE Vd.8H,Vm.8H,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgeq_s32': ARMSema(intrin='vcgeq_s32', inst='CMGE', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='CMGE Vd.4S,Vm.4S,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgeq_s64': ARMSema(intrin='vcgeq_s64', inst='CMGE', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='CMGE Vd.2D,Vm.2D,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': False, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgeq_s8': ARMSema(intrin='vcgeq_s8', inst='CMGE', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(15), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='CMGE Vd.16B,Vm.16B,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgeq_u16': ARMSema(intrin='vcgeq_u16', inst='CMHS', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='CMHS Vd.8H,Vm.8H,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgeq_u32': ARMSema(intrin='vcgeq_u32', inst='CMHS', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='CMHS Vd.4S,Vm.4S,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgeq_u64': ARMSema(intrin='vcgeq_u64', inst='CMHS', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='CMHS Vd.2D,Vm.2D,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': True, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgeq_u8': ARMSema(intrin='vcgeq_u8', inst='CMHS', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(15), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='CMHS Vd.16B,Vm.16B,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgez_s16': ARMSema(intrin='vcgez_s16', inst='CMGE', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26')], '27')), Update(Var('test_passed', '33'), BinaryExpr('>=', Var('element', '34'), Number(0), '35')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='CMGE Vd.4H,Vn.4H,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'comparison': 1}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vcgez_s32': ARMSema(intrin='vcgez_s32', inst='CMGE', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(1), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26')], '27')), Update(Var('test_passed', '33'), BinaryExpr('>=', Var('element', '34'), Number(0), '35')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='CMGE Vd.2S,Vn.2S,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'comparison': 1}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vcgez_s64': ARMSema(intrin='vcgez_s64', inst='CMGE', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('test_passed', '33'), BinaryExpr('>=', Var('element', '34'), Number(0), '35')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='CMGE Dd,Dn,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'comparison': 1}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_sisd'),
    'vcgez_s8': ARMSema(intrin='vcgez_s8', inst='CMGE', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26')], '27')), Update(Var('test_passed', '33'), BinaryExpr('>=', Var('element', '34'), Number(0), '35')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='CMGE Vd.8B,Vn.8B,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'comparison': 1}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vcgezd_s64': ARMSema(intrin='vcgezd_s64', inst='CMGE', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('test_passed', '33'), BinaryExpr('>=', Var('element', '34'), Number(0), '35')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64_t', ret_is_signed=False, inst_form='CMGE Dd,Dn,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'comparison': 1}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_sisd'),
    'vcgezq_s16': ARMSema(intrin='vcgezq_s16', inst='CMGE', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26')], '27')), Update(Var('test_passed', '33'), BinaryExpr('>=', Var('element', '34'), Number(0), '35')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='CMGE Vd.8H,Vn.8H,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'comparison': 1}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vcgezq_s32': ARMSema(intrin='vcgezq_s32', inst='CMGE', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26')], '27')), Update(Var('test_passed', '33'), BinaryExpr('>=', Var('element', '34'), Number(0), '35')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='CMGE Vd.4S,Vn.4S,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'comparison': 1}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vcgezq_s64': ARMSema(intrin='vcgezq_s64', inst='CMGE', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(1), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('test_passed', '33'), BinaryExpr('>=', Var('element', '34'), Number(0), '35')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='CMGE Vd.2D,Vn.2D,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'comparison': 1}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vcgezq_s8': ARMSema(intrin='vcgezq_s8', inst='CMGE', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(15), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26')], '27')), Update(Var('test_passed', '33'), BinaryExpr('>=', Var('element', '34'), Number(0), '35')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='CMGE Vd.16B,Vn.16B,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'comparison': 1}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vcgt_s16': ARMSema(intrin='vcgt_s16', inst='CMGT', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='CMGT Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgt_s32': ARMSema(intrin='vcgt_s32', inst='CMGT', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='CMGT Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgt_s64': ARMSema(intrin='vcgt_s64', inst='CMGT', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='CMGT Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_sisd'),
    'vcgt_s8': ARMSema(intrin='vcgt_s8', inst='CMGT', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='CMGT Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgt_u16': ARMSema(intrin='vcgt_u16', inst='CMHI', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='CMHI Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgt_u32': ARMSema(intrin='vcgt_u32', inst='CMHI', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='CMHI Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgt_u64': ARMSema(intrin='vcgt_u64', inst='CMHI', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='CMHI Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_sisd'),
    'vcgt_u8': ARMSema(intrin='vcgt_u8', inst='CMHI', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='CMHI Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgtd_s64': ARMSema(intrin='vcgtd_s64', inst='CMGT', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64_t', ret_is_signed=False, inst_form='CMGT Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_sisd'),
    'vcgtd_u64': ARMSema(intrin='vcgtd_u64', inst='CMHI', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64_t', ret_is_signed=False, inst_form='CMHI Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_sisd'),
    'vcgtq_s16': ARMSema(intrin='vcgtq_s16', inst='CMGT', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='CMGT Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgtq_s32': ARMSema(intrin='vcgtq_s32', inst='CMGT', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='CMGT Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgtq_s64': ARMSema(intrin='vcgtq_s64', inst='CMGT', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='CMGT Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': False, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgtq_s8': ARMSema(intrin='vcgtq_s8', inst='CMGT', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(15), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='CMGT Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgtq_u16': ARMSema(intrin='vcgtq_u16', inst='CMHI', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='CMHI Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgtq_u32': ARMSema(intrin='vcgtq_u32', inst='CMHI', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='CMHI Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgtq_u64': ARMSema(intrin='vcgtq_u64', inst='CMHI', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='CMHI Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': True, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgtq_u8': ARMSema(intrin='vcgtq_u8', inst='CMHI', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(15), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='CMHI Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcgtz_s16': ARMSema(intrin='vcgtz_s16', inst='CMGT', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26')], '27')), Update(Var('test_passed', '29'), BinaryExpr('>', Var('element', '30'), Number(0), '31')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='CMGT Vd.4H,Vn.4H,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'comparison': 0}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vcgtz_s32': ARMSema(intrin='vcgtz_s32', inst='CMGT', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(1), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26')], '27')), Update(Var('test_passed', '29'), BinaryExpr('>', Var('element', '30'), Number(0), '31')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='CMGT Vd.2S,Vn.2S,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'comparison': 0}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vcgtz_s64': ARMSema(intrin='vcgtz_s64', inst='CMGT', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('test_passed', '29'), BinaryExpr('>', Var('element', '30'), Number(0), '31')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='CMGT Dd,Dn,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'comparison': 0}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_sisd'),
    'vcgtz_s8': ARMSema(intrin='vcgtz_s8', inst='CMGT', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26')], '27')), Update(Var('test_passed', '29'), BinaryExpr('>', Var('element', '30'), Number(0), '31')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='CMGT Vd.8B,Vn.8B,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'comparison': 0}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vcgtzd_s64': ARMSema(intrin='vcgtzd_s64', inst='CMGT', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('test_passed', '29'), BinaryExpr('>', Var('element', '30'), Number(0), '31')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64_t', ret_is_signed=False, inst_form='CMGT Dd,Dn,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'comparison': 0}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_sisd'),
    'vcgtzq_s16': ARMSema(intrin='vcgtzq_s16', inst='CMGT', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26')], '27')), Update(Var('test_passed', '29'), BinaryExpr('>', Var('element', '30'), Number(0), '31')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='CMGT Vd.8H,Vn.8H,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'comparison': 0}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vcgtzq_s32': ARMSema(intrin='vcgtzq_s32', inst='CMGT', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26')], '27')), Update(Var('test_passed', '29'), BinaryExpr('>', Var('element', '30'), Number(0), '31')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='CMGT Vd.4S,Vn.4S,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'comparison': 0}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vcgtzq_s64': ARMSema(intrin='vcgtzq_s64', inst='CMGT', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(1), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('test_passed', '29'), BinaryExpr('>', Var('element', '30'), Number(0), '31')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='CMGT Vd.2D,Vn.2D,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'comparison': 0}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vcgtzq_s8': ARMSema(intrin='vcgtzq_s8', inst='CMGT', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(15), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26')], '27')), Update(Var('test_passed', '29'), BinaryExpr('>', Var('element', '30'), Number(0), '31')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='CMGT Vd.16B,Vn.16B,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'comparison': 0}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vcle_s16': ARMSema(intrin='vcle_s16', inst='CMGE', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='CMGE Vd.4H,Vm.4H,Vn.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcle_s32': ARMSema(intrin='vcle_s32', inst='CMGE', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='CMGE Vd.2S,Vm.2S,Vn.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcle_s64': ARMSema(intrin='vcle_s64', inst='CMGE', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='CMGE Dd,Dm,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_sisd'),
    'vcle_s8': ARMSema(intrin='vcle_s8', inst='CMGE', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='CMGE Vd.8B,Vm.8B,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcle_u16': ARMSema(intrin='vcle_u16', inst='CMHS', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='CMHS Vd.4H,Vm.4H,Vn.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcle_u32': ARMSema(intrin='vcle_u32', inst='CMHS', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='CMHS Vd.2S,Vm.2S,Vn.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcle_u64': ARMSema(intrin='vcle_u64', inst='CMHS', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='CMHS Dd,Dm,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_sisd'),
    'vcle_u8': ARMSema(intrin='vcle_u8', inst='CMHS', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='CMHS Vd.8B,Vm.8B,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcled_s64': ARMSema(intrin='vcled_s64', inst='CMGE', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64_t', ret_is_signed=False, inst_form='CMGE Dd,Dm,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_sisd'),
    'vcled_u64': ARMSema(intrin='vcled_u64', inst='CMHS', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64_t', ret_is_signed=False, inst_form='CMHS Dd,Dm,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_sisd'),
    'vcleq_s16': ARMSema(intrin='vcleq_s16', inst='CMGE', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='CMGE Vd.8H,Vm.8H,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcleq_s32': ARMSema(intrin='vcleq_s32', inst='CMGE', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='CMGE Vd.4S,Vm.4S,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcleq_s64': ARMSema(intrin='vcleq_s64', inst='CMGE', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='CMGE Vd.2D,Vm.2D,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': False, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcleq_s8': ARMSema(intrin='vcleq_s8', inst='CMGE', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(15), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='CMGE Vd.16B,Vm.16B,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcleq_u16': ARMSema(intrin='vcleq_u16', inst='CMHS', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='CMHS Vd.8H,Vm.8H,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcleq_u32': ARMSema(intrin='vcleq_u32', inst='CMHS', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='CMHS Vd.4S,Vm.4S,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcleq_u64': ARMSema(intrin='vcleq_u64', inst='CMHS', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='CMHS Vd.2D,Vm.2D,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': True, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcleq_u8': ARMSema(intrin='vcleq_u8', inst='CMHS', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(15), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>=', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='CMHS Vd.16B,Vm.16B,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True, 'cmp_eq': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vclez_s16': ARMSema(intrin='vclez_s16', inst='CMLE', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26')], '27')), Update(Var('test_passed', '41'), BinaryExpr('<=', Var('element', '42'), Number(0), '43')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='CMLE Vd.4H,Vn.4H,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'comparison': 3}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vclez_s32': ARMSema(intrin='vclez_s32', inst='CMLE', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(1), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26')], '27')), Update(Var('test_passed', '41'), BinaryExpr('<=', Var('element', '42'), Number(0), '43')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='CMLE Vd.2S,Vn.2S,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'comparison': 3}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vclez_s64': ARMSema(intrin='vclez_s64', inst='CMLE', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('test_passed', '41'), BinaryExpr('<=', Var('element', '42'), Number(0), '43')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='CMLE Dd,Dn,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'comparison': 3}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_sisd'),
    'vclez_s8': ARMSema(intrin='vclez_s8', inst='CMLE', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26')], '27')), Update(Var('test_passed', '41'), BinaryExpr('<=', Var('element', '42'), Number(0), '43')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='CMLE Vd.8B,Vn.8B,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'comparison': 3}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vclezd_s64': ARMSema(intrin='vclezd_s64', inst='CMLE', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('test_passed', '41'), BinaryExpr('<=', Var('element', '42'), Number(0), '43')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64_t', ret_is_signed=False, inst_form='CMLE Dd,Dn,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'comparison': 3}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_sisd'),
    'vclezq_s16': ARMSema(intrin='vclezq_s16', inst='CMLE', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26')], '27')), Update(Var('test_passed', '41'), BinaryExpr('<=', Var('element', '42'), Number(0), '43')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='CMLE Vd.8H,Vn.8H,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'comparison': 3}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vclezq_s32': ARMSema(intrin='vclezq_s32', inst='CMLE', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26')], '27')), Update(Var('test_passed', '41'), BinaryExpr('<=', Var('element', '42'), Number(0), '43')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='CMLE Vd.4S,Vn.4S,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'comparison': 3}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vclezq_s64': ARMSema(intrin='vclezq_s64', inst='CMLE', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(1), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('test_passed', '41'), BinaryExpr('<=', Var('element', '42'), Number(0), '43')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='CMLE Vd.2D,Vn.2D,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'comparison': 3}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vclezq_s8': ARMSema(intrin='vclezq_s8', inst='CMLE', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(15), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26')], '27')), Update(Var('test_passed', '41'), BinaryExpr('<=', Var('element', '42'), Number(0), '43')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='CMLE Vd.16B,Vn.16B,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'comparison': 3}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_bulk_simd'),
    'vclt_s16': ARMSema(intrin='vclt_s16', inst='CMGT', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='CMGT Vd.4H,Vm.4H,Vn.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vclt_s32': ARMSema(intrin='vclt_s32', inst='CMGT', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='CMGT Vd.2S,Vm.2S,Vn.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vclt_s64': ARMSema(intrin='vclt_s64', inst='CMGT', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='CMGT Dd,Dm,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_sisd'),
    'vclt_s8': ARMSema(intrin='vclt_s8', inst='CMGT', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='CMGT Vd.8B,Vm.8B,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vclt_u16': ARMSema(intrin='vclt_u16', inst='CMHI', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='CMHI Vd.4H,Vm.4H,Vn.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vclt_u32': ARMSema(intrin='vclt_u32', inst='CMHI', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='CMHI Vd.2S,Vm.2S,Vn.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vclt_u64': ARMSema(intrin='vclt_u64', inst='CMHI', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='CMHI Dd,Dm,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_sisd'),
    'vclt_u8': ARMSema(intrin='vclt_u8', inst='CMHI', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='CMHI Vd.8B,Vm.8B,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcltd_s64': ARMSema(intrin='vcltd_s64', inst='CMGT', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64_t', ret_is_signed=False, inst_form='CMGT Dd,Dm,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_sisd'),
    'vcltd_u64': ARMSema(intrin='vcltd_u64', inst='CMHI', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64_t', ret_is_signed=False, inst_form='CMHI Dd,Dm,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_sisd'),
    'vcltq_s16': ARMSema(intrin='vcltq_s16', inst='CMGT', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='CMGT Vd.8H,Vm.8H,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcltq_s32': ARMSema(intrin='vcltq_s32', inst='CMGT', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='CMGT Vd.4S,Vm.4S,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcltq_s64': ARMSema(intrin='vcltq_s64', inst='CMGT', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='CMGT Vd.2D,Vm.2D,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': False, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcltq_s8': ARMSema(intrin='vcltq_s8', inst='CMGT', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(15), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(0)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='CMGT Vd.16B,Vm.16B,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcltq_u16': ARMSema(intrin='vcltq_u16', inst='CMHI', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='CMHI Vd.8H,Vm.8H,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcltq_u32': ARMSema(intrin='vcltq_u32', inst='CMHI', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='CMHI Vd.4S,Vm.4S,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcltq_u64': ARMSema(intrin='vcltq_u64', inst='CMHI', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(64), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='CMHI Vd.2D,Vm.2D,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': True, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcltq_u8': ARMSema(intrin='vcltq_u8', inst='CMHI', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('test_passed', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '68'), Number(0), Number(15), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(1)], '47')), Update(Var('test_passed', '48'), BinaryExpr('>', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='CMHI Vd.16B,Vm.16B,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'b', 'm': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True, 'cmp_eq': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_int_simd'),
    'vcltz_s16': ARMSema(intrin='vcltz_s16', inst='CMLT', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26')], '27')), Update(Var('test_passed', '45'), BinaryExpr('<', Var('element', '46'), Number(0), '47')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='CMLT Vd.4H,Vn.4H,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'comparison': 4}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_lessthan_simd'),
    'vcltz_s32': ARMSema(intrin='vcltz_s32', inst='CMLT', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(1), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26')], '27')), Update(Var('test_passed', '45'), BinaryExpr('<', Var('element', '46'), Number(0), '47')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='CMLT Vd.2S,Vn.2S,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'comparison': 4}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_lessthan_simd'),
    'vcltz_s64': ARMSema(intrin='vcltz_s64', inst='CMLT', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('test_passed', '45'), BinaryExpr('<', Var('element', '46'), Number(0), '47')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='CMLT Dd,Dn,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'comparison': 4}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_lessthan_sisd'),
    'vcltz_s8': ARMSema(intrin='vcltz_s8', inst='CMLT', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26')], '27')), Update(Var('test_passed', '45'), BinaryExpr('<', Var('element', '46'), Number(0), '47')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='CMLT Vd.8B,Vn.8B,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'comparison': 4}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_lessthan_simd'),
    'vcltzd_s64': ARMSema(intrin='vcltzd_s64', inst='CMLT', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('test_passed', '45'), BinaryExpr('<', Var('element', '46'), Number(0), '47')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64_t', ret_is_signed=False, inst_form='CMLT Dd,Dn,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'comparison': 4}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_lessthan_sisd'),
    'vcltzq_s16': ARMSema(intrin='vcltzq_s16', inst='CMLT', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26')], '27')), Update(Var('test_passed', '45'), BinaryExpr('<', Var('element', '46'), Number(0), '47')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='CMLT Vd.8H,Vn.8H,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'comparison': 4}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_lessthan_simd'),
    'vcltzq_s32': ARMSema(intrin='vcltzq_s32', inst='CMLT', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26')], '27')), Update(Var('test_passed', '45'), BinaryExpr('<', Var('element', '46'), Number(0), '47')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='CMLT Vd.4S,Vn.4S,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'comparison': 4}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_lessthan_simd'),
    'vcltzq_s64': ARMSema(intrin='vcltzq_s64', inst='CMLT', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(1), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('test_passed', '45'), BinaryExpr('<', Var('element', '46'), Number(0), '47')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='CMLT Vd.2D,Vn.2D,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'comparison': 4}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_lessthan_simd'),
    'vcltzq_s8': ARMSema(intrin='vcltzq_s8', inst='CMLT', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('test_passed', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '61'), Number(0), Number(15), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26')], '27')), Update(Var('test_passed', '45'), BinaryExpr('<', Var('element', '46'), Number(0), '47')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), IfElseExpr(Var('test_passed', '57'), Call('Ones', [], '56'), Call('Zeros', [], '59'), '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='CMLT Vd.16B,Vn.16B,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'comparison': 4}, belongs_to='aarch64_vector_arithmetic_unary_cmp_int_lessthan_simd'),
    'vcombine_s16': ARMSema(intrin='vcombine_s16', inst='DUP+INS', params=[Parameter(name='low', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='high', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), Update(VReg(Var('d', '16'), '17'), BinaryExpr(':', ArrayIndex(Var('operand2', '18'), [SliceRange(Number(63), Number(0), '21')], '22'), ArrayIndex(Var('operand1', '23'), [SliceRange(Number(63), Number(0), '26')], '27'), '28'))], rettype='int16x8_t', ret_is_signed=True, inst_form='?', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'low', 'm': 'high'}, resolving={'datasize': 64}, belongs_to='combine_handcrafted'),
    'vcombine_s32': ARMSema(intrin='vcombine_s32', inst='DUP+INS', params=[Parameter(name='low', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='high', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), Update(VReg(Var('d', '16'), '17'), BinaryExpr(':', ArrayIndex(Var('operand2', '18'), [SliceRange(Number(63), Number(0), '21')], '22'), ArrayIndex(Var('operand1', '23'), [SliceRange(Number(63), Number(0), '26')], '27'), '28'))], rettype='int32x4_t', ret_is_signed=True, inst_form='?', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'low', 'm': 'high'}, resolving={'datasize': 64}, belongs_to='combine_handcrafted'),
    'vcombine_s64': ARMSema(intrin='vcombine_s64', inst='DUP+INS', params=[Parameter(name='low', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='high', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), Update(VReg(Var('d', '16'), '17'), BinaryExpr(':', ArrayIndex(Var('operand2', '18'), [SliceRange(Number(63), Number(0), '21')], '22'), ArrayIndex(Var('operand1', '23'), [SliceRange(Number(63), Number(0), '26')], '27'), '28'))], rettype='int64x2_t', ret_is_signed=True, inst_form='?', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'low', 'm': 'high'}, resolving={'datasize': 64}, belongs_to='combine_handcrafted'),
    'vcombine_s8': ARMSema(intrin='vcombine_s8', inst='DUP+INS', params=[Parameter(name='low', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='high', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), Update(VReg(Var('d', '16'), '17'), BinaryExpr(':', ArrayIndex(Var('operand2', '18'), [SliceRange(Number(63), Number(0), '21')], '22'), ArrayIndex(Var('operand1', '23'), [SliceRange(Number(63), Number(0), '26')], '27'), '28'))], rettype='int8x16_t', ret_is_signed=True, inst_form='?', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'low', 'm': 'high'}, resolving={'datasize': 64}, belongs_to='combine_handcrafted'),
    'vcombine_u16': ARMSema(intrin='vcombine_u16', inst='DUP+INS', params=[Parameter(name='low', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='high', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), Update(VReg(Var('d', '16'), '17'), BinaryExpr(':', ArrayIndex(Var('operand2', '18'), [SliceRange(Number(63), Number(0), '21')], '22'), ArrayIndex(Var('operand1', '23'), [SliceRange(Number(63), Number(0), '26')], '27'), '28'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='?', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'low', 'm': 'high'}, resolving={'datasize': 64}, belongs_to='combine_handcrafted'),
    'vcombine_u32': ARMSema(intrin='vcombine_u32', inst='DUP+INS', params=[Parameter(name='low', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='high', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), Update(VReg(Var('d', '16'), '17'), BinaryExpr(':', ArrayIndex(Var('operand2', '18'), [SliceRange(Number(63), Number(0), '21')], '22'), ArrayIndex(Var('operand1', '23'), [SliceRange(Number(63), Number(0), '26')], '27'), '28'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='?', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'low', 'm': 'high'}, resolving={'datasize': 64}, belongs_to='combine_handcrafted'),
    'vcombine_u64': ARMSema(intrin='vcombine_u64', inst='DUP+INS', params=[Parameter(name='low', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='high', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), Update(VReg(Var('d', '16'), '17'), BinaryExpr(':', ArrayIndex(Var('operand2', '18'), [SliceRange(Number(63), Number(0), '21')], '22'), ArrayIndex(Var('operand1', '23'), [SliceRange(Number(63), Number(0), '26')], '27'), '28'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='?', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'low', 'm': 'high'}, resolving={'datasize': 64}, belongs_to='combine_handcrafted'),
    'vcombine_u8': ARMSema(intrin='vcombine_u8', inst='DUP+INS', params=[Parameter(name='low', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='high', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), Update(VReg(Var('d', '16'), '17'), BinaryExpr(':', ArrayIndex(Var('operand2', '18'), [SliceRange(Number(63), Number(0), '21')], '22'), ArrayIndex(Var('operand1', '23'), [SliceRange(Number(63), Number(0), '26')], '27'), '28'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='?', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'low', 'm': 'high'}, resolving={'datasize': 64}, belongs_to='combine_handcrafted'),
    'vdot_s32': ARMSema(intrin='vdot_s32', inst='SDOT', params=[Parameter(name='r', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(64)), '22'), Update(Var('result', '23'), VReg(Var('d', '25'), '26')), For(Var('e', '293'), Number(0), Number(1), [VarsDecl([VarDeclUndef(Var('zero', '29'), '30'), VarDeclUndef(Var('res0', '31'), '32'), VarDeclUndef(Var('res1', '33'), '34'), VarDeclUndef(Var('res2', '35'), '36'), VarDeclUndef(Var('res3', '37'), '38')], ('integer', Number(64)), '39'), VarsDecl([VarDeclUndef(Var('element10', '40'), '41'), VarDeclUndef(Var('element20', '42'), '43'), VarDeclUndef(Var('element11', '44'), '45'), VarDeclUndef(Var('element21', '46'), '47'), VarDeclUndef(Var('element12', '48'), '49'), VarDeclUndef(Var('element22', '50'), '51'), VarDeclUndef(Var('element13', '52'), '53'), VarDeclUndef(Var('element23', '54'), '55')], ('integer', Number(64)), '56'), Update(Var('element10', '58'), Call('SInt', [ElemSlice(Var('operand1', '61'), BinaryExpr('*', Number(4), Var('e', '62'), '63'), Number(8), '67')], '68')), Update(Var('element20', '69'), Call('SInt', [ElemSlice(Var('operand2', '72'), BinaryExpr('*', Number(4), Var('e', '73'), '74'), Number(8), '78')], '79')), Update(Var('res0', '80'), BinaryExpr('*', Var('element10', '81'), Var('element20', '82'), '83')), Update(Var('element11', '84'), Call('SInt', [ElemSlice(Var('operand1', '87'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '88'), '89'), Number(1), '90'), Number(8), '93')], '94')), Update(Var('element21', '95'), Call('SInt', [ElemSlice(Var('operand2', '98'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '99'), '100'), Number(1), '101'), Number(8), '104')], '105')), Update(Var('res1', '106'), BinaryExpr('*', Var('element11', '107'), Var('element21', '108'), '109')), Update(Var('element12', '110'), Call('SInt', [ElemSlice(Var('operand1', '113'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '114'), '115'), Number(2), '116'), Number(8), '119')], '120')), Update(Var('element22', '121'), Call('SInt', [ElemSlice(Var('operand2', '124'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '125'), '126'), Number(2), '127'), Number(8), '130')], '131')), Update(Var('res2', '132'), BinaryExpr('*', Var('element12', '133'), Var('element22', '134'), '135')), Update(Var('element13', '136'), Call('SInt', [ElemSlice(Var('operand1', '139'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '140'), '141'), Number(3), '142'), Number(8), '145')], '146')), Update(Var('element23', '147'), Call('SInt', [ElemSlice(Var('operand2', '150'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '151'), '152'), Number(3), '153'), Number(8), '156')], '157')), Update(Var('res3', '158'), BinaryExpr('*', Var('element13', '159'), Var('element23', '160'), '161')), Update(Var('zero', '162'), ElemSlice(Var('result', '164'), Var('e', '165'), Number(32), '167')), Update(ElemSlice(Var('result2', '280'), Var('e', '281'), Number(32), '283'), BinaryExpr('+', BinaryExpr('+', BinaryExpr('+', BinaryExpr('+', Var('zero', '284'), Var('res0', '285'), '286'), Var('res1', '287'), '288'), Var('res2', '289'), '290'), Var('res3', '291'), '292'))], 1, '294'), Update(VReg(Var('d', '296'), '297'), Var('result2', '298'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SDOT Vd.2S,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'signed': True, 'esize': 32, 'datasize': 64, 'elements': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_dotp'),
    'vdot_u32': ARMSema(intrin='vdot_u32', inst='UDOT', params=[Parameter(name='r', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(64)), '22'), Update(Var('result', '23'), VReg(Var('d', '25'), '26')), For(Var('e', '293'), Number(0), Number(1), [VarsDecl([VarDeclUndef(Var('zero', '29'), '30'), VarDeclUndef(Var('res0', '31'), '32'), VarDeclUndef(Var('res1', '33'), '34'), VarDeclUndef(Var('res2', '35'), '36'), VarDeclUndef(Var('res3', '37'), '38')], ('integer', Number(64)), '39'), VarsDecl([VarDeclUndef(Var('element10', '40'), '41'), VarDeclUndef(Var('element20', '42'), '43'), VarDeclUndef(Var('element11', '44'), '45'), VarDeclUndef(Var('element21', '46'), '47'), VarDeclUndef(Var('element12', '48'), '49'), VarDeclUndef(Var('element22', '50'), '51'), VarDeclUndef(Var('element13', '52'), '53'), VarDeclUndef(Var('element23', '54'), '55')], ('integer', Number(64)), '56'), Update(Var('element10', '168'), Call('UInt', [ElemSlice(Var('operand1', '171'), BinaryExpr('*', Number(4), Var('e', '172'), '173'), Number(8), '177')], '178')), Update(Var('element20', '179'), Call('UInt', [ElemSlice(Var('operand2', '182'), BinaryExpr('*', Number(4), Var('e', '183'), '184'), Number(8), '188')], '189')), Update(Var('res0', '190'), BinaryExpr('*', Var('element10', '191'), Var('element20', '192'), '193')), Update(Var('element11', '194'), Call('UInt', [ElemSlice(Var('operand1', '197'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '198'), '199'), Number(1), '200'), Number(8), '203')], '204')), Update(Var('element21', '205'), Call('UInt', [ElemSlice(Var('operand2', '208'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '209'), '210'), Number(1), '211'), Number(8), '214')], '215')), Update(Var('res1', '216'), BinaryExpr('*', Var('element11', '217'), Var('element21', '218'), '219')), Update(Var('element12', '220'), Call('UInt', [ElemSlice(Var('operand1', '223'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '224'), '225'), Number(2), '226'), Number(8), '229')], '230')), Update(Var('element22', '231'), Call('UInt', [ElemSlice(Var('operand2', '234'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '235'), '236'), Number(2), '237'), Number(8), '240')], '241')), Update(Var('res2', '242'), BinaryExpr('*', Var('element12', '243'), Var('element22', '244'), '245')), Update(Var('element13', '246'), Call('UInt', [ElemSlice(Var('operand1', '249'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '250'), '251'), Number(3), '252'), Number(8), '255')], '256')), Update(Var('element23', '257'), Call('UInt', [ElemSlice(Var('operand2', '260'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '261'), '262'), Number(3), '263'), Number(8), '266')], '267')), Update(Var('res3', '268'), BinaryExpr('*', Var('element13', '269'), Var('element23', '270'), '271')), Update(Var('zero', '272'), ElemSlice(Var('result', '274'), Var('e', '275'), Number(32), '277')), Update(ElemSlice(Var('result2', '280'), Var('e', '281'), Number(32), '283'), BinaryExpr('+', BinaryExpr('+', BinaryExpr('+', BinaryExpr('+', Var('zero', '284'), Var('res0', '285'), '286'), Var('res1', '287'), '288'), Var('res2', '289'), '290'), Var('res3', '291'), '292'))], 1, '294'), Update(VReg(Var('d', '296'), '297'), Var('result2', '298'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='UDOT Vd.2S,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'signed': False, 'esize': 32, 'datasize': 64, 'elements': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_dotp'),
    'vdotq_s32': ARMSema(intrin='vdotq_s32', inst='SDOT', params=[Parameter(name='r', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(128)), '22'), Update(Var('result', '23'), VReg(Var('d', '25'), '26')), For(Var('e', '293'), Number(0), Number(3), [VarsDecl([VarDeclUndef(Var('zero', '29'), '30'), VarDeclUndef(Var('res0', '31'), '32'), VarDeclUndef(Var('res1', '33'), '34'), VarDeclUndef(Var('res2', '35'), '36'), VarDeclUndef(Var('res3', '37'), '38')], ('integer', Number(64)), '39'), VarsDecl([VarDeclUndef(Var('element10', '40'), '41'), VarDeclUndef(Var('element20', '42'), '43'), VarDeclUndef(Var('element11', '44'), '45'), VarDeclUndef(Var('element21', '46'), '47'), VarDeclUndef(Var('element12', '48'), '49'), VarDeclUndef(Var('element22', '50'), '51'), VarDeclUndef(Var('element13', '52'), '53'), VarDeclUndef(Var('element23', '54'), '55')], ('integer', Number(64)), '56'), Update(Var('element10', '58'), Call('SInt', [ElemSlice(Var('operand1', '61'), BinaryExpr('*', Number(4), Var('e', '62'), '63'), Number(8), '67')], '68')), Update(Var('element20', '69'), Call('SInt', [ElemSlice(Var('operand2', '72'), BinaryExpr('*', Number(4), Var('e', '73'), '74'), Number(8), '78')], '79')), Update(Var('res0', '80'), BinaryExpr('*', Var('element10', '81'), Var('element20', '82'), '83')), Update(Var('element11', '84'), Call('SInt', [ElemSlice(Var('operand1', '87'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '88'), '89'), Number(1), '90'), Number(8), '93')], '94')), Update(Var('element21', '95'), Call('SInt', [ElemSlice(Var('operand2', '98'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '99'), '100'), Number(1), '101'), Number(8), '104')], '105')), Update(Var('res1', '106'), BinaryExpr('*', Var('element11', '107'), Var('element21', '108'), '109')), Update(Var('element12', '110'), Call('SInt', [ElemSlice(Var('operand1', '113'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '114'), '115'), Number(2), '116'), Number(8), '119')], '120')), Update(Var('element22', '121'), Call('SInt', [ElemSlice(Var('operand2', '124'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '125'), '126'), Number(2), '127'), Number(8), '130')], '131')), Update(Var('res2', '132'), BinaryExpr('*', Var('element12', '133'), Var('element22', '134'), '135')), Update(Var('element13', '136'), Call('SInt', [ElemSlice(Var('operand1', '139'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '140'), '141'), Number(3), '142'), Number(8), '145')], '146')), Update(Var('element23', '147'), Call('SInt', [ElemSlice(Var('operand2', '150'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '151'), '152'), Number(3), '153'), Number(8), '156')], '157')), Update(Var('res3', '158'), BinaryExpr('*', Var('element13', '159'), Var('element23', '160'), '161')), Update(Var('zero', '162'), ElemSlice(Var('result', '164'), Var('e', '165'), Number(32), '167')), Update(ElemSlice(Var('result2', '280'), Var('e', '281'), Number(32), '283'), BinaryExpr('+', BinaryExpr('+', BinaryExpr('+', BinaryExpr('+', Var('zero', '284'), Var('res0', '285'), '286'), Var('res1', '287'), '288'), Var('res2', '289'), '290'), Var('res3', '291'), '292'))], 1, '294'), Update(VReg(Var('d', '296'), '297'), Var('result2', '298'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SDOT Vd.4S,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'signed': True, 'esize': 32, 'datasize': 128, 'elements': 4}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_dotp'),
    'vdotq_u32': ARMSema(intrin='vdotq_u32', inst='UDOT', params=[Parameter(name='r', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('result2', '20'), '21')], ('bits', Number(128)), '22'), Update(Var('result', '23'), VReg(Var('d', '25'), '26')), For(Var('e', '293'), Number(0), Number(3), [VarsDecl([VarDeclUndef(Var('zero', '29'), '30'), VarDeclUndef(Var('res0', '31'), '32'), VarDeclUndef(Var('res1', '33'), '34'), VarDeclUndef(Var('res2', '35'), '36'), VarDeclUndef(Var('res3', '37'), '38')], ('integer', Number(64)), '39'), VarsDecl([VarDeclUndef(Var('element10', '40'), '41'), VarDeclUndef(Var('element20', '42'), '43'), VarDeclUndef(Var('element11', '44'), '45'), VarDeclUndef(Var('element21', '46'), '47'), VarDeclUndef(Var('element12', '48'), '49'), VarDeclUndef(Var('element22', '50'), '51'), VarDeclUndef(Var('element13', '52'), '53'), VarDeclUndef(Var('element23', '54'), '55')], ('integer', Number(64)), '56'), Update(Var('element10', '168'), Call('UInt', [ElemSlice(Var('operand1', '171'), BinaryExpr('*', Number(4), Var('e', '172'), '173'), Number(8), '177')], '178')), Update(Var('element20', '179'), Call('UInt', [ElemSlice(Var('operand2', '182'), BinaryExpr('*', Number(4), Var('e', '183'), '184'), Number(8), '188')], '189')), Update(Var('res0', '190'), BinaryExpr('*', Var('element10', '191'), Var('element20', '192'), '193')), Update(Var('element11', '194'), Call('UInt', [ElemSlice(Var('operand1', '197'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '198'), '199'), Number(1), '200'), Number(8), '203')], '204')), Update(Var('element21', '205'), Call('UInt', [ElemSlice(Var('operand2', '208'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '209'), '210'), Number(1), '211'), Number(8), '214')], '215')), Update(Var('res1', '216'), BinaryExpr('*', Var('element11', '217'), Var('element21', '218'), '219')), Update(Var('element12', '220'), Call('UInt', [ElemSlice(Var('operand1', '223'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '224'), '225'), Number(2), '226'), Number(8), '229')], '230')), Update(Var('element22', '231'), Call('UInt', [ElemSlice(Var('operand2', '234'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '235'), '236'), Number(2), '237'), Number(8), '240')], '241')), Update(Var('res2', '242'), BinaryExpr('*', Var('element12', '243'), Var('element22', '244'), '245')), Update(Var('element13', '246'), Call('UInt', [ElemSlice(Var('operand1', '249'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '250'), '251'), Number(3), '252'), Number(8), '255')], '256')), Update(Var('element23', '257'), Call('UInt', [ElemSlice(Var('operand2', '260'), BinaryExpr('+', BinaryExpr('*', Number(4), Var('e', '261'), '262'), Number(3), '263'), Number(8), '266')], '267')), Update(Var('res3', '268'), BinaryExpr('*', Var('element13', '269'), Var('element23', '270'), '271')), Update(Var('zero', '272'), ElemSlice(Var('result', '274'), Var('e', '275'), Number(32), '277')), Update(ElemSlice(Var('result2', '280'), Var('e', '281'), Number(32), '283'), BinaryExpr('+', BinaryExpr('+', BinaryExpr('+', BinaryExpr('+', Var('zero', '284'), Var('res0', '285'), '286'), Var('res1', '287'), '288'), Var('res2', '289'), '290'), Var('res3', '291'), '292'))], 1, '294'), Update(VReg(Var('d', '296'), '297'), Var('result2', '298'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UDOT Vd.4S,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'signed': False, 'esize': 32, 'datasize': 128, 'elements': 4}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_dotp'),
    'vdup_n_s16': ARMSema(intrin='vdup_n_s16', inst='DUP', params=[Parameter(name='value', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), For(Var('e', '20'), Number(0), Number(3), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(16), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='int16x4_t', ret_is_signed=True, inst_form='DUP Vd.4H,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 1, 'esize': 16, 'datasize': 64, 'elements': 4}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vdup_n_s32': ARMSema(intrin='vdup_n_s32', inst='DUP', params=[Parameter(name='value', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), For(Var('e', '20'), Number(0), Number(1), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(32), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='int32x2_t', ret_is_signed=True, inst_form='DUP Vd.2S,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 2, 'esize': 32, 'datasize': 64, 'elements': 2}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vdup_n_s8': ARMSema(intrin='vdup_n_s8', inst='DUP', params=[Parameter(name='value', type='int8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), For(Var('e', '20'), Number(0), Number(7), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(8), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='int8x8_t', ret_is_signed=True, inst_form='DUP Vd.8B,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 0, 'esize': 8, 'datasize': 64, 'elements': 8}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vdup_n_u16': ARMSema(intrin='vdup_n_u16', inst='DUP', params=[Parameter(name='value', type='uint16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), For(Var('e', '20'), Number(0), Number(3), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(16), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='DUP Vd.4H,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 1, 'esize': 16, 'datasize': 64, 'elements': 4}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vdup_n_u32': ARMSema(intrin='vdup_n_u32', inst='DUP', params=[Parameter(name='value', type='uint32_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), For(Var('e', '20'), Number(0), Number(1), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(32), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='DUP Vd.2S,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 2, 'esize': 32, 'datasize': 64, 'elements': 2}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vdup_n_u8': ARMSema(intrin='vdup_n_u8', inst='DUP', params=[Parameter(name='value', type='uint8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), For(Var('e', '20'), Number(0), Number(7), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(8), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='DUP Vd.8B,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 0, 'esize': 8, 'datasize': 64, 'elements': 8}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vdupq_n_s16': ARMSema(intrin='vdupq_n_s16', inst='DUP', params=[Parameter(name='value', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), For(Var('e', '20'), Number(0), Number(7), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(16), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='int16x8_t', ret_is_signed=True, inst_form='DUP Vd.8H,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 1, 'esize': 16, 'datasize': 128, 'elements': 8}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vdupq_n_s32': ARMSema(intrin='vdupq_n_s32', inst='DUP', params=[Parameter(name='value', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), For(Var('e', '20'), Number(0), Number(3), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(32), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='int32x4_t', ret_is_signed=True, inst_form='DUP Vd.4S,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 2, 'esize': 32, 'datasize': 128, 'elements': 4}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vdupq_n_s64': ARMSema(intrin='vdupq_n_s64', inst='DUP', params=[Parameter(name='value', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), For(Var('e', '20'), Number(0), Number(1), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(64), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='int64x2_t', ret_is_signed=True, inst_form='DUP Vd.2D,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 3, 'esize': 64, 'datasize': 128, 'elements': 2}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vdupq_n_s8': ARMSema(intrin='vdupq_n_s8', inst='DUP', params=[Parameter(name='value', type='int8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), For(Var('e', '20'), Number(0), Number(15), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(8), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='int8x16_t', ret_is_signed=True, inst_form='DUP Vd.16B,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 0, 'esize': 8, 'datasize': 128, 'elements': 16}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vdupq_n_u16': ARMSema(intrin='vdupq_n_u16', inst='DUP', params=[Parameter(name='value', type='uint16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), For(Var('e', '20'), Number(0), Number(7), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(16), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='DUP Vd.8H,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 1, 'esize': 16, 'datasize': 128, 'elements': 8}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vdupq_n_u32': ARMSema(intrin='vdupq_n_u32', inst='DUP', params=[Parameter(name='value', type='uint32_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), For(Var('e', '20'), Number(0), Number(3), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(32), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='DUP Vd.4S,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 2, 'esize': 32, 'datasize': 128, 'elements': 4}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vdupq_n_u64': ARMSema(intrin='vdupq_n_u64', inst='DUP', params=[Parameter(name='value', type='uint64_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), For(Var('e', '20'), Number(0), Number(1), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(64), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='DUP Vd.2D,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 3, 'esize': 64, 'datasize': 128, 'elements': 2}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vdupq_n_u8': ARMSema(intrin='vdupq_n_u8', inst='DUP', params=[Parameter(name='value', type='uint8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), For(Var('e', '20'), Number(0), Number(15), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(8), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='DUP Vd.16B,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 0, 'esize': 8, 'datasize': 128, 'elements': 16}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'veor_s16': ARMSema(intrin='veor_s16', inst='EOR', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(64)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(64)), '19'), Update(Var('operand1', '21'), VReg(Var('m', '23'), '24')), Update(Var('operand2', '25'), Call('Zeros', [], '27')), Update(Var('operand3', '28'), Call('Ones', [], '30')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='int16x4_t', ret_is_signed=True, inst_form='EOR Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'op': 3}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'veor_s32': ARMSema(intrin='veor_s32', inst='EOR', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(64)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(64)), '19'), Update(Var('operand1', '21'), VReg(Var('m', '23'), '24')), Update(Var('operand2', '25'), Call('Zeros', [], '27')), Update(Var('operand3', '28'), Call('Ones', [], '30')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='int32x2_t', ret_is_signed=True, inst_form='EOR Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'op': 3}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'veor_s64': ARMSema(intrin='veor_s64', inst='EOR', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(64)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(64)), '19'), Update(Var('operand1', '21'), VReg(Var('m', '23'), '24')), Update(Var('operand2', '25'), Call('Zeros', [], '27')), Update(Var('operand3', '28'), Call('Ones', [], '30')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='int64x1_t', ret_is_signed=True, inst_form='EOR Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'op': 3}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'veor_s8': ARMSema(intrin='veor_s8', inst='EOR', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(64)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(64)), '19'), Update(Var('operand1', '21'), VReg(Var('m', '23'), '24')), Update(Var('operand2', '25'), Call('Zeros', [], '27')), Update(Var('operand3', '28'), Call('Ones', [], '30')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='int8x8_t', ret_is_signed=True, inst_form='EOR Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'op': 3}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'veor_u16': ARMSema(intrin='veor_u16', inst='EOR', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(64)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(64)), '19'), Update(Var('operand1', '21'), VReg(Var('m', '23'), '24')), Update(Var('operand2', '25'), Call('Zeros', [], '27')), Update(Var('operand3', '28'), Call('Ones', [], '30')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='EOR Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'op': 3}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'veor_u32': ARMSema(intrin='veor_u32', inst='EOR', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(64)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(64)), '19'), Update(Var('operand1', '21'), VReg(Var('m', '23'), '24')), Update(Var('operand2', '25'), Call('Zeros', [], '27')), Update(Var('operand3', '28'), Call('Ones', [], '30')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='EOR Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'op': 3}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'veor_u64': ARMSema(intrin='veor_u64', inst='EOR', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(64)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(64)), '19'), Update(Var('operand1', '21'), VReg(Var('m', '23'), '24')), Update(Var('operand2', '25'), Call('Zeros', [], '27')), Update(Var('operand3', '28'), Call('Ones', [], '30')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='EOR Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'op': 3}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'veor_u8': ARMSema(intrin='veor_u8', inst='EOR', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(64)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(64)), '19'), Update(Var('operand1', '21'), VReg(Var('m', '23'), '24')), Update(Var('operand2', '25'), Call('Zeros', [], '27')), Update(Var('operand3', '28'), Call('Ones', [], '30')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='EOR Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'op': 3}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'veorq_s16': ARMSema(intrin='veorq_s16', inst='EOR', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(128)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(128)), '19'), Update(Var('operand1', '21'), VReg(Var('m', '23'), '24')), Update(Var('operand2', '25'), Call('Zeros', [], '27')), Update(Var('operand3', '28'), Call('Ones', [], '30')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='int16x8_t', ret_is_signed=True, inst_form='EOR Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'op': 3}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'veorq_s32': ARMSema(intrin='veorq_s32', inst='EOR', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(128)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(128)), '19'), Update(Var('operand1', '21'), VReg(Var('m', '23'), '24')), Update(Var('operand2', '25'), Call('Zeros', [], '27')), Update(Var('operand3', '28'), Call('Ones', [], '30')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='int32x4_t', ret_is_signed=True, inst_form='EOR Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'op': 3}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'veorq_s64': ARMSema(intrin='veorq_s64', inst='EOR', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(128)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(128)), '19'), Update(Var('operand1', '21'), VReg(Var('m', '23'), '24')), Update(Var('operand2', '25'), Call('Zeros', [], '27')), Update(Var('operand3', '28'), Call('Ones', [], '30')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='int64x2_t', ret_is_signed=True, inst_form='EOR Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'op': 3}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'veorq_s8': ARMSema(intrin='veorq_s8', inst='EOR', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(128)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(128)), '19'), Update(Var('operand1', '21'), VReg(Var('m', '23'), '24')), Update(Var('operand2', '25'), Call('Zeros', [], '27')), Update(Var('operand3', '28'), Call('Ones', [], '30')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='int8x16_t', ret_is_signed=True, inst_form='EOR Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'op': 3}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'veorq_u16': ARMSema(intrin='veorq_u16', inst='EOR', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(128)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(128)), '19'), Update(Var('operand1', '21'), VReg(Var('m', '23'), '24')), Update(Var('operand2', '25'), Call('Zeros', [], '27')), Update(Var('operand3', '28'), Call('Ones', [], '30')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='EOR Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'op': 3}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'veorq_u32': ARMSema(intrin='veorq_u32', inst='EOR', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(128)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(128)), '19'), Update(Var('operand1', '21'), VReg(Var('m', '23'), '24')), Update(Var('operand2', '25'), Call('Zeros', [], '27')), Update(Var('operand3', '28'), Call('Ones', [], '30')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='EOR Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'op': 3}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'veorq_u64': ARMSema(intrin='veorq_u64', inst='EOR', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(128)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(128)), '19'), Update(Var('operand1', '21'), VReg(Var('m', '23'), '24')), Update(Var('operand2', '25'), Call('Zeros', [], '27')), Update(Var('operand3', '28'), Call('Ones', [], '30')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='EOR Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'op': 3}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'veorq_u8': ARMSema(intrin='veorq_u8', inst='EOR', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('operand1', '2'), '3')], ('bits', Number(128)), '4'), VarsDecl([VarDeclUndef(Var('operand2', '6'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('operand3', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclInit(Var('operand4', '17'), VReg(Var('n', '15'), '16'), '18')], ('bits', Number(128)), '19'), Update(Var('operand1', '21'), VReg(Var('m', '23'), '24')), Update(Var('operand2', '25'), Call('Zeros', [], '27')), Update(Var('operand3', '28'), Call('Ones', [], '30')), Update(VReg(Var('d', '69'), '70'), BinaryExpr('EOR', Var('operand1', '71'), BinaryExpr('AND', BinaryExpr('EOR', Var('operand2', '72'), Var('operand4', '73'), '74'), Var('operand3', '75'), '76'), '77'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='EOR Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'op': 3}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor'),
    'vget_high_s16': ARMSema(intrin='vget_high_s16', inst='DUP', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), Update(VReg(Var('d', '11'), '12'), ArrayIndex(Var('operand', '13'), [SliceRange(Number(127), Number(64), '18')], '19'))], rettype='int16x4_t', ret_is_signed=True, inst_form='DUP Vd.1D,Vn.D[1]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'part': 1, 'datasize': 64}, belongs_to='get_handcrafted'),
    'vget_high_s32': ARMSema(intrin='vget_high_s32', inst='DUP', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), Update(VReg(Var('d', '11'), '12'), ArrayIndex(Var('operand', '13'), [SliceRange(Number(127), Number(64), '18')], '19'))], rettype='int32x2_t', ret_is_signed=True, inst_form='DUP Vd.1D,Vn.D[1]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'part': 1, 'datasize': 64}, belongs_to='get_handcrafted'),
    'vget_high_s64': ARMSema(intrin='vget_high_s64', inst='DUP', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), Update(VReg(Var('d', '11'), '12'), ArrayIndex(Var('operand', '13'), [SliceRange(Number(127), Number(64), '18')], '19'))], rettype='int64x1_t', ret_is_signed=True, inst_form='DUP Vd.1D,Vn.D[1]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'part': 1, 'datasize': 64}, belongs_to='get_handcrafted'),
    'vget_high_s8': ARMSema(intrin='vget_high_s8', inst='DUP', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), Update(VReg(Var('d', '11'), '12'), ArrayIndex(Var('operand', '13'), [SliceRange(Number(127), Number(64), '18')], '19'))], rettype='int8x8_t', ret_is_signed=True, inst_form='DUP Vd.1D,Vn.D[1]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'part': 1, 'datasize': 64}, belongs_to='get_handcrafted'),
    'vget_high_u16': ARMSema(intrin='vget_high_u16', inst='DUP', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), Update(VReg(Var('d', '11'), '12'), ArrayIndex(Var('operand', '13'), [SliceRange(Number(127), Number(64), '18')], '19'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='DUP Vd.1D,Vn.D[1]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'part': 1, 'datasize': 64}, belongs_to='get_handcrafted'),
    'vget_high_u32': ARMSema(intrin='vget_high_u32', inst='DUP', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), Update(VReg(Var('d', '11'), '12'), ArrayIndex(Var('operand', '13'), [SliceRange(Number(127), Number(64), '18')], '19'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='DUP Vd.1D,Vn.D[1]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'part': 1, 'datasize': 64}, belongs_to='get_handcrafted'),
    'vget_high_u64': ARMSema(intrin='vget_high_u64', inst='DUP', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), Update(VReg(Var('d', '11'), '12'), ArrayIndex(Var('operand', '13'), [SliceRange(Number(127), Number(64), '18')], '19'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='DUP Vd.1D,Vn.D[1]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'part': 1, 'datasize': 64}, belongs_to='get_handcrafted'),
    'vget_high_u8': ARMSema(intrin='vget_high_u8', inst='DUP', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), Update(VReg(Var('d', '11'), '12'), ArrayIndex(Var('operand', '13'), [SliceRange(Number(127), Number(64), '18')], '19'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='DUP Vd.1D,Vn.D[1]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'part': 1, 'datasize': 64}, belongs_to='get_handcrafted'),
    'vget_low_s16': ARMSema(intrin='vget_low_s16', inst='DUP', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), Update(VReg(Var('d', '21'), '22'), ArrayIndex(Var('operand', '23'), [SliceRange(Number(63), Number(0), '26')], '27'))], rettype='int16x4_t', ret_is_signed=True, inst_form='DUP Vd.1D,Vn.D[1]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'part': 0, 'datasize': 64}, belongs_to='get_handcrafted'),
    'vget_low_s32': ARMSema(intrin='vget_low_s32', inst='DUP', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), Update(VReg(Var('d', '21'), '22'), ArrayIndex(Var('operand', '23'), [SliceRange(Number(63), Number(0), '26')], '27'))], rettype='int32x2_t', ret_is_signed=True, inst_form='DUP Vd.1D,Vn.D[1]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'part': 0, 'datasize': 64}, belongs_to='get_handcrafted'),
    'vget_low_s64': ARMSema(intrin='vget_low_s64', inst='DUP', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), Update(VReg(Var('d', '21'), '22'), ArrayIndex(Var('operand', '23'), [SliceRange(Number(63), Number(0), '26')], '27'))], rettype='int64x1_t', ret_is_signed=True, inst_form='DUP Vd.1D,Vn.D[1]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'part': 0, 'datasize': 64}, belongs_to='get_handcrafted'),
    'vget_low_s8': ARMSema(intrin='vget_low_s8', inst='DUP', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), Update(VReg(Var('d', '21'), '22'), ArrayIndex(Var('operand', '23'), [SliceRange(Number(63), Number(0), '26')], '27'))], rettype='int8x8_t', ret_is_signed=True, inst_form='DUP Vd.1D,Vn.D[1]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'part': 0, 'datasize': 64}, belongs_to='get_handcrafted'),
    'vget_low_u16': ARMSema(intrin='vget_low_u16', inst='DUP', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), Update(VReg(Var('d', '21'), '22'), ArrayIndex(Var('operand', '23'), [SliceRange(Number(63), Number(0), '26')], '27'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='DUP Vd.1D,Vn.D[1]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'part': 0, 'datasize': 64}, belongs_to='get_handcrafted'),
    'vget_low_u32': ARMSema(intrin='vget_low_u32', inst='DUP', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), Update(VReg(Var('d', '21'), '22'), ArrayIndex(Var('operand', '23'), [SliceRange(Number(63), Number(0), '26')], '27'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='DUP Vd.1D,Vn.D[1]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'part': 0, 'datasize': 64}, belongs_to='get_handcrafted'),
    'vget_low_u64': ARMSema(intrin='vget_low_u64', inst='DUP', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), Update(VReg(Var('d', '21'), '22'), ArrayIndex(Var('operand', '23'), [SliceRange(Number(63), Number(0), '26')], '27'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='DUP Vd.1D,Vn.D[1]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'part': 0, 'datasize': 64}, belongs_to='get_handcrafted'),
    'vget_low_u8': ARMSema(intrin='vget_low_u8', inst='DUP', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), Update(VReg(Var('d', '21'), '22'), ArrayIndex(Var('operand', '23'), [SliceRange(Number(63), Number(0), '26')], '27'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='DUP Vd.1D,Vn.D[1]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'part': 0, 'datasize': 64}, belongs_to='get_handcrafted'),
    'vhadd_s16': ARMSema(intrin='vhadd_s16', inst='SHADD', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(0)], '47')), Update(Var('sum', '48'), BinaryExpr('+', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(16), '56'), ArrayIndex(Var('sum', '57'), [SliceRange(Number(16), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SHADD Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_truncating'),
    'vhadd_s32': ARMSema(intrin='vhadd_s32', inst='SHADD', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(0)], '47')), Update(Var('sum', '48'), BinaryExpr('+', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(32), '56'), ArrayIndex(Var('sum', '57'), [SliceRange(Number(32), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SHADD Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_truncating'),
    'vhadd_s8': ARMSema(intrin='vhadd_s8', inst='SHADD', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(0)], '47')), Update(Var('sum', '48'), BinaryExpr('+', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(8), '56'), ArrayIndex(Var('sum', '57'), [SliceRange(Number(8), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SHADD Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_truncating'),
    'vhadd_u16': ARMSema(intrin='vhadd_u16', inst='UHADD', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(1)], '47')), Update(Var('sum', '48'), BinaryExpr('+', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(16), '56'), ArrayIndex(Var('sum', '57'), [SliceRange(Number(16), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='UHADD Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_truncating'),
    'vhadd_u32': ARMSema(intrin='vhadd_u32', inst='UHADD', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(1)], '47')), Update(Var('sum', '48'), BinaryExpr('+', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(32), '56'), ArrayIndex(Var('sum', '57'), [SliceRange(Number(32), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='UHADD Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_truncating'),
    'vhadd_u8': ARMSema(intrin='vhadd_u8', inst='UHADD', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(1)], '47')), Update(Var('sum', '48'), BinaryExpr('+', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(8), '56'), ArrayIndex(Var('sum', '57'), [SliceRange(Number(8), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='UHADD Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_truncating'),
    'vhaddq_s16': ARMSema(intrin='vhaddq_s16', inst='SHADD', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(0)], '47')), Update(Var('sum', '48'), BinaryExpr('+', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(16), '56'), ArrayIndex(Var('sum', '57'), [SliceRange(Number(16), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SHADD Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_truncating'),
    'vhaddq_s32': ARMSema(intrin='vhaddq_s32', inst='SHADD', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(0)], '47')), Update(Var('sum', '48'), BinaryExpr('+', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(32), '56'), ArrayIndex(Var('sum', '57'), [SliceRange(Number(32), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SHADD Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_truncating'),
    'vhaddq_s8': ARMSema(intrin='vhaddq_s8', inst='SHADD', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(15), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(0)], '47')), Update(Var('sum', '48'), BinaryExpr('+', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(8), '56'), ArrayIndex(Var('sum', '57'), [SliceRange(Number(8), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SHADD Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_truncating'),
    'vhaddq_u16': ARMSema(intrin='vhaddq_u16', inst='UHADD', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(1)], '47')), Update(Var('sum', '48'), BinaryExpr('+', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(16), '56'), ArrayIndex(Var('sum', '57'), [SliceRange(Number(16), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UHADD Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_truncating'),
    'vhaddq_u32': ARMSema(intrin='vhaddq_u32', inst='UHADD', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(1)], '47')), Update(Var('sum', '48'), BinaryExpr('+', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(32), '56'), ArrayIndex(Var('sum', '57'), [SliceRange(Number(32), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UHADD Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_truncating'),
    'vhaddq_u8': ARMSema(intrin='vhaddq_u8', inst='UHADD', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(15), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(1)], '47')), Update(Var('sum', '48'), BinaryExpr('+', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(8), '56'), ArrayIndex(Var('sum', '57'), [SliceRange(Number(8), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='UHADD Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_truncating'),
    'vhsub_s16': ARMSema(intrin='vhsub_s16', inst='SHSUB', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(0)], '47')), Update(Var('diff', '48'), BinaryExpr('-', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(16), '56'), ArrayIndex(Var('diff', '57'), [SliceRange(Number(16), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SHSUB Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_int'),
    'vhsub_s32': ARMSema(intrin='vhsub_s32', inst='SHSUB', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(0)], '47')), Update(Var('diff', '48'), BinaryExpr('-', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(32), '56'), ArrayIndex(Var('diff', '57'), [SliceRange(Number(32), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SHSUB Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_int'),
    'vhsub_s8': ARMSema(intrin='vhsub_s8', inst='SHSUB', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(0)], '47')), Update(Var('diff', '48'), BinaryExpr('-', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(8), '56'), ArrayIndex(Var('diff', '57'), [SliceRange(Number(8), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SHSUB Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_int'),
    'vhsub_u16': ARMSema(intrin='vhsub_u16', inst='UHSUB', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(1)], '47')), Update(Var('diff', '48'), BinaryExpr('-', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(16), '56'), ArrayIndex(Var('diff', '57'), [SliceRange(Number(16), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='UHSUB Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_int'),
    'vhsub_u32': ARMSema(intrin='vhsub_u32', inst='UHSUB', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(1)], '47')), Update(Var('diff', '48'), BinaryExpr('-', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(32), '56'), ArrayIndex(Var('diff', '57'), [SliceRange(Number(32), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='UHSUB Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_int'),
    'vhsub_u8': ARMSema(intrin='vhsub_u8', inst='UHSUB', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(1)], '47')), Update(Var('diff', '48'), BinaryExpr('-', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(8), '56'), ArrayIndex(Var('diff', '57'), [SliceRange(Number(8), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='UHSUB Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_int'),
    'vhsubq_s16': ARMSema(intrin='vhsubq_s16', inst='SHSUB', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(0)], '47')), Update(Var('diff', '48'), BinaryExpr('-', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(16), '56'), ArrayIndex(Var('diff', '57'), [SliceRange(Number(16), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SHSUB Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_int'),
    'vhsubq_s32': ARMSema(intrin='vhsubq_s32', inst='SHSUB', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(0)], '47')), Update(Var('diff', '48'), BinaryExpr('-', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(32), '56'), ArrayIndex(Var('diff', '57'), [SliceRange(Number(32), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SHSUB Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_int'),
    'vhsubq_s8': ARMSema(intrin='vhsubq_s8', inst='SHSUB', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(15), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(0)], '47')), Update(Var('diff', '48'), BinaryExpr('-', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(8), '56'), ArrayIndex(Var('diff', '57'), [SliceRange(Number(8), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SHSUB Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_int'),
    'vhsubq_u16': ARMSema(intrin='vhsubq_u16', inst='UHSUB', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(1)], '47')), Update(Var('diff', '48'), BinaryExpr('-', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(16), '56'), ArrayIndex(Var('diff', '57'), [SliceRange(Number(16), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UHSUB Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_int'),
    'vhsubq_u32': ARMSema(intrin='vhsubq_u32', inst='UHSUB', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(1)], '47')), Update(Var('diff', '48'), BinaryExpr('-', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(32), '56'), ArrayIndex(Var('diff', '57'), [SliceRange(Number(32), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UHSUB Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_int'),
    'vhsubq_u8': ARMSema(intrin='vhsubq_u8', inst='UHSUB', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '61'), Number(0), Number(15), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(1)], '47')), Update(Var('diff', '48'), BinaryExpr('-', Var('element1', '49'), Var('element2', '50'), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(8), '56'), ArrayIndex(Var('diff', '57'), [SliceRange(Number(8), Number(1), '59')], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='UHSUB Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_int'),
    'vld1_dup_s16': ARMSema(intrin='vld1_dup_s16', inst='LD1R', params=[Parameter(name='ptr', type='int16_t const *', is_signed=True, is_imm=False, is_mask=False)], spec=[IfStmt(Call('HaveMTEExt', [], '2'), [], '3'), VarsDecl([VarDeclUndef(Var('address', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('offs', '7'), '8')], ('bits', Number(64)), '9'), VarsDecl([VarDeclUndef(Var('rval', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('bits', Number(16)), '16'), VarsDecl([VarDeclInit(Var('ebytes', '19'), Number(2), '20')], ('integer', Number(64)), '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('s', '63'), Number(0), Number(0), [Update(Var('element', '38'), ArrayIndex(Var('Mem', '39'), [BinaryExpr('+', Var('address', '40'), Var('offs', '41'), '42'), Var('ebytes', '43'), Var('AccType_VEC', '44')], '45')), Update(VReg(Var('t', '47'), '48'), Call('Replicate', [Var('element', '50'), Number(4)], '54')), Update(Var('offs', '55'), BinaryExpr('+', Var('offs', '56'), Var('ebytes', '57'), '58')), Update(Var('t', '59'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '60'), Number(1), '61'), Number(32), '62'))], 1, '64')], rettype='int16x4_t', ret_is_signed=True, inst_form='LD1R {Vt.4H},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'scale': 1, 'selem': 1, 'replicate': True, 'memop': 0, 'datasize': 64, 'esize': 16}, belongs_to='aarch64_memory_vector_single_no_wb'),
    'vld1_dup_s32': ARMSema(intrin='vld1_dup_s32', inst='LD1R', params=[Parameter(name='ptr', type='int32_t const *', is_signed=True, is_imm=False, is_mask=False)], spec=[IfStmt(Call('HaveMTEExt', [], '2'), [], '3'), VarsDecl([VarDeclUndef(Var('address', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('offs', '7'), '8')], ('bits', Number(64)), '9'), VarsDecl([VarDeclUndef(Var('rval', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('bits', Number(32)), '16'), VarsDecl([VarDeclInit(Var('ebytes', '19'), Number(4), '20')], ('integer', Number(64)), '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('s', '63'), Number(0), Number(0), [Update(Var('element', '38'), ArrayIndex(Var('Mem', '39'), [BinaryExpr('+', Var('address', '40'), Var('offs', '41'), '42'), Var('ebytes', '43'), Var('AccType_VEC', '44')], '45')), Update(VReg(Var('t', '47'), '48'), Call('Replicate', [Var('element', '50'), Number(2)], '54')), Update(Var('offs', '55'), BinaryExpr('+', Var('offs', '56'), Var('ebytes', '57'), '58')), Update(Var('t', '59'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '60'), Number(1), '61'), Number(32), '62'))], 1, '64')], rettype='int32x2_t', ret_is_signed=True, inst_form='LD1R {Vt.2S},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'scale': 2, 'selem': 1, 'replicate': True, 'memop': 0, 'datasize': 64, 'esize': 32}, belongs_to='aarch64_memory_vector_single_no_wb'),
    'vld1_dup_s64': ARMSema(intrin='vld1_dup_s64', inst='LD1', params=[Parameter(name='ptr', type='int64_t const *', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(64)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(8), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(0), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(0), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(64), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(64), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='int64x1_t', ret_is_signed=True, inst_form='LD1 {Vt.1D},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 0, 'datasize': 64, 'esize': 64, 'elements': 1, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vld1_dup_s8': ARMSema(intrin='vld1_dup_s8', inst='LD1R', params=[Parameter(name='ptr', type='int8_t const *', is_signed=True, is_imm=False, is_mask=False)], spec=[IfStmt(Call('HaveMTEExt', [], '2'), [], '3'), VarsDecl([VarDeclUndef(Var('address', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('offs', '7'), '8')], ('bits', Number(64)), '9'), VarsDecl([VarDeclUndef(Var('rval', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('bits', Number(8)), '16'), VarsDecl([VarDeclInit(Var('ebytes', '19'), Number(1), '20')], ('integer', Number(64)), '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('s', '63'), Number(0), Number(0), [Update(Var('element', '38'), ArrayIndex(Var('Mem', '39'), [BinaryExpr('+', Var('address', '40'), Var('offs', '41'), '42'), Var('ebytes', '43'), Var('AccType_VEC', '44')], '45')), Update(VReg(Var('t', '47'), '48'), Call('Replicate', [Var('element', '50'), Number(8)], '54')), Update(Var('offs', '55'), BinaryExpr('+', Var('offs', '56'), Var('ebytes', '57'), '58')), Update(Var('t', '59'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '60'), Number(1), '61'), Number(32), '62'))], 1, '64')], rettype='int8x8_t', ret_is_signed=True, inst_form='LD1R {Vt.8B},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'scale': 0, 'selem': 1, 'replicate': True, 'memop': 0, 'datasize': 64, 'esize': 8}, belongs_to='aarch64_memory_vector_single_no_wb'),
    'vld1_dup_u16': ARMSema(intrin='vld1_dup_u16', inst='LD1R', params=[Parameter(name='ptr', type='uint16_t const *', is_signed=False, is_imm=False, is_mask=False)], spec=[IfStmt(Call('HaveMTEExt', [], '2'), [], '3'), VarsDecl([VarDeclUndef(Var('address', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('offs', '7'), '8')], ('bits', Number(64)), '9'), VarsDecl([VarDeclUndef(Var('rval', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('bits', Number(16)), '16'), VarsDecl([VarDeclInit(Var('ebytes', '19'), Number(2), '20')], ('integer', Number(64)), '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('s', '63'), Number(0), Number(0), [Update(Var('element', '38'), ArrayIndex(Var('Mem', '39'), [BinaryExpr('+', Var('address', '40'), Var('offs', '41'), '42'), Var('ebytes', '43'), Var('AccType_VEC', '44')], '45')), Update(VReg(Var('t', '47'), '48'), Call('Replicate', [Var('element', '50'), Number(4)], '54')), Update(Var('offs', '55'), BinaryExpr('+', Var('offs', '56'), Var('ebytes', '57'), '58')), Update(Var('t', '59'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '60'), Number(1), '61'), Number(32), '62'))], 1, '64')], rettype='uint16x4_t', ret_is_signed=False, inst_form='LD1R {Vt.4H},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'scale': 1, 'selem': 1, 'replicate': True, 'memop': 0, 'datasize': 64, 'esize': 16}, belongs_to='aarch64_memory_vector_single_no_wb'),
    'vld1_dup_u32': ARMSema(intrin='vld1_dup_u32', inst='LD1R', params=[Parameter(name='ptr', type='uint32_t const *', is_signed=False, is_imm=False, is_mask=False)], spec=[IfStmt(Call('HaveMTEExt', [], '2'), [], '3'), VarsDecl([VarDeclUndef(Var('address', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('offs', '7'), '8')], ('bits', Number(64)), '9'), VarsDecl([VarDeclUndef(Var('rval', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('bits', Number(32)), '16'), VarsDecl([VarDeclInit(Var('ebytes', '19'), Number(4), '20')], ('integer', Number(64)), '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('s', '63'), Number(0), Number(0), [Update(Var('element', '38'), ArrayIndex(Var('Mem', '39'), [BinaryExpr('+', Var('address', '40'), Var('offs', '41'), '42'), Var('ebytes', '43'), Var('AccType_VEC', '44')], '45')), Update(VReg(Var('t', '47'), '48'), Call('Replicate', [Var('element', '50'), Number(2)], '54')), Update(Var('offs', '55'), BinaryExpr('+', Var('offs', '56'), Var('ebytes', '57'), '58')), Update(Var('t', '59'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '60'), Number(1), '61'), Number(32), '62'))], 1, '64')], rettype='uint32x2_t', ret_is_signed=False, inst_form='LD1R {Vt.2S},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'scale': 2, 'selem': 1, 'replicate': True, 'memop': 0, 'datasize': 64, 'esize': 32}, belongs_to='aarch64_memory_vector_single_no_wb'),
    'vld1_dup_u64': ARMSema(intrin='vld1_dup_u64', inst='LD1', params=[Parameter(name='ptr', type='uint64_t const *', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(64)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(8), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(0), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(0), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(64), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(64), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='uint64x1_t', ret_is_signed=False, inst_form='LD1 {Vt.1D},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 0, 'datasize': 64, 'esize': 64, 'elements': 1, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vld1_dup_u8': ARMSema(intrin='vld1_dup_u8', inst='LD1R', params=[Parameter(name='ptr', type='uint8_t const *', is_signed=False, is_imm=False, is_mask=False)], spec=[IfStmt(Call('HaveMTEExt', [], '2'), [], '3'), VarsDecl([VarDeclUndef(Var('address', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('offs', '7'), '8')], ('bits', Number(64)), '9'), VarsDecl([VarDeclUndef(Var('rval', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('bits', Number(8)), '16'), VarsDecl([VarDeclInit(Var('ebytes', '19'), Number(1), '20')], ('integer', Number(64)), '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('s', '63'), Number(0), Number(0), [Update(Var('element', '38'), ArrayIndex(Var('Mem', '39'), [BinaryExpr('+', Var('address', '40'), Var('offs', '41'), '42'), Var('ebytes', '43'), Var('AccType_VEC', '44')], '45')), Update(VReg(Var('t', '47'), '48'), Call('Replicate', [Var('element', '50'), Number(8)], '54')), Update(Var('offs', '55'), BinaryExpr('+', Var('offs', '56'), Var('ebytes', '57'), '58')), Update(Var('t', '59'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '60'), Number(1), '61'), Number(32), '62'))], 1, '64')], rettype='uint8x8_t', ret_is_signed=False, inst_form='LD1R {Vt.8B},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'scale': 0, 'selem': 1, 'replicate': True, 'memop': 0, 'datasize': 64, 'esize': 8}, belongs_to='aarch64_memory_vector_single_no_wb'),
    'vld1_s16': ARMSema(intrin='vld1_s16', inst='LD1', params=[Parameter(name='ptr', type='int16_t const *', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(64)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(2), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(3), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(0), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(16), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(16), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='int16x4_t', ret_is_signed=True, inst_form='LD1 {Vt.4H},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 0, 'datasize': 64, 'esize': 16, 'elements': 4, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vld1_s32': ARMSema(intrin='vld1_s32', inst='LD1', params=[Parameter(name='ptr', type='int32_t const *', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(64)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(4), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(1), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(0), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(32), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(32), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='int32x2_t', ret_is_signed=True, inst_form='LD1 {Vt.2S},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 0, 'datasize': 64, 'esize': 32, 'elements': 2, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vld1_s64': ARMSema(intrin='vld1_s64', inst='LD1', params=[Parameter(name='ptr', type='int64_t const *', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(64)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(8), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(0), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(0), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(64), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(64), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='int64x1_t', ret_is_signed=True, inst_form='LD1 {Vt.1D},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 0, 'datasize': 64, 'esize': 64, 'elements': 1, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vld1_s8': ARMSema(intrin='vld1_s8', inst='LD1', params=[Parameter(name='ptr', type='int8_t const *', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(64)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(1), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(7), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(0), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(8), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(8), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='int8x8_t', ret_is_signed=True, inst_form='LD1 {Vt.8B},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 0, 'datasize': 64, 'esize': 8, 'elements': 8, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vld1_u16': ARMSema(intrin='vld1_u16', inst='LD1', params=[Parameter(name='ptr', type='uint16_t const *', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(64)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(2), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(3), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(0), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(16), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(16), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='uint16x4_t', ret_is_signed=False, inst_form='LD1 {Vt.4H},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 0, 'datasize': 64, 'esize': 16, 'elements': 4, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vld1_u32': ARMSema(intrin='vld1_u32', inst='LD1', params=[Parameter(name='ptr', type='uint32_t const *', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(64)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(4), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(1), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(0), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(32), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(32), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='uint32x2_t', ret_is_signed=False, inst_form='LD1 {Vt.2S},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 0, 'datasize': 64, 'esize': 32, 'elements': 2, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vld1_u64': ARMSema(intrin='vld1_u64', inst='LD1', params=[Parameter(name='ptr', type='uint64_t const *', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(64)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(8), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(0), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(0), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(64), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(64), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='uint64x1_t', ret_is_signed=False, inst_form='LD1 {Vt.1D},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 0, 'datasize': 64, 'esize': 64, 'elements': 1, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vld1_u8': ARMSema(intrin='vld1_u8', inst='LD1', params=[Parameter(name='ptr', type='uint8_t const *', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(64)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(1), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(7), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(0), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(8), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(8), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='uint8x8_t', ret_is_signed=False, inst_form='LD1 {Vt.8B},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 0, 'datasize': 64, 'esize': 8, 'elements': 8, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vld1q_dup_s16': ARMSema(intrin='vld1q_dup_s16', inst='LD1R', params=[Parameter(name='ptr', type='int16_t const *', is_signed=True, is_imm=False, is_mask=False)], spec=[IfStmt(Call('HaveMTEExt', [], '2'), [], '3'), VarsDecl([VarDeclUndef(Var('address', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('offs', '7'), '8')], ('bits', Number(64)), '9'), VarsDecl([VarDeclUndef(Var('rval', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('bits', Number(16)), '16'), VarsDecl([VarDeclInit(Var('ebytes', '19'), Number(2), '20')], ('integer', Number(64)), '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('s', '63'), Number(0), Number(0), [Update(Var('element', '38'), ArrayIndex(Var('Mem', '39'), [BinaryExpr('+', Var('address', '40'), Var('offs', '41'), '42'), Var('ebytes', '43'), Var('AccType_VEC', '44')], '45')), Update(VReg(Var('t', '47'), '48'), Call('Replicate', [Var('element', '50'), Number(8)], '54')), Update(Var('offs', '55'), BinaryExpr('+', Var('offs', '56'), Var('ebytes', '57'), '58')), Update(Var('t', '59'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '60'), Number(1), '61'), Number(32), '62'))], 1, '64')], rettype='int16x8_t', ret_is_signed=True, inst_form='LD1R {Vt.8H},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'scale': 1, 'selem': 1, 'replicate': True, 'memop': 0, 'datasize': 128, 'esize': 16}, belongs_to='aarch64_memory_vector_single_no_wb'),
    'vld1q_dup_s32': ARMSema(intrin='vld1q_dup_s32', inst='LD1R', params=[Parameter(name='ptr', type='int32_t const *', is_signed=True, is_imm=False, is_mask=False)], spec=[IfStmt(Call('HaveMTEExt', [], '2'), [], '3'), VarsDecl([VarDeclUndef(Var('address', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('offs', '7'), '8')], ('bits', Number(64)), '9'), VarsDecl([VarDeclUndef(Var('rval', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('bits', Number(32)), '16'), VarsDecl([VarDeclInit(Var('ebytes', '19'), Number(4), '20')], ('integer', Number(64)), '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('s', '63'), Number(0), Number(0), [Update(Var('element', '38'), ArrayIndex(Var('Mem', '39'), [BinaryExpr('+', Var('address', '40'), Var('offs', '41'), '42'), Var('ebytes', '43'), Var('AccType_VEC', '44')], '45')), Update(VReg(Var('t', '47'), '48'), Call('Replicate', [Var('element', '50'), Number(4)], '54')), Update(Var('offs', '55'), BinaryExpr('+', Var('offs', '56'), Var('ebytes', '57'), '58')), Update(Var('t', '59'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '60'), Number(1), '61'), Number(32), '62'))], 1, '64')], rettype='int32x4_t', ret_is_signed=True, inst_form='LD1R {Vt.4S},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'scale': 2, 'selem': 1, 'replicate': True, 'memop': 0, 'datasize': 128, 'esize': 32}, belongs_to='aarch64_memory_vector_single_no_wb'),
    'vld1q_dup_s64': ARMSema(intrin='vld1q_dup_s64', inst='LD1R', params=[Parameter(name='ptr', type='int64_t const *', is_signed=True, is_imm=False, is_mask=False)], spec=[IfStmt(Call('HaveMTEExt', [], '2'), [], '3'), VarsDecl([VarDeclUndef(Var('address', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('offs', '7'), '8')], ('bits', Number(64)), '9'), VarsDecl([VarDeclUndef(Var('rval', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('ebytes', '19'), Number(8), '20')], ('integer', Number(64)), '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('s', '63'), Number(0), Number(0), [Update(Var('element', '38'), ArrayIndex(Var('Mem', '39'), [BinaryExpr('+', Var('address', '40'), Var('offs', '41'), '42'), Var('ebytes', '43'), Var('AccType_VEC', '44')], '45')), Update(VReg(Var('t', '47'), '48'), Call('Replicate', [Var('element', '50'), Number(2)], '54')), Update(Var('offs', '55'), BinaryExpr('+', Var('offs', '56'), Var('ebytes', '57'), '58')), Update(Var('t', '59'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '60'), Number(1), '61'), Number(32), '62'))], 1, '64')], rettype='int64x2_t', ret_is_signed=True, inst_form='LD1R {Vt.2D},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'scale': 3, 'selem': 1, 'replicate': True, 'memop': 0, 'datasize': 128, 'esize': 64}, belongs_to='aarch64_memory_vector_single_no_wb'),
    'vld1q_dup_s8': ARMSema(intrin='vld1q_dup_s8', inst='LD1R', params=[Parameter(name='ptr', type='int8_t const *', is_signed=True, is_imm=False, is_mask=False)], spec=[IfStmt(Call('HaveMTEExt', [], '2'), [], '3'), VarsDecl([VarDeclUndef(Var('address', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('offs', '7'), '8')], ('bits', Number(64)), '9'), VarsDecl([VarDeclUndef(Var('rval', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('bits', Number(8)), '16'), VarsDecl([VarDeclInit(Var('ebytes', '19'), Number(1), '20')], ('integer', Number(64)), '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('s', '63'), Number(0), Number(0), [Update(Var('element', '38'), ArrayIndex(Var('Mem', '39'), [BinaryExpr('+', Var('address', '40'), Var('offs', '41'), '42'), Var('ebytes', '43'), Var('AccType_VEC', '44')], '45')), Update(VReg(Var('t', '47'), '48'), Call('Replicate', [Var('element', '50'), Number(16)], '54')), Update(Var('offs', '55'), BinaryExpr('+', Var('offs', '56'), Var('ebytes', '57'), '58')), Update(Var('t', '59'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '60'), Number(1), '61'), Number(32), '62'))], 1, '64')], rettype='int8x16_t', ret_is_signed=True, inst_form='LD1R {Vt.16B},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'scale': 0, 'selem': 1, 'replicate': True, 'memop': 0, 'datasize': 128, 'esize': 8}, belongs_to='aarch64_memory_vector_single_no_wb'),
    'vld1q_dup_u16': ARMSema(intrin='vld1q_dup_u16', inst='LD1R', params=[Parameter(name='ptr', type='uint16_t const *', is_signed=False, is_imm=False, is_mask=False)], spec=[IfStmt(Call('HaveMTEExt', [], '2'), [], '3'), VarsDecl([VarDeclUndef(Var('address', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('offs', '7'), '8')], ('bits', Number(64)), '9'), VarsDecl([VarDeclUndef(Var('rval', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('bits', Number(16)), '16'), VarsDecl([VarDeclInit(Var('ebytes', '19'), Number(2), '20')], ('integer', Number(64)), '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('s', '63'), Number(0), Number(0), [Update(Var('element', '38'), ArrayIndex(Var('Mem', '39'), [BinaryExpr('+', Var('address', '40'), Var('offs', '41'), '42'), Var('ebytes', '43'), Var('AccType_VEC', '44')], '45')), Update(VReg(Var('t', '47'), '48'), Call('Replicate', [Var('element', '50'), Number(8)], '54')), Update(Var('offs', '55'), BinaryExpr('+', Var('offs', '56'), Var('ebytes', '57'), '58')), Update(Var('t', '59'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '60'), Number(1), '61'), Number(32), '62'))], 1, '64')], rettype='uint16x8_t', ret_is_signed=False, inst_form='LD1R {Vt.8H},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'scale': 1, 'selem': 1, 'replicate': True, 'memop': 0, 'datasize': 128, 'esize': 16}, belongs_to='aarch64_memory_vector_single_no_wb'),
    'vld1q_dup_u32': ARMSema(intrin='vld1q_dup_u32', inst='LD1R', params=[Parameter(name='ptr', type='uint32_t const *', is_signed=False, is_imm=False, is_mask=False)], spec=[IfStmt(Call('HaveMTEExt', [], '2'), [], '3'), VarsDecl([VarDeclUndef(Var('address', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('offs', '7'), '8')], ('bits', Number(64)), '9'), VarsDecl([VarDeclUndef(Var('rval', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('bits', Number(32)), '16'), VarsDecl([VarDeclInit(Var('ebytes', '19'), Number(4), '20')], ('integer', Number(64)), '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('s', '63'), Number(0), Number(0), [Update(Var('element', '38'), ArrayIndex(Var('Mem', '39'), [BinaryExpr('+', Var('address', '40'), Var('offs', '41'), '42'), Var('ebytes', '43'), Var('AccType_VEC', '44')], '45')), Update(VReg(Var('t', '47'), '48'), Call('Replicate', [Var('element', '50'), Number(4)], '54')), Update(Var('offs', '55'), BinaryExpr('+', Var('offs', '56'), Var('ebytes', '57'), '58')), Update(Var('t', '59'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '60'), Number(1), '61'), Number(32), '62'))], 1, '64')], rettype='uint32x4_t', ret_is_signed=False, inst_form='LD1R {Vt.4S},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'scale': 2, 'selem': 1, 'replicate': True, 'memop': 0, 'datasize': 128, 'esize': 32}, belongs_to='aarch64_memory_vector_single_no_wb'),
    'vld1q_dup_u64': ARMSema(intrin='vld1q_dup_u64', inst='LD1R', params=[Parameter(name='ptr', type='uint64_t const *', is_signed=False, is_imm=False, is_mask=False)], spec=[IfStmt(Call('HaveMTEExt', [], '2'), [], '3'), VarsDecl([VarDeclUndef(Var('address', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('offs', '7'), '8')], ('bits', Number(64)), '9'), VarsDecl([VarDeclUndef(Var('rval', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('ebytes', '19'), Number(8), '20')], ('integer', Number(64)), '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('s', '63'), Number(0), Number(0), [Update(Var('element', '38'), ArrayIndex(Var('Mem', '39'), [BinaryExpr('+', Var('address', '40'), Var('offs', '41'), '42'), Var('ebytes', '43'), Var('AccType_VEC', '44')], '45')), Update(VReg(Var('t', '47'), '48'), Call('Replicate', [Var('element', '50'), Number(2)], '54')), Update(Var('offs', '55'), BinaryExpr('+', Var('offs', '56'), Var('ebytes', '57'), '58')), Update(Var('t', '59'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '60'), Number(1), '61'), Number(32), '62'))], 1, '64')], rettype='uint64x2_t', ret_is_signed=False, inst_form='LD1R {Vt.2D},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'scale': 3, 'selem': 1, 'replicate': True, 'memop': 0, 'datasize': 128, 'esize': 64}, belongs_to='aarch64_memory_vector_single_no_wb'),
    'vld1q_dup_u8': ARMSema(intrin='vld1q_dup_u8', inst='LD1R', params=[Parameter(name='ptr', type='uint8_t const *', is_signed=False, is_imm=False, is_mask=False)], spec=[IfStmt(Call('HaveMTEExt', [], '2'), [], '3'), VarsDecl([VarDeclUndef(Var('address', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('offs', '7'), '8')], ('bits', Number(64)), '9'), VarsDecl([VarDeclUndef(Var('rval', '10'), '11')], ('bits', Number(128)), '12'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('bits', Number(8)), '16'), VarsDecl([VarDeclInit(Var('ebytes', '19'), Number(1), '20')], ('integer', Number(64)), '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('s', '63'), Number(0), Number(0), [Update(Var('element', '38'), ArrayIndex(Var('Mem', '39'), [BinaryExpr('+', Var('address', '40'), Var('offs', '41'), '42'), Var('ebytes', '43'), Var('AccType_VEC', '44')], '45')), Update(VReg(Var('t', '47'), '48'), Call('Replicate', [Var('element', '50'), Number(16)], '54')), Update(Var('offs', '55'), BinaryExpr('+', Var('offs', '56'), Var('ebytes', '57'), '58')), Update(Var('t', '59'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '60'), Number(1), '61'), Number(32), '62'))], 1, '64')], rettype='uint8x16_t', ret_is_signed=False, inst_form='LD1R {Vt.16B},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'scale': 0, 'selem': 1, 'replicate': True, 'memop': 0, 'datasize': 128, 'esize': 8}, belongs_to='aarch64_memory_vector_single_no_wb'),
    'vld1q_s16': ARMSema(intrin='vld1q_s16', inst='LD1', params=[Parameter(name='ptr', type='int16_t const *', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(128)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(2), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(7), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(0), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(16), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(16), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='int16x8_t', ret_is_signed=True, inst_form='LD1 {Vt.8H},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 0, 'datasize': 128, 'esize': 16, 'elements': 8, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vld1q_s32': ARMSema(intrin='vld1q_s32', inst='LD1', params=[Parameter(name='ptr', type='int32_t const *', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(128)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(4), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(3), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(0), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(32), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(32), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='int32x4_t', ret_is_signed=True, inst_form='LD1 {Vt.4S},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 0, 'datasize': 128, 'esize': 32, 'elements': 4, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vld1q_s64': ARMSema(intrin='vld1q_s64', inst='LD1', params=[Parameter(name='ptr', type='int64_t const *', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(128)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(8), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(1), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(0), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(64), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(64), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='int64x2_t', ret_is_signed=True, inst_form='LD1 {Vt.2D},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 0, 'datasize': 128, 'esize': 64, 'elements': 2, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vld1q_s8': ARMSema(intrin='vld1q_s8', inst='LD1', params=[Parameter(name='ptr', type='int8_t const *', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(128)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(1), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(15), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(0), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(8), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(8), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='int8x16_t', ret_is_signed=True, inst_form='LD1 {Vt.16B},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 0, 'datasize': 128, 'esize': 8, 'elements': 16, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vld1q_u16': ARMSema(intrin='vld1q_u16', inst='LD1', params=[Parameter(name='ptr', type='uint16_t const *', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(128)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(2), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(7), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(0), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(16), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(16), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='uint16x8_t', ret_is_signed=False, inst_form='LD1 {Vt.8H},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 0, 'datasize': 128, 'esize': 16, 'elements': 8, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vld1q_u32': ARMSema(intrin='vld1q_u32', inst='LD1', params=[Parameter(name='ptr', type='uint32_t const *', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(128)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(4), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(3), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(0), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(32), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(32), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='uint32x4_t', ret_is_signed=False, inst_form='LD1 {Vt.4S},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 0, 'datasize': 128, 'esize': 32, 'elements': 4, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vld1q_u64': ARMSema(intrin='vld1q_u64', inst='LD1', params=[Parameter(name='ptr', type='uint64_t const *', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(128)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(8), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(1), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(0), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(64), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(64), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='uint64x2_t', ret_is_signed=False, inst_form='LD1 {Vt.2D},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 0, 'datasize': 128, 'esize': 64, 'elements': 2, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vld1q_u8': ARMSema(intrin='vld1q_u8', inst='LD1', params=[Parameter(name='ptr', type='uint8_t const *', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(128)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(1), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(15), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(0), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(8), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(8), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='uint8x16_t', ret_is_signed=False, inst_form='LD1 {Vt.16B},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'t': 'returnVal', 'n': 'ptr'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 0, 'datasize': 128, 'esize': 8, 'elements': 16, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vmax_s16': ARMSema(intrin='vmax_s16', inst='SMAX', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(0)], '47')), Update(Var('maxmin', '48'), Call('Max', [Var('element1', '55'), Var('element2', '56')], '57')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(16), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(15), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SMAX Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vmax_s32': ARMSema(intrin='vmax_s32', inst='SMAX', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(0)], '47')), Update(Var('maxmin', '48'), Call('Max', [Var('element1', '55'), Var('element2', '56')], '57')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(32), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(31), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SMAX Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vmax_s8': ARMSema(intrin='vmax_s8', inst='SMAX', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(0)], '47')), Update(Var('maxmin', '48'), Call('Max', [Var('element1', '55'), Var('element2', '56')], '57')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(8), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(7), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SMAX Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vmax_u16': ARMSema(intrin='vmax_u16', inst='UMAX', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(1)], '47')), Update(Var('maxmin', '48'), Call('Max', [Var('element1', '55'), Var('element2', '56')], '57')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(16), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(15), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='UMAX Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vmax_u32': ARMSema(intrin='vmax_u32', inst='UMAX', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(1)], '47')), Update(Var('maxmin', '48'), Call('Max', [Var('element1', '55'), Var('element2', '56')], '57')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(32), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(31), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='UMAX Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vmax_u8': ARMSema(intrin='vmax_u8', inst='UMAX', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(1)], '47')), Update(Var('maxmin', '48'), Call('Max', [Var('element1', '55'), Var('element2', '56')], '57')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(8), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(7), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='UMAX Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vmaxq_s16': ARMSema(intrin='vmaxq_s16', inst='SMAX', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(0)], '47')), Update(Var('maxmin', '48'), Call('Max', [Var('element1', '55'), Var('element2', '56')], '57')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(16), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(15), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SMAX Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vmaxq_s32': ARMSema(intrin='vmaxq_s32', inst='SMAX', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(0)], '47')), Update(Var('maxmin', '48'), Call('Max', [Var('element1', '55'), Var('element2', '56')], '57')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(32), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(31), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SMAX Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vmaxq_s8': ARMSema(intrin='vmaxq_s8', inst='SMAX', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(15), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(0)], '47')), Update(Var('maxmin', '48'), Call('Max', [Var('element1', '55'), Var('element2', '56')], '57')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(8), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(7), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SMAX Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vmaxq_u16': ARMSema(intrin='vmaxq_u16', inst='UMAX', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(1)], '47')), Update(Var('maxmin', '48'), Call('Max', [Var('element1', '55'), Var('element2', '56')], '57')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(16), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(15), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UMAX Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vmaxq_u32': ARMSema(intrin='vmaxq_u32', inst='UMAX', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(1)], '47')), Update(Var('maxmin', '48'), Call('Max', [Var('element1', '55'), Var('element2', '56')], '57')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(32), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(31), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UMAX Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vmaxq_u8': ARMSema(intrin='vmaxq_u8', inst='UMAX', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(15), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(1)], '47')), Update(Var('maxmin', '48'), Call('Max', [Var('element1', '55'), Var('element2', '56')], '57')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(8), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(7), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='UMAX Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vmin_s16': ARMSema(intrin='vmin_s16', inst='SMIN', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(0)], '47')), Update(Var('maxmin', '48'), Call('Min', [Var('element1', '50'), Var('element2', '51')], '52')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(16), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(15), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SMIN Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vmin_s32': ARMSema(intrin='vmin_s32', inst='SMIN', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(0)], '47')), Update(Var('maxmin', '48'), Call('Min', [Var('element1', '50'), Var('element2', '51')], '52')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(32), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(31), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SMIN Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vmin_s8': ARMSema(intrin='vmin_s8', inst='SMIN', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(0)], '47')), Update(Var('maxmin', '48'), Call('Min', [Var('element1', '50'), Var('element2', '51')], '52')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(8), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(7), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SMIN Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vmin_u16': ARMSema(intrin='vmin_u16', inst='UMIN', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(1)], '47')), Update(Var('maxmin', '48'), Call('Min', [Var('element1', '50'), Var('element2', '51')], '52')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(16), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(15), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='UMIN Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vmin_u32': ARMSema(intrin='vmin_u32', inst='UMIN', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(1)], '47')), Update(Var('maxmin', '48'), Call('Min', [Var('element1', '50'), Var('element2', '51')], '52')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(32), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(31), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='UMIN Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vmin_u8': ARMSema(intrin='vmin_u8', inst='UMIN', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(1)], '47')), Update(Var('maxmin', '48'), Call('Min', [Var('element1', '50'), Var('element2', '51')], '52')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(8), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(7), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='UMIN Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vminq_s16': ARMSema(intrin='vminq_s16', inst='SMIN', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(0)], '47')), Update(Var('maxmin', '48'), Call('Min', [Var('element1', '50'), Var('element2', '51')], '52')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(16), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(15), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SMIN Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vminq_s32': ARMSema(intrin='vminq_s32', inst='SMIN', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(0)], '47')), Update(Var('maxmin', '48'), Call('Min', [Var('element1', '50'), Var('element2', '51')], '52')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(32), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(31), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SMIN Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vminq_s8': ARMSema(intrin='vminq_s8', inst='SMIN', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(15), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(0)], '47')), Update(Var('maxmin', '48'), Call('Min', [Var('element1', '50'), Var('element2', '51')], '52')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(8), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(7), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SMIN Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vminq_u16': ARMSema(intrin='vminq_u16', inst='UMIN', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(1)], '47')), Update(Var('maxmin', '48'), Call('Min', [Var('element1', '50'), Var('element2', '51')], '52')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(16), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(15), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UMIN Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vminq_u32': ARMSema(intrin='vminq_u32', inst='UMIN', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(1)], '47')), Update(Var('maxmin', '48'), Call('Min', [Var('element1', '50'), Var('element2', '51')], '52')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(32), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(31), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UMIN Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vminq_u8': ARMSema(intrin='vminq_u8', inst='UMIN', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('maxmin', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '69'), Number(0), Number(15), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(1)], '47')), Update(Var('maxmin', '48'), Call('Min', [Var('element1', '50'), Var('element2', '51')], '52')), Update(ElemSlice(Var('result', '60'), Var('e', '61'), Number(8), '63'), ArrayIndex(Var('maxmin', '64'), [SliceRange(Number(7), Number(0), '67')], '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='UMIN Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_single'),
    'vmla_n_s16': ARMSema(intrin='vmla_n_s16', inst='MLA', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element1', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element2', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('bits', Number(16)), '35'), Update(Var('element2', '36'), Call('UInt', [ElemSlice(Var('operand2', '39'), Number(0), Number(16), '42')], '43')), For(Var('e', '88'), Number(0), Number(3), [Update(Var('element1', '46'), Call('UInt', [ElemSlice(Var('operand1', '49'), Var('e', '50'), Number(16), '52')], '53')), Update(Var('product', '54'), ArrayIndex(BinaryExpr('*', Var('element1', '55'), Var('element2', '56'), '57'), [SliceRange(Number(15), Number(0), '60')], '61')), Update(ElemSlice(Var('result', '76'), Var('e', '77'), Number(16), '79'), BinaryExpr('+', ElemSlice(Var('operand3', '81'), Var('e', '82'), Number(16), '84'), Var('product', '85'), '86'))], 1, '89'), Update(VReg(Var('d', '91'), '92'), Var('result', '93'))], rettype='int16x4_t', ret_is_signed=True, inst_form='MLA Vd.4H,Vn.4H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'elements': 4, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_int'),
    'vmla_n_s32': ARMSema(intrin='vmla_n_s32', inst='MLA', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element1', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element2', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('bits', Number(32)), '35'), Update(Var('element2', '36'), Call('UInt', [ElemSlice(Var('operand2', '39'), Number(0), Number(32), '42')], '43')), For(Var('e', '88'), Number(0), Number(1), [Update(Var('element1', '46'), Call('UInt', [ElemSlice(Var('operand1', '49'), Var('e', '50'), Number(32), '52')], '53')), Update(Var('product', '54'), ArrayIndex(BinaryExpr('*', Var('element1', '55'), Var('element2', '56'), '57'), [SliceRange(Number(31), Number(0), '60')], '61')), Update(ElemSlice(Var('result', '76'), Var('e', '77'), Number(32), '79'), BinaryExpr('+', ElemSlice(Var('operand3', '81'), Var('e', '82'), Number(32), '84'), Var('product', '85'), '86'))], 1, '89'), Update(VReg(Var('d', '91'), '92'), Var('result', '93'))], rettype='int32x2_t', ret_is_signed=True, inst_form='MLA Vd.2S,Vn.2S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'elements': 2, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_int'),
    'vmla_n_u16': ARMSema(intrin='vmla_n_u16', inst='MLA', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element1', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element2', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('bits', Number(16)), '35'), Update(Var('element2', '36'), Call('UInt', [ElemSlice(Var('operand2', '39'), Number(0), Number(16), '42')], '43')), For(Var('e', '88'), Number(0), Number(3), [Update(Var('element1', '46'), Call('UInt', [ElemSlice(Var('operand1', '49'), Var('e', '50'), Number(16), '52')], '53')), Update(Var('product', '54'), ArrayIndex(BinaryExpr('*', Var('element1', '55'), Var('element2', '56'), '57'), [SliceRange(Number(15), Number(0), '60')], '61')), Update(ElemSlice(Var('result', '76'), Var('e', '77'), Number(16), '79'), BinaryExpr('+', ElemSlice(Var('operand3', '81'), Var('e', '82'), Number(16), '84'), Var('product', '85'), '86'))], 1, '89'), Update(VReg(Var('d', '91'), '92'), Var('result', '93'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='MLA Vd.4H,Vn.4H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'elements': 4, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_int'),
    'vmla_n_u32': ARMSema(intrin='vmla_n_u32', inst='MLA', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element1', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element2', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('bits', Number(32)), '35'), Update(Var('element2', '36'), Call('UInt', [ElemSlice(Var('operand2', '39'), Number(0), Number(32), '42')], '43')), For(Var('e', '88'), Number(0), Number(1), [Update(Var('element1', '46'), Call('UInt', [ElemSlice(Var('operand1', '49'), Var('e', '50'), Number(32), '52')], '53')), Update(Var('product', '54'), ArrayIndex(BinaryExpr('*', Var('element1', '55'), Var('element2', '56'), '57'), [SliceRange(Number(31), Number(0), '60')], '61')), Update(ElemSlice(Var('result', '76'), Var('e', '77'), Number(32), '79'), BinaryExpr('+', ElemSlice(Var('operand3', '81'), Var('e', '82'), Number(32), '84'), Var('product', '85'), '86'))], 1, '89'), Update(VReg(Var('d', '91'), '92'), Var('result', '93'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='MLA Vd.2S,Vn.2S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'elements': 2, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_int'),
    'vmla_s16': ARMSema(intrin='vmla_s16', inst='MLA', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(16)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(16)), '37'), For(Var('e', '90'), Number(0), Number(3), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(16), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(16), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(15), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '78'), Var('e', '79'), Number(16), '81'), BinaryExpr('+', ElemSlice(Var('operand3', '83'), Var('e', '84'), Number(16), '86'), Var('product', '87'), '88'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='int16x4_t', ret_is_signed=True, inst_form='MLA Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmla_s32': ARMSema(intrin='vmla_s32', inst='MLA', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(32)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(32)), '37'), For(Var('e', '90'), Number(0), Number(1), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(32), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(32), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(31), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '78'), Var('e', '79'), Number(32), '81'), BinaryExpr('+', ElemSlice(Var('operand3', '83'), Var('e', '84'), Number(32), '86'), Var('product', '87'), '88'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='int32x2_t', ret_is_signed=True, inst_form='MLA Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmla_s8': ARMSema(intrin='vmla_s8', inst='MLA', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(8)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(8)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(8)), '37'), For(Var('e', '90'), Number(0), Number(7), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(8), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(8), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(7), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '78'), Var('e', '79'), Number(8), '81'), BinaryExpr('+', ElemSlice(Var('operand3', '83'), Var('e', '84'), Number(8), '86'), Var('product', '87'), '88'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='int8x8_t', ret_is_signed=True, inst_form='MLA Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmla_u16': ARMSema(intrin='vmla_u16', inst='MLA', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(16)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(16)), '37'), For(Var('e', '90'), Number(0), Number(3), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(16), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(16), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(15), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '78'), Var('e', '79'), Number(16), '81'), BinaryExpr('+', ElemSlice(Var('operand3', '83'), Var('e', '84'), Number(16), '86'), Var('product', '87'), '88'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='MLA Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmla_u32': ARMSema(intrin='vmla_u32', inst='MLA', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(32)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(32)), '37'), For(Var('e', '90'), Number(0), Number(1), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(32), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(32), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(31), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '78'), Var('e', '79'), Number(32), '81'), BinaryExpr('+', ElemSlice(Var('operand3', '83'), Var('e', '84'), Number(32), '86'), Var('product', '87'), '88'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='MLA Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmla_u8': ARMSema(intrin='vmla_u8', inst='MLA', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(8)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(8)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(8)), '37'), For(Var('e', '90'), Number(0), Number(7), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(8), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(8), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(7), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '78'), Var('e', '79'), Number(8), '81'), BinaryExpr('+', ElemSlice(Var('operand3', '83'), Var('e', '84'), Number(8), '86'), Var('product', '87'), '88'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='MLA Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmlal_high_n_s16': ARMSema(intrin='vmlal_high_n_s16', inst='SMLAL2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(32)), '39'), Update(Var('element2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Number(0), Number(16), '46'), Number(0)], '48')), For(Var('e', '99'), Number(0), Number(3), [Update(Var('element1', '51'), Call('Int', [ElemSlice(Var('operand1', '54'), Var('e', '55'), Number(16), '57'), Number(0)], '59')), Update(Var('product', '60'), ArrayIndex(BinaryExpr('*', Var('element1', '61'), Var('element2', '62'), '63'), [SliceRange(Number(31), Number(0), '67')], '68')), Update(ElemSlice(Var('result', '85'), Var('e', '86'), Number(32), '89'), BinaryExpr('+', ElemSlice(Var('operand3', '91'), Var('e', '92'), Number(32), '95'), Var('product', '96'), '97'))], 1, '100'), Update(VReg(Var('d', '102'), '103'), Var('result', '104'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SMLAL2 Vd.4S,Vn.8H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'unsigned': False, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_long'),
    'vmlal_high_n_s32': ARMSema(intrin='vmlal_high_n_s32', inst='SMLAL2', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(64)), '39'), Update(Var('element2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Number(0), Number(32), '46'), Number(0)], '48')), For(Var('e', '99'), Number(0), Number(1), [Update(Var('element1', '51'), Call('Int', [ElemSlice(Var('operand1', '54'), Var('e', '55'), Number(32), '57'), Number(0)], '59')), Update(Var('product', '60'), ArrayIndex(BinaryExpr('*', Var('element1', '61'), Var('element2', '62'), '63'), [SliceRange(Number(63), Number(0), '67')], '68')), Update(ElemSlice(Var('result', '85'), Var('e', '86'), Number(64), '89'), BinaryExpr('+', ElemSlice(Var('operand3', '91'), Var('e', '92'), Number(64), '95'), Var('product', '96'), '97'))], 1, '100'), Update(VReg(Var('d', '102'), '103'), Var('result', '104'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SMLAL2 Vd.2D,Vn.4S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'unsigned': False, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_long'),
    'vmlal_high_n_u16': ARMSema(intrin='vmlal_high_n_u16', inst='UMLAL2', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(32)), '39'), Update(Var('element2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Number(0), Number(16), '46'), Number(1)], '48')), For(Var('e', '99'), Number(0), Number(3), [Update(Var('element1', '51'), Call('Int', [ElemSlice(Var('operand1', '54'), Var('e', '55'), Number(16), '57'), Number(1)], '59')), Update(Var('product', '60'), ArrayIndex(BinaryExpr('*', Var('element1', '61'), Var('element2', '62'), '63'), [SliceRange(Number(31), Number(0), '67')], '68')), Update(ElemSlice(Var('result', '85'), Var('e', '86'), Number(32), '89'), BinaryExpr('+', ElemSlice(Var('operand3', '91'), Var('e', '92'), Number(32), '95'), Var('product', '96'), '97'))], 1, '100'), Update(VReg(Var('d', '102'), '103'), Var('result', '104'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UMLAL2 Vd.4S,Vn.8H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'unsigned': True, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_long'),
    'vmlal_high_n_u32': ARMSema(intrin='vmlal_high_n_u32', inst='UMLAL2', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(64)), '39'), Update(Var('element2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Number(0), Number(32), '46'), Number(1)], '48')), For(Var('e', '99'), Number(0), Number(1), [Update(Var('element1', '51'), Call('Int', [ElemSlice(Var('operand1', '54'), Var('e', '55'), Number(32), '57'), Number(1)], '59')), Update(Var('product', '60'), ArrayIndex(BinaryExpr('*', Var('element1', '61'), Var('element2', '62'), '63'), [SliceRange(Number(63), Number(0), '67')], '68')), Update(ElemSlice(Var('result', '85'), Var('e', '86'), Number(64), '89'), BinaryExpr('+', ElemSlice(Var('operand3', '91'), Var('e', '92'), Number(64), '95'), Var('product', '96'), '97'))], 1, '100'), Update(VReg(Var('d', '102'), '103'), Var('result', '104'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UMLAL2 Vd.2D,Vn.4S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'unsigned': True, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_long'),
    'vmlal_high_s16': ARMSema(intrin='vmlal_high_s16', inst='SMLAL2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(32)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(32)), '45'), For(Var('e', '102'), Number(0), Number(3), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(16), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '63'), Number(0)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(31), Number(0), '73')], '74')), Update(Var('accum', '85'), BinaryExpr('+', ElemSlice(Var('operand3', '87'), Var('e', '88'), Number(32), '91'), Var('product', '92'), '93')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(32), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SMLAL2 Vd.4S,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlal_high_s32': ARMSema(intrin='vmlal_high_s32', inst='SMLAL2', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(64)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(64)), '45'), For(Var('e', '102'), Number(0), Number(1), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(32), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '63'), Number(0)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(63), Number(0), '73')], '74')), Update(Var('accum', '85'), BinaryExpr('+', ElemSlice(Var('operand3', '87'), Var('e', '88'), Number(64), '91'), Var('product', '92'), '93')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(64), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SMLAL2 Vd.2D,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlal_high_s8': ARMSema(intrin='vmlal_high_s8', inst='SMLAL2', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(16)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(16)), '45'), For(Var('e', '102'), Number(0), Number(7), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(8), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(8), '63'), Number(0)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(15), Number(0), '73')], '74')), Update(Var('accum', '85'), BinaryExpr('+', ElemSlice(Var('operand3', '87'), Var('e', '88'), Number(16), '91'), Var('product', '92'), '93')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(16), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SMLAL2 Vd.8H,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'sub_op': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlal_high_u16': ARMSema(intrin='vmlal_high_u16', inst='UMLAL2', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(32)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(32)), '45'), For(Var('e', '102'), Number(0), Number(3), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(16), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '63'), Number(1)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(31), Number(0), '73')], '74')), Update(Var('accum', '85'), BinaryExpr('+', ElemSlice(Var('operand3', '87'), Var('e', '88'), Number(32), '91'), Var('product', '92'), '93')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(32), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UMLAL2 Vd.4S,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlal_high_u32': ARMSema(intrin='vmlal_high_u32', inst='UMLAL2', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(64)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(64)), '45'), For(Var('e', '102'), Number(0), Number(1), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(32), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '63'), Number(1)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(63), Number(0), '73')], '74')), Update(Var('accum', '85'), BinaryExpr('+', ElemSlice(Var('operand3', '87'), Var('e', '88'), Number(64), '91'), Var('product', '92'), '93')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(64), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UMLAL2 Vd.2D,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlal_high_u8': ARMSema(intrin='vmlal_high_u8', inst='UMLAL2', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(16)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(16)), '45'), For(Var('e', '102'), Number(0), Number(7), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(8), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(8), '63'), Number(1)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(15), Number(0), '73')], '74')), Update(Var('accum', '85'), BinaryExpr('+', ElemSlice(Var('operand3', '87'), Var('e', '88'), Number(16), '91'), Var('product', '92'), '93')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(16), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UMLAL2 Vd.8H,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'sub_op': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlal_n_s16': ARMSema(intrin='vmlal_n_s16', inst='SMLAL', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(32)), '39'), Update(Var('element2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Number(0), Number(16), '46'), Number(0)], '48')), For(Var('e', '99'), Number(0), Number(3), [Update(Var('element1', '51'), Call('Int', [ElemSlice(Var('operand1', '54'), Var('e', '55'), Number(16), '57'), Number(0)], '59')), Update(Var('product', '60'), ArrayIndex(BinaryExpr('*', Var('element1', '61'), Var('element2', '62'), '63'), [SliceRange(Number(31), Number(0), '67')], '68')), Update(ElemSlice(Var('result', '85'), Var('e', '86'), Number(32), '89'), BinaryExpr('+', ElemSlice(Var('operand3', '91'), Var('e', '92'), Number(32), '95'), Var('product', '96'), '97'))], 1, '100'), Update(VReg(Var('d', '102'), '103'), Var('result', '104'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SMLAL Vd.4S,Vn.4H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'unsigned': False, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_long'),
    'vmlal_n_s32': ARMSema(intrin='vmlal_n_s32', inst='SMLAL', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(64)), '39'), Update(Var('element2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Number(0), Number(32), '46'), Number(0)], '48')), For(Var('e', '99'), Number(0), Number(1), [Update(Var('element1', '51'), Call('Int', [ElemSlice(Var('operand1', '54'), Var('e', '55'), Number(32), '57'), Number(0)], '59')), Update(Var('product', '60'), ArrayIndex(BinaryExpr('*', Var('element1', '61'), Var('element2', '62'), '63'), [SliceRange(Number(63), Number(0), '67')], '68')), Update(ElemSlice(Var('result', '85'), Var('e', '86'), Number(64), '89'), BinaryExpr('+', ElemSlice(Var('operand3', '91'), Var('e', '92'), Number(64), '95'), Var('product', '96'), '97'))], 1, '100'), Update(VReg(Var('d', '102'), '103'), Var('result', '104'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SMLAL Vd.2D,Vn.2S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'unsigned': False, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_long'),
    'vmlal_n_u16': ARMSema(intrin='vmlal_n_u16', inst='UMLAL', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(32)), '39'), Update(Var('element2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Number(0), Number(16), '46'), Number(1)], '48')), For(Var('e', '99'), Number(0), Number(3), [Update(Var('element1', '51'), Call('Int', [ElemSlice(Var('operand1', '54'), Var('e', '55'), Number(16), '57'), Number(1)], '59')), Update(Var('product', '60'), ArrayIndex(BinaryExpr('*', Var('element1', '61'), Var('element2', '62'), '63'), [SliceRange(Number(31), Number(0), '67')], '68')), Update(ElemSlice(Var('result', '85'), Var('e', '86'), Number(32), '89'), BinaryExpr('+', ElemSlice(Var('operand3', '91'), Var('e', '92'), Number(32), '95'), Var('product', '96'), '97'))], 1, '100'), Update(VReg(Var('d', '102'), '103'), Var('result', '104'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UMLAL Vd.4S,Vn.4H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'unsigned': True, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_long'),
    'vmlal_n_u32': ARMSema(intrin='vmlal_n_u32', inst='UMLAL', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(64)), '39'), Update(Var('element2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Number(0), Number(32), '46'), Number(1)], '48')), For(Var('e', '99'), Number(0), Number(1), [Update(Var('element1', '51'), Call('Int', [ElemSlice(Var('operand1', '54'), Var('e', '55'), Number(32), '57'), Number(1)], '59')), Update(Var('product', '60'), ArrayIndex(BinaryExpr('*', Var('element1', '61'), Var('element2', '62'), '63'), [SliceRange(Number(63), Number(0), '67')], '68')), Update(ElemSlice(Var('result', '85'), Var('e', '86'), Number(64), '89'), BinaryExpr('+', ElemSlice(Var('operand3', '91'), Var('e', '92'), Number(64), '95'), Var('product', '96'), '97'))], 1, '100'), Update(VReg(Var('d', '102'), '103'), Var('result', '104'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UMLAL Vd.2D,Vn.2S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'unsigned': True, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_long'),
    'vmlal_s16': ARMSema(intrin='vmlal_s16', inst='SMLAL', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(32)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(32)), '45'), For(Var('e', '102'), Number(0), Number(3), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(16), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '63'), Number(0)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(31), Number(0), '73')], '74')), Update(Var('accum', '85'), BinaryExpr('+', ElemSlice(Var('operand3', '87'), Var('e', '88'), Number(32), '91'), Var('product', '92'), '93')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(32), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SMLAL Vd.4S,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlal_s32': ARMSema(intrin='vmlal_s32', inst='SMLAL', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(64)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(64)), '45'), For(Var('e', '102'), Number(0), Number(1), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(32), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '63'), Number(0)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(63), Number(0), '73')], '74')), Update(Var('accum', '85'), BinaryExpr('+', ElemSlice(Var('operand3', '87'), Var('e', '88'), Number(64), '91'), Var('product', '92'), '93')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(64), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SMLAL Vd.2D,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlal_s8': ARMSema(intrin='vmlal_s8', inst='SMLAL', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(16)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(16)), '45'), For(Var('e', '102'), Number(0), Number(7), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(8), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(8), '63'), Number(0)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(15), Number(0), '73')], '74')), Update(Var('accum', '85'), BinaryExpr('+', ElemSlice(Var('operand3', '87'), Var('e', '88'), Number(16), '91'), Var('product', '92'), '93')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(16), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SMLAL Vd.8H,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'sub_op': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlal_u16': ARMSema(intrin='vmlal_u16', inst='UMLAL', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(32)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(32)), '45'), For(Var('e', '102'), Number(0), Number(3), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(16), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '63'), Number(1)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(31), Number(0), '73')], '74')), Update(Var('accum', '85'), BinaryExpr('+', ElemSlice(Var('operand3', '87'), Var('e', '88'), Number(32), '91'), Var('product', '92'), '93')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(32), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UMLAL Vd.4S,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlal_u32': ARMSema(intrin='vmlal_u32', inst='UMLAL', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(64)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(64)), '45'), For(Var('e', '102'), Number(0), Number(1), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(32), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '63'), Number(1)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(63), Number(0), '73')], '74')), Update(Var('accum', '85'), BinaryExpr('+', ElemSlice(Var('operand3', '87'), Var('e', '88'), Number(64), '91'), Var('product', '92'), '93')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(64), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UMLAL Vd.2D,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlal_u8': ARMSema(intrin='vmlal_u8', inst='UMLAL', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(16)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(16)), '45'), For(Var('e', '102'), Number(0), Number(7), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(8), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(8), '63'), Number(1)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(15), Number(0), '73')], '74')), Update(Var('accum', '85'), BinaryExpr('+', ElemSlice(Var('operand3', '87'), Var('e', '88'), Number(16), '91'), Var('product', '92'), '93')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(16), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UMLAL Vd.8H,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'sub_op': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlaq_n_s16': ARMSema(intrin='vmlaq_n_s16', inst='MLA', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(128)), '25'), VarsDecl([VarDeclUndef(Var('element1', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element2', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('bits', Number(16)), '35'), Update(Var('element2', '36'), Call('UInt', [ElemSlice(Var('operand2', '39'), Number(0), Number(16), '42')], '43')), For(Var('e', '88'), Number(0), Number(7), [Update(Var('element1', '46'), Call('UInt', [ElemSlice(Var('operand1', '49'), Var('e', '50'), Number(16), '52')], '53')), Update(Var('product', '54'), ArrayIndex(BinaryExpr('*', Var('element1', '55'), Var('element2', '56'), '57'), [SliceRange(Number(15), Number(0), '60')], '61')), Update(ElemSlice(Var('result', '76'), Var('e', '77'), Number(16), '79'), BinaryExpr('+', ElemSlice(Var('operand3', '81'), Var('e', '82'), Number(16), '84'), Var('product', '85'), '86'))], 1, '89'), Update(VReg(Var('d', '91'), '92'), Var('result', '93'))], rettype='int16x8_t', ret_is_signed=True, inst_form='MLA Vd.8H,Vn.8H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 128, 'elements': 8, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_int'),
    'vmlaq_n_s32': ARMSema(intrin='vmlaq_n_s32', inst='MLA', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(128)), '25'), VarsDecl([VarDeclUndef(Var('element1', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element2', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('bits', Number(32)), '35'), Update(Var('element2', '36'), Call('UInt', [ElemSlice(Var('operand2', '39'), Number(0), Number(32), '42')], '43')), For(Var('e', '88'), Number(0), Number(3), [Update(Var('element1', '46'), Call('UInt', [ElemSlice(Var('operand1', '49'), Var('e', '50'), Number(32), '52')], '53')), Update(Var('product', '54'), ArrayIndex(BinaryExpr('*', Var('element1', '55'), Var('element2', '56'), '57'), [SliceRange(Number(31), Number(0), '60')], '61')), Update(ElemSlice(Var('result', '76'), Var('e', '77'), Number(32), '79'), BinaryExpr('+', ElemSlice(Var('operand3', '81'), Var('e', '82'), Number(32), '84'), Var('product', '85'), '86'))], 1, '89'), Update(VReg(Var('d', '91'), '92'), Var('result', '93'))], rettype='int32x4_t', ret_is_signed=True, inst_form='MLA Vd.4S,Vn.4S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 128, 'elements': 4, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_int'),
    'vmlaq_n_u16': ARMSema(intrin='vmlaq_n_u16', inst='MLA', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(128)), '25'), VarsDecl([VarDeclUndef(Var('element1', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element2', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('bits', Number(16)), '35'), Update(Var('element2', '36'), Call('UInt', [ElemSlice(Var('operand2', '39'), Number(0), Number(16), '42')], '43')), For(Var('e', '88'), Number(0), Number(7), [Update(Var('element1', '46'), Call('UInt', [ElemSlice(Var('operand1', '49'), Var('e', '50'), Number(16), '52')], '53')), Update(Var('product', '54'), ArrayIndex(BinaryExpr('*', Var('element1', '55'), Var('element2', '56'), '57'), [SliceRange(Number(15), Number(0), '60')], '61')), Update(ElemSlice(Var('result', '76'), Var('e', '77'), Number(16), '79'), BinaryExpr('+', ElemSlice(Var('operand3', '81'), Var('e', '82'), Number(16), '84'), Var('product', '85'), '86'))], 1, '89'), Update(VReg(Var('d', '91'), '92'), Var('result', '93'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='MLA Vd.8H,Vn.8H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 128, 'elements': 8, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_int'),
    'vmlaq_n_u32': ARMSema(intrin='vmlaq_n_u32', inst='MLA', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(128)), '25'), VarsDecl([VarDeclUndef(Var('element1', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element2', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('bits', Number(32)), '35'), Update(Var('element2', '36'), Call('UInt', [ElemSlice(Var('operand2', '39'), Number(0), Number(32), '42')], '43')), For(Var('e', '88'), Number(0), Number(3), [Update(Var('element1', '46'), Call('UInt', [ElemSlice(Var('operand1', '49'), Var('e', '50'), Number(32), '52')], '53')), Update(Var('product', '54'), ArrayIndex(BinaryExpr('*', Var('element1', '55'), Var('element2', '56'), '57'), [SliceRange(Number(31), Number(0), '60')], '61')), Update(ElemSlice(Var('result', '76'), Var('e', '77'), Number(32), '79'), BinaryExpr('+', ElemSlice(Var('operand3', '81'), Var('e', '82'), Number(32), '84'), Var('product', '85'), '86'))], 1, '89'), Update(VReg(Var('d', '91'), '92'), Var('result', '93'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='MLA Vd.4S,Vn.4S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 128, 'elements': 4, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_int'),
    'vmlaq_s16': ARMSema(intrin='vmlaq_s16', inst='MLA', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(128)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(16)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(16)), '37'), For(Var('e', '90'), Number(0), Number(7), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(16), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(16), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(15), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '78'), Var('e', '79'), Number(16), '81'), BinaryExpr('+', ElemSlice(Var('operand3', '83'), Var('e', '84'), Number(16), '86'), Var('product', '87'), '88'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='int16x8_t', ret_is_signed=True, inst_form='MLA Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmlaq_s32': ARMSema(intrin='vmlaq_s32', inst='MLA', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(128)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(32)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(32)), '37'), For(Var('e', '90'), Number(0), Number(3), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(32), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(32), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(31), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '78'), Var('e', '79'), Number(32), '81'), BinaryExpr('+', ElemSlice(Var('operand3', '83'), Var('e', '84'), Number(32), '86'), Var('product', '87'), '88'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='int32x4_t', ret_is_signed=True, inst_form='MLA Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmlaq_s8': ARMSema(intrin='vmlaq_s8', inst='MLA', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(128)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(8)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(8)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(8)), '37'), For(Var('e', '90'), Number(0), Number(15), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(8), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(8), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(7), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '78'), Var('e', '79'), Number(8), '81'), BinaryExpr('+', ElemSlice(Var('operand3', '83'), Var('e', '84'), Number(8), '86'), Var('product', '87'), '88'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='int8x16_t', ret_is_signed=True, inst_form='MLA Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmlaq_u16': ARMSema(intrin='vmlaq_u16', inst='MLA', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(128)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(16)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(16)), '37'), For(Var('e', '90'), Number(0), Number(7), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(16), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(16), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(15), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '78'), Var('e', '79'), Number(16), '81'), BinaryExpr('+', ElemSlice(Var('operand3', '83'), Var('e', '84'), Number(16), '86'), Var('product', '87'), '88'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='MLA Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmlaq_u32': ARMSema(intrin='vmlaq_u32', inst='MLA', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(128)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(32)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(32)), '37'), For(Var('e', '90'), Number(0), Number(3), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(32), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(32), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(31), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '78'), Var('e', '79'), Number(32), '81'), BinaryExpr('+', ElemSlice(Var('operand3', '83'), Var('e', '84'), Number(32), '86'), Var('product', '87'), '88'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='MLA Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmlaq_u8': ARMSema(intrin='vmlaq_u8', inst='MLA', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(128)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(8)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(8)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(8)), '37'), For(Var('e', '90'), Number(0), Number(15), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(8), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(8), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(7), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '78'), Var('e', '79'), Number(8), '81'), BinaryExpr('+', ElemSlice(Var('operand3', '83'), Var('e', '84'), Number(8), '86'), Var('product', '87'), '88'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='MLA Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmls_n_s16': ARMSema(intrin='vmls_n_s16', inst='MLS', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element1', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element2', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('bits', Number(16)), '35'), Update(Var('element2', '36'), Call('UInt', [ElemSlice(Var('operand2', '39'), Number(0), Number(16), '42')], '43')), For(Var('e', '88'), Number(0), Number(3), [Update(Var('element1', '46'), Call('UInt', [ElemSlice(Var('operand1', '49'), Var('e', '50'), Number(16), '52')], '53')), Update(Var('product', '54'), ArrayIndex(BinaryExpr('*', Var('element1', '55'), Var('element2', '56'), '57'), [SliceRange(Number(15), Number(0), '60')], '61')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(16), '67'), BinaryExpr('-', ElemSlice(Var('operand3', '69'), Var('e', '70'), Number(16), '72'), Var('product', '73'), '74'))], 1, '89'), Update(VReg(Var('d', '91'), '92'), Var('result', '93'))], rettype='int16x4_t', ret_is_signed=True, inst_form='MLS Vd.4H,Vn.4H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'elements': 4, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_int'),
    'vmls_n_s32': ARMSema(intrin='vmls_n_s32', inst='MLS', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element1', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element2', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('bits', Number(32)), '35'), Update(Var('element2', '36'), Call('UInt', [ElemSlice(Var('operand2', '39'), Number(0), Number(32), '42')], '43')), For(Var('e', '88'), Number(0), Number(1), [Update(Var('element1', '46'), Call('UInt', [ElemSlice(Var('operand1', '49'), Var('e', '50'), Number(32), '52')], '53')), Update(Var('product', '54'), ArrayIndex(BinaryExpr('*', Var('element1', '55'), Var('element2', '56'), '57'), [SliceRange(Number(31), Number(0), '60')], '61')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(32), '67'), BinaryExpr('-', ElemSlice(Var('operand3', '69'), Var('e', '70'), Number(32), '72'), Var('product', '73'), '74'))], 1, '89'), Update(VReg(Var('d', '91'), '92'), Var('result', '93'))], rettype='int32x2_t', ret_is_signed=True, inst_form='MLS Vd.2S,Vn.2S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'elements': 2, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_int'),
    'vmls_n_u16': ARMSema(intrin='vmls_n_u16', inst='MLS', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element1', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element2', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('bits', Number(16)), '35'), Update(Var('element2', '36'), Call('UInt', [ElemSlice(Var('operand2', '39'), Number(0), Number(16), '42')], '43')), For(Var('e', '88'), Number(0), Number(3), [Update(Var('element1', '46'), Call('UInt', [ElemSlice(Var('operand1', '49'), Var('e', '50'), Number(16), '52')], '53')), Update(Var('product', '54'), ArrayIndex(BinaryExpr('*', Var('element1', '55'), Var('element2', '56'), '57'), [SliceRange(Number(15), Number(0), '60')], '61')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(16), '67'), BinaryExpr('-', ElemSlice(Var('operand3', '69'), Var('e', '70'), Number(16), '72'), Var('product', '73'), '74'))], 1, '89'), Update(VReg(Var('d', '91'), '92'), Var('result', '93'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='MLS Vd.4H,Vn.4H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'elements': 4, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_int'),
    'vmls_n_u32': ARMSema(intrin='vmls_n_u32', inst='MLS', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element1', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element2', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('bits', Number(32)), '35'), Update(Var('element2', '36'), Call('UInt', [ElemSlice(Var('operand2', '39'), Number(0), Number(32), '42')], '43')), For(Var('e', '88'), Number(0), Number(1), [Update(Var('element1', '46'), Call('UInt', [ElemSlice(Var('operand1', '49'), Var('e', '50'), Number(32), '52')], '53')), Update(Var('product', '54'), ArrayIndex(BinaryExpr('*', Var('element1', '55'), Var('element2', '56'), '57'), [SliceRange(Number(31), Number(0), '60')], '61')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(32), '67'), BinaryExpr('-', ElemSlice(Var('operand3', '69'), Var('e', '70'), Number(32), '72'), Var('product', '73'), '74'))], 1, '89'), Update(VReg(Var('d', '91'), '92'), Var('result', '93'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='MLS Vd.2S,Vn.2S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'elements': 2, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_int'),
    'vmls_s16': ARMSema(intrin='vmls_s16', inst='MLS', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(16)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(16)), '37'), For(Var('e', '90'), Number(0), Number(3), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(16), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(16), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(15), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '66'), Var('e', '67'), Number(16), '69'), BinaryExpr('-', ElemSlice(Var('operand3', '71'), Var('e', '72'), Number(16), '74'), Var('product', '75'), '76'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='int16x4_t', ret_is_signed=True, inst_form='MLS Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmls_s32': ARMSema(intrin='vmls_s32', inst='MLS', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(32)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(32)), '37'), For(Var('e', '90'), Number(0), Number(1), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(32), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(32), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(31), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '66'), Var('e', '67'), Number(32), '69'), BinaryExpr('-', ElemSlice(Var('operand3', '71'), Var('e', '72'), Number(32), '74'), Var('product', '75'), '76'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='int32x2_t', ret_is_signed=True, inst_form='MLS Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmls_s8': ARMSema(intrin='vmls_s8', inst='MLS', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(8)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(8)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(8)), '37'), For(Var('e', '90'), Number(0), Number(7), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(8), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(8), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(7), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '66'), Var('e', '67'), Number(8), '69'), BinaryExpr('-', ElemSlice(Var('operand3', '71'), Var('e', '72'), Number(8), '74'), Var('product', '75'), '76'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='int8x8_t', ret_is_signed=True, inst_form='MLS Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmls_u16': ARMSema(intrin='vmls_u16', inst='MLS', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(16)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(16)), '37'), For(Var('e', '90'), Number(0), Number(3), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(16), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(16), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(15), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '66'), Var('e', '67'), Number(16), '69'), BinaryExpr('-', ElemSlice(Var('operand3', '71'), Var('e', '72'), Number(16), '74'), Var('product', '75'), '76'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='MLS Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmls_u32': ARMSema(intrin='vmls_u32', inst='MLS', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(32)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(32)), '37'), For(Var('e', '90'), Number(0), Number(1), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(32), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(32), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(31), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '66'), Var('e', '67'), Number(32), '69'), BinaryExpr('-', ElemSlice(Var('operand3', '71'), Var('e', '72'), Number(32), '74'), Var('product', '75'), '76'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='MLS Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmls_u8': ARMSema(intrin='vmls_u8', inst='MLS', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(64)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(8)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(8)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(8)), '37'), For(Var('e', '90'), Number(0), Number(7), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(8), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(8), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(7), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '66'), Var('e', '67'), Number(8), '69'), BinaryExpr('-', ElemSlice(Var('operand3', '71'), Var('e', '72'), Number(8), '74'), Var('product', '75'), '76'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='MLS Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmlsl_high_n_s16': ARMSema(intrin='vmlsl_high_n_s16', inst='SMLSL2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(32)), '39'), Update(Var('element2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Number(0), Number(16), '46'), Number(0)], '48')), For(Var('e', '99'), Number(0), Number(3), [Update(Var('element1', '51'), Call('Int', [ElemSlice(Var('operand1', '54'), Var('e', '55'), Number(16), '57'), Number(0)], '59')), Update(Var('product', '60'), ArrayIndex(BinaryExpr('*', Var('element1', '61'), Var('element2', '62'), '63'), [SliceRange(Number(31), Number(0), '67')], '68')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(32), '75'), BinaryExpr('-', ElemSlice(Var('operand3', '77'), Var('e', '78'), Number(32), '81'), Var('product', '82'), '83'))], 1, '100'), Update(VReg(Var('d', '102'), '103'), Var('result', '104'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SMLSL2 Vd.4S,Vn.8H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'unsigned': False, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_long'),
    'vmlsl_high_n_s32': ARMSema(intrin='vmlsl_high_n_s32', inst='SMLSL2', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(64)), '39'), Update(Var('element2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Number(0), Number(32), '46'), Number(0)], '48')), For(Var('e', '99'), Number(0), Number(1), [Update(Var('element1', '51'), Call('Int', [ElemSlice(Var('operand1', '54'), Var('e', '55'), Number(32), '57'), Number(0)], '59')), Update(Var('product', '60'), ArrayIndex(BinaryExpr('*', Var('element1', '61'), Var('element2', '62'), '63'), [SliceRange(Number(63), Number(0), '67')], '68')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(64), '75'), BinaryExpr('-', ElemSlice(Var('operand3', '77'), Var('e', '78'), Number(64), '81'), Var('product', '82'), '83'))], 1, '100'), Update(VReg(Var('d', '102'), '103'), Var('result', '104'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SMLSL2 Vd.2D,Vn.4S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'unsigned': False, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_long'),
    'vmlsl_high_n_u16': ARMSema(intrin='vmlsl_high_n_u16', inst='UMLSL2', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(32)), '39'), Update(Var('element2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Number(0), Number(16), '46'), Number(1)], '48')), For(Var('e', '99'), Number(0), Number(3), [Update(Var('element1', '51'), Call('Int', [ElemSlice(Var('operand1', '54'), Var('e', '55'), Number(16), '57'), Number(1)], '59')), Update(Var('product', '60'), ArrayIndex(BinaryExpr('*', Var('element1', '61'), Var('element2', '62'), '63'), [SliceRange(Number(31), Number(0), '67')], '68')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(32), '75'), BinaryExpr('-', ElemSlice(Var('operand3', '77'), Var('e', '78'), Number(32), '81'), Var('product', '82'), '83'))], 1, '100'), Update(VReg(Var('d', '102'), '103'), Var('result', '104'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UMLSL2 Vd.4S,Vn.8H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'unsigned': True, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_long'),
    'vmlsl_high_n_u32': ARMSema(intrin='vmlsl_high_n_u32', inst='UMLSL2', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(64)), '39'), Update(Var('element2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Number(0), Number(32), '46'), Number(1)], '48')), For(Var('e', '99'), Number(0), Number(1), [Update(Var('element1', '51'), Call('Int', [ElemSlice(Var('operand1', '54'), Var('e', '55'), Number(32), '57'), Number(1)], '59')), Update(Var('product', '60'), ArrayIndex(BinaryExpr('*', Var('element1', '61'), Var('element2', '62'), '63'), [SliceRange(Number(63), Number(0), '67')], '68')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(64), '75'), BinaryExpr('-', ElemSlice(Var('operand3', '77'), Var('e', '78'), Number(64), '81'), Var('product', '82'), '83'))], 1, '100'), Update(VReg(Var('d', '102'), '103'), Var('result', '104'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UMLSL2 Vd.2D,Vn.4S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'unsigned': True, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_long'),
    'vmlsl_high_s16': ARMSema(intrin='vmlsl_high_s16', inst='SMLSL2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(32)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(32)), '45'), For(Var('e', '102'), Number(0), Number(3), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(16), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '63'), Number(0)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(31), Number(0), '73')], '74')), Update(Var('accum', '76'), BinaryExpr('-', ElemSlice(Var('operand3', '78'), Var('e', '79'), Number(32), '82'), Var('product', '83'), '84')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(32), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SMLSL2 Vd.4S,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlsl_high_s32': ARMSema(intrin='vmlsl_high_s32', inst='SMLSL2', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(64)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(64)), '45'), For(Var('e', '102'), Number(0), Number(1), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(32), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '63'), Number(0)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(63), Number(0), '73')], '74')), Update(Var('accum', '76'), BinaryExpr('-', ElemSlice(Var('operand3', '78'), Var('e', '79'), Number(64), '82'), Var('product', '83'), '84')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(64), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SMLSL2 Vd.2D,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlsl_high_s8': ARMSema(intrin='vmlsl_high_s8', inst='SMLSL2', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(16)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(16)), '45'), For(Var('e', '102'), Number(0), Number(7), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(8), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(8), '63'), Number(0)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(15), Number(0), '73')], '74')), Update(Var('accum', '76'), BinaryExpr('-', ElemSlice(Var('operand3', '78'), Var('e', '79'), Number(16), '82'), Var('product', '83'), '84')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(16), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SMLSL2 Vd.8H,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'sub_op': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlsl_high_u16': ARMSema(intrin='vmlsl_high_u16', inst='UMLSL2', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(32)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(32)), '45'), For(Var('e', '102'), Number(0), Number(3), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(16), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '63'), Number(1)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(31), Number(0), '73')], '74')), Update(Var('accum', '76'), BinaryExpr('-', ElemSlice(Var('operand3', '78'), Var('e', '79'), Number(32), '82'), Var('product', '83'), '84')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(32), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UMLSL2 Vd.4S,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlsl_high_u32': ARMSema(intrin='vmlsl_high_u32', inst='UMLSL2', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(64)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(64)), '45'), For(Var('e', '102'), Number(0), Number(1), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(32), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '63'), Number(1)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(63), Number(0), '73')], '74')), Update(Var('accum', '76'), BinaryExpr('-', ElemSlice(Var('operand3', '78'), Var('e', '79'), Number(64), '82'), Var('product', '83'), '84')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(64), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UMLSL2 Vd.2D,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlsl_high_u8': ARMSema(intrin='vmlsl_high_u8', inst='UMLSL2', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(16)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(16)), '45'), For(Var('e', '102'), Number(0), Number(7), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(8), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(8), '63'), Number(1)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(15), Number(0), '73')], '74')), Update(Var('accum', '76'), BinaryExpr('-', ElemSlice(Var('operand3', '78'), Var('e', '79'), Number(16), '82'), Var('product', '83'), '84')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(16), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UMLSL2 Vd.8H,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'sub_op': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlsl_n_s16': ARMSema(intrin='vmlsl_n_s16', inst='SMLSL', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(32)), '39'), Update(Var('element2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Number(0), Number(16), '46'), Number(0)], '48')), For(Var('e', '99'), Number(0), Number(3), [Update(Var('element1', '51'), Call('Int', [ElemSlice(Var('operand1', '54'), Var('e', '55'), Number(16), '57'), Number(0)], '59')), Update(Var('product', '60'), ArrayIndex(BinaryExpr('*', Var('element1', '61'), Var('element2', '62'), '63'), [SliceRange(Number(31), Number(0), '67')], '68')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(32), '75'), BinaryExpr('-', ElemSlice(Var('operand3', '77'), Var('e', '78'), Number(32), '81'), Var('product', '82'), '83'))], 1, '100'), Update(VReg(Var('d', '102'), '103'), Var('result', '104'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SMLSL Vd.4S,Vn.4H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'unsigned': False, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_long'),
    'vmlsl_n_s32': ARMSema(intrin='vmlsl_n_s32', inst='SMLSL', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(64)), '39'), Update(Var('element2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Number(0), Number(32), '46'), Number(0)], '48')), For(Var('e', '99'), Number(0), Number(1), [Update(Var('element1', '51'), Call('Int', [ElemSlice(Var('operand1', '54'), Var('e', '55'), Number(32), '57'), Number(0)], '59')), Update(Var('product', '60'), ArrayIndex(BinaryExpr('*', Var('element1', '61'), Var('element2', '62'), '63'), [SliceRange(Number(63), Number(0), '67')], '68')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(64), '75'), BinaryExpr('-', ElemSlice(Var('operand3', '77'), Var('e', '78'), Number(64), '81'), Var('product', '82'), '83'))], 1, '100'), Update(VReg(Var('d', '102'), '103'), Var('result', '104'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SMLSL Vd.2D,Vn.2S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'unsigned': False, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_long'),
    'vmlsl_n_u16': ARMSema(intrin='vmlsl_n_u16', inst='UMLSL', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(32)), '39'), Update(Var('element2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Number(0), Number(16), '46'), Number(1)], '48')), For(Var('e', '99'), Number(0), Number(3), [Update(Var('element1', '51'), Call('Int', [ElemSlice(Var('operand1', '54'), Var('e', '55'), Number(16), '57'), Number(1)], '59')), Update(Var('product', '60'), ArrayIndex(BinaryExpr('*', Var('element1', '61'), Var('element2', '62'), '63'), [SliceRange(Number(31), Number(0), '67')], '68')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(32), '75'), BinaryExpr('-', ElemSlice(Var('operand3', '77'), Var('e', '78'), Number(32), '81'), Var('product', '82'), '83'))], 1, '100'), Update(VReg(Var('d', '102'), '103'), Var('result', '104'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UMLSL Vd.4S,Vn.4H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'unsigned': True, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_long'),
    'vmlsl_n_u32': ARMSema(intrin='vmlsl_n_u32', inst='UMLSL', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(64)), '39'), Update(Var('element2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Number(0), Number(32), '46'), Number(1)], '48')), For(Var('e', '99'), Number(0), Number(1), [Update(Var('element1', '51'), Call('Int', [ElemSlice(Var('operand1', '54'), Var('e', '55'), Number(32), '57'), Number(1)], '59')), Update(Var('product', '60'), ArrayIndex(BinaryExpr('*', Var('element1', '61'), Var('element2', '62'), '63'), [SliceRange(Number(63), Number(0), '67')], '68')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(64), '75'), BinaryExpr('-', ElemSlice(Var('operand3', '77'), Var('e', '78'), Number(64), '81'), Var('product', '82'), '83'))], 1, '100'), Update(VReg(Var('d', '102'), '103'), Var('result', '104'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UMLSL Vd.2D,Vn.2S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'unsigned': True, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_long'),
    'vmlsl_s16': ARMSema(intrin='vmlsl_s16', inst='SMLSL', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(32)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(32)), '45'), For(Var('e', '102'), Number(0), Number(3), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(16), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '63'), Number(0)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(31), Number(0), '73')], '74')), Update(Var('accum', '76'), BinaryExpr('-', ElemSlice(Var('operand3', '78'), Var('e', '79'), Number(32), '82'), Var('product', '83'), '84')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(32), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SMLSL Vd.4S,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlsl_s32': ARMSema(intrin='vmlsl_s32', inst='SMLSL', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(64)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(64)), '45'), For(Var('e', '102'), Number(0), Number(1), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(32), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '63'), Number(0)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(63), Number(0), '73')], '74')), Update(Var('accum', '76'), BinaryExpr('-', ElemSlice(Var('operand3', '78'), Var('e', '79'), Number(64), '82'), Var('product', '83'), '84')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(64), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SMLSL Vd.2D,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlsl_s8': ARMSema(intrin='vmlsl_s8', inst='SMLSL', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(16)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(16)), '45'), For(Var('e', '102'), Number(0), Number(7), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(8), '54'), Number(0)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(8), '63'), Number(0)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(15), Number(0), '73')], '74')), Update(Var('accum', '76'), BinaryExpr('-', ElemSlice(Var('operand3', '78'), Var('e', '79'), Number(16), '82'), Var('product', '83'), '84')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(16), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SMLSL Vd.8H,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'sub_op': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlsl_u16': ARMSema(intrin='vmlsl_u16', inst='UMLSL', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(32)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(32)), '45'), For(Var('e', '102'), Number(0), Number(3), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(16), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '63'), Number(1)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(31), Number(0), '73')], '74')), Update(Var('accum', '76'), BinaryExpr('-', ElemSlice(Var('operand3', '78'), Var('e', '79'), Number(32), '82'), Var('product', '83'), '84')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(32), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UMLSL Vd.4S,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlsl_u32': ARMSema(intrin='vmlsl_u32', inst='UMLSL', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(64)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(64)), '45'), For(Var('e', '102'), Number(0), Number(1), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(32), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '63'), Number(1)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(63), Number(0), '73')], '74')), Update(Var('accum', '76'), BinaryExpr('-', ElemSlice(Var('operand3', '78'), Var('e', '79'), Number(64), '82'), Var('product', '83'), '84')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(64), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UMLSL Vd.2D,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlsl_u8': ARMSema(intrin='vmlsl_u8', inst='UMLSL', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(16)), '40'), VarsDecl([VarDeclUndef(Var('accum', '43'), '44')], ('bits', Number(16)), '45'), For(Var('e', '102'), Number(0), Number(7), [Update(Var('element1', '48'), Call('Int', [ElemSlice(Var('operand1', '51'), Var('e', '52'), Number(8), '54'), Number(1)], '56')), Update(Var('element2', '57'), Call('Int', [ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(8), '63'), Number(1)], '65')), Update(Var('product', '66'), ArrayIndex(BinaryExpr('*', Var('element1', '67'), Var('element2', '68'), '69'), [SliceRange(Number(15), Number(0), '73')], '74')), Update(Var('accum', '76'), BinaryExpr('-', ElemSlice(Var('operand3', '78'), Var('e', '79'), Number(16), '82'), Var('product', '83'), '84')), Update(ElemSlice(Var('result', '96'), Var('e', '97'), Number(16), '100'), Var('accum', '101'))], 1, '103'), Update(VReg(Var('d', '105'), '106'), Var('result', '107'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UMLSL Vd.8H,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'sub_op': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_accum'),
    'vmlsq_n_s16': ARMSema(intrin='vmlsq_n_s16', inst='MLS', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(128)), '25'), VarsDecl([VarDeclUndef(Var('element1', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element2', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('bits', Number(16)), '35'), Update(Var('element2', '36'), Call('UInt', [ElemSlice(Var('operand2', '39'), Number(0), Number(16), '42')], '43')), For(Var('e', '88'), Number(0), Number(7), [Update(Var('element1', '46'), Call('UInt', [ElemSlice(Var('operand1', '49'), Var('e', '50'), Number(16), '52')], '53')), Update(Var('product', '54'), ArrayIndex(BinaryExpr('*', Var('element1', '55'), Var('element2', '56'), '57'), [SliceRange(Number(15), Number(0), '60')], '61')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(16), '67'), BinaryExpr('-', ElemSlice(Var('operand3', '69'), Var('e', '70'), Number(16), '72'), Var('product', '73'), '74'))], 1, '89'), Update(VReg(Var('d', '91'), '92'), Var('result', '93'))], rettype='int16x8_t', ret_is_signed=True, inst_form='MLS Vd.8H,Vn.8H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 128, 'elements': 8, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_int'),
    'vmlsq_n_s32': ARMSema(intrin='vmlsq_n_s32', inst='MLS', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(128)), '25'), VarsDecl([VarDeclUndef(Var('element1', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element2', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('bits', Number(32)), '35'), Update(Var('element2', '36'), Call('UInt', [ElemSlice(Var('operand2', '39'), Number(0), Number(32), '42')], '43')), For(Var('e', '88'), Number(0), Number(3), [Update(Var('element1', '46'), Call('UInt', [ElemSlice(Var('operand1', '49'), Var('e', '50'), Number(32), '52')], '53')), Update(Var('product', '54'), ArrayIndex(BinaryExpr('*', Var('element1', '55'), Var('element2', '56'), '57'), [SliceRange(Number(31), Number(0), '60')], '61')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(32), '67'), BinaryExpr('-', ElemSlice(Var('operand3', '69'), Var('e', '70'), Number(32), '72'), Var('product', '73'), '74'))], 1, '89'), Update(VReg(Var('d', '91'), '92'), Var('result', '93'))], rettype='int32x4_t', ret_is_signed=True, inst_form='MLS Vd.4S,Vn.4S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 128, 'elements': 4, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_int'),
    'vmlsq_n_u16': ARMSema(intrin='vmlsq_n_u16', inst='MLS', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(128)), '25'), VarsDecl([VarDeclUndef(Var('element1', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element2', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('bits', Number(16)), '35'), Update(Var('element2', '36'), Call('UInt', [ElemSlice(Var('operand2', '39'), Number(0), Number(16), '42')], '43')), For(Var('e', '88'), Number(0), Number(7), [Update(Var('element1', '46'), Call('UInt', [ElemSlice(Var('operand1', '49'), Var('e', '50'), Number(16), '52')], '53')), Update(Var('product', '54'), ArrayIndex(BinaryExpr('*', Var('element1', '55'), Var('element2', '56'), '57'), [SliceRange(Number(15), Number(0), '60')], '61')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(16), '67'), BinaryExpr('-', ElemSlice(Var('operand3', '69'), Var('e', '70'), Number(16), '72'), Var('product', '73'), '74'))], 1, '89'), Update(VReg(Var('d', '91'), '92'), Var('result', '93'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='MLS Vd.8H,Vn.8H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 128, 'elements': 8, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_int'),
    'vmlsq_n_u32': ARMSema(intrin='vmlsq_n_u32', inst='MLS', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(128)), '25'), VarsDecl([VarDeclUndef(Var('element1', '26'), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element2', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('bits', Number(32)), '35'), Update(Var('element2', '36'), Call('UInt', [ElemSlice(Var('operand2', '39'), Number(0), Number(32), '42')], '43')), For(Var('e', '88'), Number(0), Number(3), [Update(Var('element1', '46'), Call('UInt', [ElemSlice(Var('operand1', '49'), Var('e', '50'), Number(32), '52')], '53')), Update(Var('product', '54'), ArrayIndex(BinaryExpr('*', Var('element1', '55'), Var('element2', '56'), '57'), [SliceRange(Number(31), Number(0), '60')], '61')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(32), '67'), BinaryExpr('-', ElemSlice(Var('operand3', '69'), Var('e', '70'), Number(32), '72'), Var('product', '73'), '74'))], 1, '89'), Update(VReg(Var('d', '91'), '92'), Var('result', '93'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='MLS Vd.4S,Vn.4S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 128, 'elements': 4, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_int'),
    'vmlsq_s16': ARMSema(intrin='vmlsq_s16', inst='MLS', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(128)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(16)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(16)), '37'), For(Var('e', '90'), Number(0), Number(7), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(16), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(16), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(15), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '66'), Var('e', '67'), Number(16), '69'), BinaryExpr('-', ElemSlice(Var('operand3', '71'), Var('e', '72'), Number(16), '74'), Var('product', '75'), '76'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='int16x8_t', ret_is_signed=True, inst_form='MLS Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmlsq_s32': ARMSema(intrin='vmlsq_s32', inst='MLS', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(128)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(32)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(32)), '37'), For(Var('e', '90'), Number(0), Number(3), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(32), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(32), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(31), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '66'), Var('e', '67'), Number(32), '69'), BinaryExpr('-', ElemSlice(Var('operand3', '71'), Var('e', '72'), Number(32), '74'), Var('product', '75'), '76'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='int32x4_t', ret_is_signed=True, inst_form='MLS Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmlsq_s8': ARMSema(intrin='vmlsq_s8', inst='MLS', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(128)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(8)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(8)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(8)), '37'), For(Var('e', '90'), Number(0), Number(15), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(8), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(8), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(7), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '66'), Var('e', '67'), Number(8), '69'), BinaryExpr('-', ElemSlice(Var('operand3', '71'), Var('e', '72'), Number(8), '74'), Var('product', '75'), '76'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='int8x16_t', ret_is_signed=True, inst_form='MLS Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmlsq_u16': ARMSema(intrin='vmlsq_u16', inst='MLS', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(128)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(16)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(16)), '37'), For(Var('e', '90'), Number(0), Number(7), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(16), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(16), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(15), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '66'), Var('e', '67'), Number(16), '69'), BinaryExpr('-', ElemSlice(Var('operand3', '71'), Var('e', '72'), Number(16), '74'), Var('product', '75'), '76'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='MLS Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmlsq_u32': ARMSema(intrin='vmlsq_u32', inst='MLS', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(128)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(32)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(32)), '37'), For(Var('e', '90'), Number(0), Number(3), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(32), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(32), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(31), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '66'), Var('e', '67'), Number(32), '69'), BinaryExpr('-', ElemSlice(Var('operand3', '71'), Var('e', '72'), Number(32), '74'), Var('product', '75'), '76'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='MLS Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmlsq_u8': ARMSema(intrin='vmlsq_u8', inst='MLS', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='c', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclInit(Var('operand3', '19'), VReg(Var('d', '17'), '18'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('result', '23'), '24')], ('bits', Number(128)), '25'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('bits', Number(8)), '29'), VarsDecl([VarDeclUndef(Var('element2', '31'), '32')], ('bits', Number(8)), '33'), VarsDecl([VarDeclUndef(Var('product', '35'), '36')], ('bits', Number(8)), '37'), For(Var('e', '90'), Number(0), Number(15), [Update(Var('element1', '40'), ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(8), '45')), Update(Var('element2', '46'), ElemSlice(Var('operand2', '48'), Var('e', '49'), Number(8), '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '54')], '55'), Call('UInt', [Var('element2', '57')], '58'), '59'), [SliceRange(Number(7), Number(0), '62')], '63')), Update(ElemSlice(Var('result', '66'), Var('e', '67'), Number(8), '69'), BinaryExpr('-', ElemSlice(Var('operand3', '71'), Var('e', '72'), Number(8), '74'), Var('product', '75'), '76'))], 1, '91'), Update(VReg(Var('d', '93'), '94'), Var('result', '95'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='MLS Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_accum'),
    'vmov_n_s16': ARMSema(intrin='vmov_n_s16', inst='DUP', params=[Parameter(name='value', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), For(Var('e', '20'), Number(0), Number(3), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(16), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='int16x4_t', ret_is_signed=True, inst_form='DUP Vd.4H,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 1, 'esize': 16, 'datasize': 64, 'elements': 4}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vmov_n_s32': ARMSema(intrin='vmov_n_s32', inst='DUP', params=[Parameter(name='value', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), For(Var('e', '20'), Number(0), Number(1), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(32), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='int32x2_t', ret_is_signed=True, inst_form='DUP Vd.2S,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 2, 'esize': 32, 'datasize': 64, 'elements': 2}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vmov_n_s8': ARMSema(intrin='vmov_n_s8', inst='DUP', params=[Parameter(name='value', type='int8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), For(Var('e', '20'), Number(0), Number(7), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(8), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='int8x8_t', ret_is_signed=True, inst_form='DUP Vd.8B,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 0, 'esize': 8, 'datasize': 64, 'elements': 8}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vmov_n_u16': ARMSema(intrin='vmov_n_u16', inst='DUP', params=[Parameter(name='value', type='uint16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), For(Var('e', '20'), Number(0), Number(3), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(16), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='DUP Vd.4H,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 1, 'esize': 16, 'datasize': 64, 'elements': 4}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vmov_n_u32': ARMSema(intrin='vmov_n_u32', inst='DUP', params=[Parameter(name='value', type='uint32_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), For(Var('e', '20'), Number(0), Number(1), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(32), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='DUP Vd.2S,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 2, 'esize': 32, 'datasize': 64, 'elements': 2}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vmov_n_u8': ARMSema(intrin='vmov_n_u8', inst='DUP', params=[Parameter(name='value', type='uint8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), For(Var('e', '20'), Number(0), Number(7), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(8), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='DUP Vd.8B,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 0, 'esize': 8, 'datasize': 64, 'elements': 8}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vmovl_high_s16': ARMSema(intrin='vmovl_high_s16', inst='SSHLL2', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(3), [Update(Var('element', '19'), Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(16), '25'), Number(0)], '27')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(32), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(31), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SSHLL2 Vd.4S,Vn.8H,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'shift': 0, 'unsigned': False}, belongs_to='aarch64_vector_shift_left_long'),
    'vmovl_high_s32': ARMSema(intrin='vmovl_high_s32', inst='SSHLL2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(1), [Update(Var('element', '19'), Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(32), '25'), Number(0)], '27')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(64), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(63), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SSHLL2 Vd.2D,Vn.4S,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'shift': 0, 'unsigned': False}, belongs_to='aarch64_vector_shift_left_long'),
    'vmovl_high_s8': ARMSema(intrin='vmovl_high_s8', inst='SSHLL2', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(7), [Update(Var('element', '19'), Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(8), '25'), Number(0)], '27')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(16), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(15), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SSHLL2 Vd.8H,Vn.16B,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'shift': 0, 'unsigned': False}, belongs_to='aarch64_vector_shift_left_long'),
    'vmovl_high_u16': ARMSema(intrin='vmovl_high_u16', inst='USHLL2', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(3), [Update(Var('element', '19'), Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(16), '25'), Number(1)], '27')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(32), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(31), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='USHLL2 Vd.4S,Vn.8H,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'shift': 0, 'unsigned': True}, belongs_to='aarch64_vector_shift_left_long'),
    'vmovl_high_u32': ARMSema(intrin='vmovl_high_u32', inst='USHLL2', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(1), [Update(Var('element', '19'), Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(32), '25'), Number(1)], '27')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(64), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(63), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='USHLL2 Vd.2D,Vn.4S,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'shift': 0, 'unsigned': True}, belongs_to='aarch64_vector_shift_left_long'),
    'vmovl_high_u8': ARMSema(intrin='vmovl_high_u8', inst='USHLL2', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(7), [Update(Var('element', '19'), Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(8), '25'), Number(1)], '27')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(16), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(15), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='USHLL2 Vd.8H,Vn.16B,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'shift': 0, 'unsigned': True}, belongs_to='aarch64_vector_shift_left_long'),
    'vmovl_s16': ARMSema(intrin='vmovl_s16', inst='SSHLL', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(3), [Update(Var('element', '19'), Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(16), '25'), Number(0)], '27')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(32), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(31), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SSHLL Vd.4S,Vn.4H,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'shift': 0, 'unsigned': False}, belongs_to='aarch64_vector_shift_left_long'),
    'vmovl_s32': ARMSema(intrin='vmovl_s32', inst='SSHLL', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(1), [Update(Var('element', '19'), Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(32), '25'), Number(0)], '27')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(64), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(63), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SSHLL Vd.2D,Vn.2S,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'shift': 0, 'unsigned': False}, belongs_to='aarch64_vector_shift_left_long'),
    'vmovl_s8': ARMSema(intrin='vmovl_s8', inst='SSHLL', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(7), [Update(Var('element', '19'), Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(8), '25'), Number(0)], '27')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(16), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(15), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SSHLL Vd.8H,Vn.8B,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'shift': 0, 'unsigned': False}, belongs_to='aarch64_vector_shift_left_long'),
    'vmovl_u16': ARMSema(intrin='vmovl_u16', inst='USHLL', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(3), [Update(Var('element', '19'), Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(16), '25'), Number(1)], '27')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(32), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(31), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='USHLL Vd.4S,Vn.4H,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'shift': 0, 'unsigned': True}, belongs_to='aarch64_vector_shift_left_long'),
    'vmovl_u32': ARMSema(intrin='vmovl_u32', inst='USHLL', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(1), [Update(Var('element', '19'), Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(32), '25'), Number(1)], '27')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(64), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(63), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='USHLL Vd.2D,Vn.2S,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'shift': 0, 'unsigned': True}, belongs_to='aarch64_vector_shift_left_long'),
    'vmovl_u8': ARMSema(intrin='vmovl_u8', inst='USHLL', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(7), [Update(Var('element', '19'), Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(8), '25'), Number(1)], '27')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(16), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(15), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='USHLL Vd.8H,Vn.8B,#0', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'shift': 0, 'unsigned': True}, belongs_to='aarch64_vector_shift_left_long'),
    'vmovn_high_s16': ARMSema(intrin='vmovn_high_s16', inst='XTN2', params=[Parameter(name='r', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(16)), '17'), For(Var('e', '37'), Number(0), Number(7), [Update(Var('element', '20'), ElemSlice(Var('operand', '22'), Var('e', '23'), Number(16), '26')), Update(ElemSlice(Var('result', '28'), Var('e', '29'), Number(8), '31'), ArrayIndex(Var('element', '32'), [SliceRange(Number(7), Number(0), '35')], '36'))], 1, '38'), Update(VPartReg(Var('d', '40'), Number(1), '42'), Var('result', '43'))], rettype='int8x16_t', ret_is_signed=True, inst_form='XTN2 Vd.16B,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8}, belongs_to='aarch64_vector_arithmetic_unary_extract_nosat'),
    'vmovn_high_s32': ARMSema(intrin='vmovn_high_s32', inst='XTN2', params=[Parameter(name='r', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(32)), '17'), For(Var('e', '37'), Number(0), Number(3), [Update(Var('element', '20'), ElemSlice(Var('operand', '22'), Var('e', '23'), Number(32), '26')), Update(ElemSlice(Var('result', '28'), Var('e', '29'), Number(16), '31'), ArrayIndex(Var('element', '32'), [SliceRange(Number(15), Number(0), '35')], '36'))], 1, '38'), Update(VPartReg(Var('d', '40'), Number(1), '42'), Var('result', '43'))], rettype='int16x8_t', ret_is_signed=True, inst_form='XTN2 Vd.8H,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4}, belongs_to='aarch64_vector_arithmetic_unary_extract_nosat'),
    'vmovn_high_s64': ARMSema(intrin='vmovn_high_s64', inst='XTN2', params=[Parameter(name='r', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(64)), '17'), For(Var('e', '37'), Number(0), Number(1), [Update(Var('element', '20'), ElemSlice(Var('operand', '22'), Var('e', '23'), Number(64), '26')), Update(ElemSlice(Var('result', '28'), Var('e', '29'), Number(32), '31'), ArrayIndex(Var('element', '32'), [SliceRange(Number(31), Number(0), '35')], '36'))], 1, '38'), Update(VPartReg(Var('d', '40'), Number(1), '42'), Var('result', '43'))], rettype='int32x4_t', ret_is_signed=True, inst_form='XTN2 Vd.4S,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2}, belongs_to='aarch64_vector_arithmetic_unary_extract_nosat'),
    'vmovn_high_u16': ARMSema(intrin='vmovn_high_u16', inst='XTN2', params=[Parameter(name='r', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(16)), '17'), For(Var('e', '37'), Number(0), Number(7), [Update(Var('element', '20'), ElemSlice(Var('operand', '22'), Var('e', '23'), Number(16), '26')), Update(ElemSlice(Var('result', '28'), Var('e', '29'), Number(8), '31'), ArrayIndex(Var('element', '32'), [SliceRange(Number(7), Number(0), '35')], '36'))], 1, '38'), Update(VPartReg(Var('d', '40'), Number(1), '42'), Var('result', '43'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='XTN2 Vd.16B,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8}, belongs_to='aarch64_vector_arithmetic_unary_extract_nosat'),
    'vmovn_high_u32': ARMSema(intrin='vmovn_high_u32', inst='XTN2', params=[Parameter(name='r', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(32)), '17'), For(Var('e', '37'), Number(0), Number(3), [Update(Var('element', '20'), ElemSlice(Var('operand', '22'), Var('e', '23'), Number(32), '26')), Update(ElemSlice(Var('result', '28'), Var('e', '29'), Number(16), '31'), ArrayIndex(Var('element', '32'), [SliceRange(Number(15), Number(0), '35')], '36'))], 1, '38'), Update(VPartReg(Var('d', '40'), Number(1), '42'), Var('result', '43'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='XTN2 Vd.8H,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4}, belongs_to='aarch64_vector_arithmetic_unary_extract_nosat'),
    'vmovn_high_u64': ARMSema(intrin='vmovn_high_u64', inst='XTN2', params=[Parameter(name='r', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(64)), '17'), For(Var('e', '37'), Number(0), Number(1), [Update(Var('element', '20'), ElemSlice(Var('operand', '22'), Var('e', '23'), Number(64), '26')), Update(ElemSlice(Var('result', '28'), Var('e', '29'), Number(32), '31'), ArrayIndex(Var('element', '32'), [SliceRange(Number(31), Number(0), '35')], '36'))], 1, '38'), Update(VPartReg(Var('d', '40'), Number(1), '42'), Var('result', '43'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='XTN2 Vd.4S,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2}, belongs_to='aarch64_vector_arithmetic_unary_extract_nosat'),
    'vmovn_s16': ARMSema(intrin='vmovn_s16', inst='XTN', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(16)), '17'), For(Var('e', '37'), Number(0), Number(7), [Update(Var('element', '20'), ElemSlice(Var('operand', '22'), Var('e', '23'), Number(16), '26')), Update(ElemSlice(Var('result', '28'), Var('e', '29'), Number(8), '31'), ArrayIndex(Var('element', '32'), [SliceRange(Number(7), Number(0), '35')], '36'))], 1, '38'), Update(VPartReg(Var('d', '40'), Number(0), '42'), Var('result', '43'))], rettype='int8x8_t', ret_is_signed=True, inst_form='XTN Vd.8B,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8}, belongs_to='aarch64_vector_arithmetic_unary_extract_nosat'),
    'vmovn_s32': ARMSema(intrin='vmovn_s32', inst='XTN', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(32)), '17'), For(Var('e', '37'), Number(0), Number(3), [Update(Var('element', '20'), ElemSlice(Var('operand', '22'), Var('e', '23'), Number(32), '26')), Update(ElemSlice(Var('result', '28'), Var('e', '29'), Number(16), '31'), ArrayIndex(Var('element', '32'), [SliceRange(Number(15), Number(0), '35')], '36'))], 1, '38'), Update(VPartReg(Var('d', '40'), Number(0), '42'), Var('result', '43'))], rettype='int16x4_t', ret_is_signed=True, inst_form='XTN Vd.4H,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4}, belongs_to='aarch64_vector_arithmetic_unary_extract_nosat'),
    'vmovn_s64': ARMSema(intrin='vmovn_s64', inst='XTN', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(64)), '17'), For(Var('e', '37'), Number(0), Number(1), [Update(Var('element', '20'), ElemSlice(Var('operand', '22'), Var('e', '23'), Number(64), '26')), Update(ElemSlice(Var('result', '28'), Var('e', '29'), Number(32), '31'), ArrayIndex(Var('element', '32'), [SliceRange(Number(31), Number(0), '35')], '36'))], 1, '38'), Update(VPartReg(Var('d', '40'), Number(0), '42'), Var('result', '43'))], rettype='int32x2_t', ret_is_signed=True, inst_form='XTN Vd.2S,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2}, belongs_to='aarch64_vector_arithmetic_unary_extract_nosat'),
    'vmovn_u16': ARMSema(intrin='vmovn_u16', inst='XTN', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(16)), '17'), For(Var('e', '37'), Number(0), Number(7), [Update(Var('element', '20'), ElemSlice(Var('operand', '22'), Var('e', '23'), Number(16), '26')), Update(ElemSlice(Var('result', '28'), Var('e', '29'), Number(8), '31'), ArrayIndex(Var('element', '32'), [SliceRange(Number(7), Number(0), '35')], '36'))], 1, '38'), Update(VPartReg(Var('d', '40'), Number(0), '42'), Var('result', '43'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='XTN Vd.8B,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8}, belongs_to='aarch64_vector_arithmetic_unary_extract_nosat'),
    'vmovn_u32': ARMSema(intrin='vmovn_u32', inst='XTN', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(32)), '17'), For(Var('e', '37'), Number(0), Number(3), [Update(Var('element', '20'), ElemSlice(Var('operand', '22'), Var('e', '23'), Number(32), '26')), Update(ElemSlice(Var('result', '28'), Var('e', '29'), Number(16), '31'), ArrayIndex(Var('element', '32'), [SliceRange(Number(15), Number(0), '35')], '36'))], 1, '38'), Update(VPartReg(Var('d', '40'), Number(0), '42'), Var('result', '43'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='XTN Vd.4H,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4}, belongs_to='aarch64_vector_arithmetic_unary_extract_nosat'),
    'vmovn_u64': ARMSema(intrin='vmovn_u64', inst='XTN', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(64)), '17'), For(Var('e', '37'), Number(0), Number(1), [Update(Var('element', '20'), ElemSlice(Var('operand', '22'), Var('e', '23'), Number(64), '26')), Update(ElemSlice(Var('result', '28'), Var('e', '29'), Number(32), '31'), ArrayIndex(Var('element', '32'), [SliceRange(Number(31), Number(0), '35')], '36'))], 1, '38'), Update(VPartReg(Var('d', '40'), Number(0), '42'), Var('result', '43'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='XTN Vd.2S,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2}, belongs_to='aarch64_vector_arithmetic_unary_extract_nosat'),
    'vmovq_n_s16': ARMSema(intrin='vmovq_n_s16', inst='DUP', params=[Parameter(name='value', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), For(Var('e', '20'), Number(0), Number(7), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(16), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='int16x8_t', ret_is_signed=True, inst_form='DUP Vd.8H,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 1, 'esize': 16, 'datasize': 128, 'elements': 8}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vmovq_n_s32': ARMSema(intrin='vmovq_n_s32', inst='DUP', params=[Parameter(name='value', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), For(Var('e', '20'), Number(0), Number(3), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(32), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='int32x4_t', ret_is_signed=True, inst_form='DUP Vd.4S,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 2, 'esize': 32, 'datasize': 128, 'elements': 4}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vmovq_n_s64': ARMSema(intrin='vmovq_n_s64', inst='DUP', params=[Parameter(name='value', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), For(Var('e', '20'), Number(0), Number(1), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(64), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='int64x2_t', ret_is_signed=True, inst_form='DUP Vd.2D,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 3, 'esize': 64, 'datasize': 128, 'elements': 2}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vmovq_n_s8': ARMSema(intrin='vmovq_n_s8', inst='DUP', params=[Parameter(name='value', type='int8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), For(Var('e', '20'), Number(0), Number(15), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(8), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='int8x16_t', ret_is_signed=True, inst_form='DUP Vd.16B,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 0, 'esize': 8, 'datasize': 128, 'elements': 16}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vmovq_n_u16': ARMSema(intrin='vmovq_n_u16', inst='DUP', params=[Parameter(name='value', type='uint16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), For(Var('e', '20'), Number(0), Number(7), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(16), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='DUP Vd.8H,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 1, 'esize': 16, 'datasize': 128, 'elements': 8}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vmovq_n_u32': ARMSema(intrin='vmovq_n_u32', inst='DUP', params=[Parameter(name='value', type='uint32_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), For(Var('e', '20'), Number(0), Number(3), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(32), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='DUP Vd.4S,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 2, 'esize': 32, 'datasize': 128, 'elements': 4}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vmovq_n_u64': ARMSema(intrin='vmovq_n_u64', inst='DUP', params=[Parameter(name='value', type='uint64_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), For(Var('e', '20'), Number(0), Number(1), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(64), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='DUP Vd.2D,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 3, 'esize': 64, 'datasize': 128, 'elements': 2}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vmovq_n_u8': ARMSema(intrin='vmovq_n_u8', inst='DUP', params=[Parameter(name='value', type='uint8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('element', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), For(Var('e', '20'), Number(0), Number(15), [Update(ElemSlice(Var('result', '15'), Var('e', '16'), Number(8), '18'), Var('element', '19'))], 1, '21'), Update(VReg(Var('d', '23'), '24'), Var('result', '25'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='DUP Vd.16B,rn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'value'}, resolving={'size': 0, 'esize': 8, 'datasize': 128, 'elements': 16}, belongs_to='aarch64_vector_transfer_integer_dup'),
    'vmul_n_s16': ARMSema(intrin='vmul_n_s16', inst='MUL', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('product', '26'), '27')], ('bits', Number(16)), '28'), Update(Var('element2', '29'), Call('UInt', [ElemSlice(Var('operand2', '32'), Number(0), Number(16), '35')], '36')), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element1', '39'), Call('UInt', [ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(16), '45')], '46')), Update(Var('product', '47'), ArrayIndex(BinaryExpr('*', Var('element1', '48'), Var('element2', '49'), '50'), [SliceRange(Number(15), Number(0), '53')], '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(16), '59'), Var('product', '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int16x4_t', ret_is_signed=True, inst_form='MUL Vd.4H,Vn.4H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'elements': 4}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_int'),
    'vmul_n_s32': ARMSema(intrin='vmul_n_s32', inst='MUL', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('product', '26'), '27')], ('bits', Number(32)), '28'), Update(Var('element2', '29'), Call('UInt', [ElemSlice(Var('operand2', '32'), Number(0), Number(32), '35')], '36')), For(Var('e', '61'), Number(0), Number(1), [Update(Var('element1', '39'), Call('UInt', [ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(32), '45')], '46')), Update(Var('product', '47'), ArrayIndex(BinaryExpr('*', Var('element1', '48'), Var('element2', '49'), '50'), [SliceRange(Number(31), Number(0), '53')], '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(32), '59'), Var('product', '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int32x2_t', ret_is_signed=True, inst_form='MUL Vd.2S,Vn.2S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'elements': 2}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_int'),
    'vmul_n_u16': ARMSema(intrin='vmul_n_u16', inst='MUL', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('product', '26'), '27')], ('bits', Number(16)), '28'), Update(Var('element2', '29'), Call('UInt', [ElemSlice(Var('operand2', '32'), Number(0), Number(16), '35')], '36')), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element1', '39'), Call('UInt', [ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(16), '45')], '46')), Update(Var('product', '47'), ArrayIndex(BinaryExpr('*', Var('element1', '48'), Var('element2', '49'), '50'), [SliceRange(Number(15), Number(0), '53')], '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(16), '59'), Var('product', '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='MUL Vd.4H,Vn.4H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'elements': 4}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_int'),
    'vmul_n_u32': ARMSema(intrin='vmul_n_u32', inst='MUL', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('product', '26'), '27')], ('bits', Number(32)), '28'), Update(Var('element2', '29'), Call('UInt', [ElemSlice(Var('operand2', '32'), Number(0), Number(32), '35')], '36')), For(Var('e', '61'), Number(0), Number(1), [Update(Var('element1', '39'), Call('UInt', [ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(32), '45')], '46')), Update(Var('product', '47'), ArrayIndex(BinaryExpr('*', Var('element1', '48'), Var('element2', '49'), '50'), [SliceRange(Number(31), Number(0), '53')], '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(32), '59'), Var('product', '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='MUL Vd.2S,Vn.2S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'elements': 2}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_int'),
    'vmul_s16': ARMSema(intrin='vmul_s16', inst='MUL', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(16)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(16)), '26'), VarsDecl([VarDeclUndef(Var('product', '28'), '29')], ('bits', Number(16)), '30'), For(Var('e', '74'), Number(0), Number(3), [Update(Var('element1', '33'), ElemSlice(Var('operand1', '35'), Var('e', '36'), Number(16), '38')), Update(Var('element2', '39'), ElemSlice(Var('operand2', '41'), Var('e', '42'), Number(16), '44')), Update(Var('product', '55'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '57')], '58'), Call('UInt', [Var('element2', '60')], '61'), '62'), [SliceRange(Number(15), Number(0), '65')], '66')), Update(ElemSlice(Var('result', '69'), Var('e', '70'), Number(16), '72'), Var('product', '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='int16x4_t', ret_is_signed=True, inst_form='MUL Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'poly': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_product'),
    'vmul_s32': ARMSema(intrin='vmul_s32', inst='MUL', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(32)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(32)), '26'), VarsDecl([VarDeclUndef(Var('product', '28'), '29')], ('bits', Number(32)), '30'), For(Var('e', '74'), Number(0), Number(1), [Update(Var('element1', '33'), ElemSlice(Var('operand1', '35'), Var('e', '36'), Number(32), '38')), Update(Var('element2', '39'), ElemSlice(Var('operand2', '41'), Var('e', '42'), Number(32), '44')), Update(Var('product', '55'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '57')], '58'), Call('UInt', [Var('element2', '60')], '61'), '62'), [SliceRange(Number(31), Number(0), '65')], '66')), Update(ElemSlice(Var('result', '69'), Var('e', '70'), Number(32), '72'), Var('product', '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='int32x2_t', ret_is_signed=True, inst_form='MUL Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'poly': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_product'),
    'vmul_s8': ARMSema(intrin='vmul_s8', inst='MUL', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(8)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(8)), '26'), VarsDecl([VarDeclUndef(Var('product', '28'), '29')], ('bits', Number(8)), '30'), For(Var('e', '74'), Number(0), Number(7), [Update(Var('element1', '33'), ElemSlice(Var('operand1', '35'), Var('e', '36'), Number(8), '38')), Update(Var('element2', '39'), ElemSlice(Var('operand2', '41'), Var('e', '42'), Number(8), '44')), Update(Var('product', '55'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '57')], '58'), Call('UInt', [Var('element2', '60')], '61'), '62'), [SliceRange(Number(7), Number(0), '65')], '66')), Update(ElemSlice(Var('result', '69'), Var('e', '70'), Number(8), '72'), Var('product', '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='int8x8_t', ret_is_signed=True, inst_form='MUL Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'poly': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_product'),
    'vmul_u16': ARMSema(intrin='vmul_u16', inst='MUL', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(16)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(16)), '26'), VarsDecl([VarDeclUndef(Var('product', '28'), '29')], ('bits', Number(16)), '30'), For(Var('e', '74'), Number(0), Number(3), [Update(Var('element1', '33'), ElemSlice(Var('operand1', '35'), Var('e', '36'), Number(16), '38')), Update(Var('element2', '39'), ElemSlice(Var('operand2', '41'), Var('e', '42'), Number(16), '44')), Update(Var('product', '55'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '57')], '58'), Call('UInt', [Var('element2', '60')], '61'), '62'), [SliceRange(Number(15), Number(0), '65')], '66')), Update(ElemSlice(Var('result', '69'), Var('e', '70'), Number(16), '72'), Var('product', '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='MUL Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'poly': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_product'),
    'vmul_u32': ARMSema(intrin='vmul_u32', inst='MUL', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(32)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(32)), '26'), VarsDecl([VarDeclUndef(Var('product', '28'), '29')], ('bits', Number(32)), '30'), For(Var('e', '74'), Number(0), Number(1), [Update(Var('element1', '33'), ElemSlice(Var('operand1', '35'), Var('e', '36'), Number(32), '38')), Update(Var('element2', '39'), ElemSlice(Var('operand2', '41'), Var('e', '42'), Number(32), '44')), Update(Var('product', '55'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '57')], '58'), Call('UInt', [Var('element2', '60')], '61'), '62'), [SliceRange(Number(31), Number(0), '65')], '66')), Update(ElemSlice(Var('result', '69'), Var('e', '70'), Number(32), '72'), Var('product', '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='MUL Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'poly': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_product'),
    'vmul_u8': ARMSema(intrin='vmul_u8', inst='MUL', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(8)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(8)), '26'), VarsDecl([VarDeclUndef(Var('product', '28'), '29')], ('bits', Number(8)), '30'), For(Var('e', '74'), Number(0), Number(7), [Update(Var('element1', '33'), ElemSlice(Var('operand1', '35'), Var('e', '36'), Number(8), '38')), Update(Var('element2', '39'), ElemSlice(Var('operand2', '41'), Var('e', '42'), Number(8), '44')), Update(Var('product', '55'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '57')], '58'), Call('UInt', [Var('element2', '60')], '61'), '62'), [SliceRange(Number(7), Number(0), '65')], '66')), Update(ElemSlice(Var('result', '69'), Var('e', '70'), Number(8), '72'), Var('product', '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='MUL Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'poly': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_product'),
    'vmull_high_n_s16': ARMSema(intrin='vmull_high_n_s16', inst='SMULL2', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(128)), '20'), VarsDecl([VarDeclUndef(Var('element1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('product', '29'), '30')], ('bits', Number(32)), '31'), Update(Var('element2', '32'), Call('Int', [ElemSlice(Var('operand2', '35'), Number(0), Number(16), '38'), Number(0)], '40')), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(16), '49'), Number(0)], '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Var('element1', '53'), Var('element2', '54'), '55'), [SliceRange(Number(31), Number(0), '59')], '60')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(32), '66'), Var('product', '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SMULL2 Vd.4S,Vn.8H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_long'),
    'vmull_high_n_s32': ARMSema(intrin='vmull_high_n_s32', inst='SMULL2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(128)), '20'), VarsDecl([VarDeclUndef(Var('element1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('product', '29'), '30')], ('bits', Number(64)), '31'), Update(Var('element2', '32'), Call('Int', [ElemSlice(Var('operand2', '35'), Number(0), Number(32), '38'), Number(0)], '40')), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(32), '49'), Number(0)], '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Var('element1', '53'), Var('element2', '54'), '55'), [SliceRange(Number(63), Number(0), '59')], '60')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(64), '66'), Var('product', '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SMULL2 Vd.2D,Vn.4S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_long'),
    'vmull_high_n_u16': ARMSema(intrin='vmull_high_n_u16', inst='UMULL2', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(128)), '20'), VarsDecl([VarDeclUndef(Var('element1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('product', '29'), '30')], ('bits', Number(32)), '31'), Update(Var('element2', '32'), Call('Int', [ElemSlice(Var('operand2', '35'), Number(0), Number(16), '38'), Number(1)], '40')), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(16), '49'), Number(1)], '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Var('element1', '53'), Var('element2', '54'), '55'), [SliceRange(Number(31), Number(0), '59')], '60')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(32), '66'), Var('product', '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UMULL2 Vd.4S,Vn.8H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_long'),
    'vmull_high_n_u32': ARMSema(intrin='vmull_high_n_u32', inst='UMULL2', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(128)), '20'), VarsDecl([VarDeclUndef(Var('element1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('product', '29'), '30')], ('bits', Number(64)), '31'), Update(Var('element2', '32'), Call('Int', [ElemSlice(Var('operand2', '35'), Number(0), Number(32), '38'), Number(1)], '40')), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(32), '49'), Number(1)], '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Var('element1', '53'), Var('element2', '54'), '55'), [SliceRange(Number(63), Number(0), '59')], '60')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(64), '66'), Var('product', '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UMULL2 Vd.2D,Vn.4S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_long'),
    'vmull_high_s16': ARMSema(intrin='vmull_high_s16', inst='SMULL2', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '62'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(0)], '47')), Update(ElemSlice(Var('result', '49'), Var('e', '50'), Number(32), '53'), ArrayIndex(BinaryExpr('*', Var('element1', '54'), Var('element2', '55'), '56'), [SliceRange(Number(31), Number(0), '60')], '61'))], 1, '63'), Update(VReg(Var('d', '65'), '66'), Var('result', '67'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SMULL2 Vd.4S,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_product'),
    'vmull_high_s32': ARMSema(intrin='vmull_high_s32', inst='SMULL2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '62'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(0)], '47')), Update(ElemSlice(Var('result', '49'), Var('e', '50'), Number(64), '53'), ArrayIndex(BinaryExpr('*', Var('element1', '54'), Var('element2', '55'), '56'), [SliceRange(Number(63), Number(0), '60')], '61'))], 1, '63'), Update(VReg(Var('d', '65'), '66'), Var('result', '67'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SMULL2 Vd.2D,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_product'),
    'vmull_high_s8': ARMSema(intrin='vmull_high_s8', inst='SMULL2', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '62'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(0)], '47')), Update(ElemSlice(Var('result', '49'), Var('e', '50'), Number(16), '53'), ArrayIndex(BinaryExpr('*', Var('element1', '54'), Var('element2', '55'), '56'), [SliceRange(Number(15), Number(0), '60')], '61'))], 1, '63'), Update(VReg(Var('d', '65'), '66'), Var('result', '67'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SMULL2 Vd.8H,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_product'),
    'vmull_high_u16': ARMSema(intrin='vmull_high_u16', inst='UMULL2', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '62'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(1)], '47')), Update(ElemSlice(Var('result', '49'), Var('e', '50'), Number(32), '53'), ArrayIndex(BinaryExpr('*', Var('element1', '54'), Var('element2', '55'), '56'), [SliceRange(Number(31), Number(0), '60')], '61'))], 1, '63'), Update(VReg(Var('d', '65'), '66'), Var('result', '67'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UMULL2 Vd.4S,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_product'),
    'vmull_high_u32': ARMSema(intrin='vmull_high_u32', inst='UMULL2', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '62'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(1)], '47')), Update(ElemSlice(Var('result', '49'), Var('e', '50'), Number(64), '53'), ArrayIndex(BinaryExpr('*', Var('element1', '54'), Var('element2', '55'), '56'), [SliceRange(Number(63), Number(0), '60')], '61'))], 1, '63'), Update(VReg(Var('d', '65'), '66'), Var('result', '67'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UMULL2 Vd.2D,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_product'),
    'vmull_high_u8': ARMSema(intrin='vmull_high_u8', inst='UMULL2', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '62'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(1)], '47')), Update(ElemSlice(Var('result', '49'), Var('e', '50'), Number(16), '53'), ArrayIndex(BinaryExpr('*', Var('element1', '54'), Var('element2', '55'), '56'), [SliceRange(Number(15), Number(0), '60')], '61'))], 1, '63'), Update(VReg(Var('d', '65'), '66'), Var('result', '67'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UMULL2 Vd.8H,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_product'),
    'vmull_n_s16': ARMSema(intrin='vmull_n_s16', inst='SMULL', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(128)), '20'), VarsDecl([VarDeclUndef(Var('element1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('product', '29'), '30')], ('bits', Number(32)), '31'), Update(Var('element2', '32'), Call('Int', [ElemSlice(Var('operand2', '35'), Number(0), Number(16), '38'), Number(0)], '40')), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(16), '49'), Number(0)], '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Var('element1', '53'), Var('element2', '54'), '55'), [SliceRange(Number(31), Number(0), '59')], '60')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(32), '66'), Var('product', '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SMULL Vd.4S,Vn.4H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_long'),
    'vmull_n_s32': ARMSema(intrin='vmull_n_s32', inst='SMULL', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(128)), '20'), VarsDecl([VarDeclUndef(Var('element1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('product', '29'), '30')], ('bits', Number(64)), '31'), Update(Var('element2', '32'), Call('Int', [ElemSlice(Var('operand2', '35'), Number(0), Number(32), '38'), Number(0)], '40')), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(32), '49'), Number(0)], '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Var('element1', '53'), Var('element2', '54'), '55'), [SliceRange(Number(63), Number(0), '59')], '60')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(64), '66'), Var('product', '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SMULL Vd.2D,Vn.2S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_long'),
    'vmull_n_u16': ARMSema(intrin='vmull_n_u16', inst='UMULL', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(128)), '20'), VarsDecl([VarDeclUndef(Var('element1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('product', '29'), '30')], ('bits', Number(32)), '31'), Update(Var('element2', '32'), Call('Int', [ElemSlice(Var('operand2', '35'), Number(0), Number(16), '38'), Number(1)], '40')), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(16), '49'), Number(1)], '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Var('element1', '53'), Var('element2', '54'), '55'), [SliceRange(Number(31), Number(0), '59')], '60')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(32), '66'), Var('product', '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UMULL Vd.4S,Vn.4H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_long'),
    'vmull_n_u32': ARMSema(intrin='vmull_n_u32', inst='UMULL', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(128)), '20'), VarsDecl([VarDeclUndef(Var('element1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('product', '29'), '30')], ('bits', Number(64)), '31'), Update(Var('element2', '32'), Call('Int', [ElemSlice(Var('operand2', '35'), Number(0), Number(32), '38'), Number(1)], '40')), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '43'), Call('Int', [ElemSlice(Var('operand1', '46'), Var('e', '47'), Number(32), '49'), Number(1)], '51')), Update(Var('product', '52'), ArrayIndex(BinaryExpr('*', Var('element1', '53'), Var('element2', '54'), '55'), [SliceRange(Number(63), Number(0), '59')], '60')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(64), '66'), Var('product', '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UMULL Vd.2D,Vn.2S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_long'),
    'vmull_s16': ARMSema(intrin='vmull_s16', inst='SMULL', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '62'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(0)], '47')), Update(ElemSlice(Var('result', '49'), Var('e', '50'), Number(32), '53'), ArrayIndex(BinaryExpr('*', Var('element1', '54'), Var('element2', '55'), '56'), [SliceRange(Number(31), Number(0), '60')], '61'))], 1, '63'), Update(VReg(Var('d', '65'), '66'), Var('result', '67'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SMULL Vd.4S,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_product'),
    'vmull_s32': ARMSema(intrin='vmull_s32', inst='SMULL', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '62'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(0)], '47')), Update(ElemSlice(Var('result', '49'), Var('e', '50'), Number(64), '53'), ArrayIndex(BinaryExpr('*', Var('element1', '54'), Var('element2', '55'), '56'), [SliceRange(Number(63), Number(0), '60')], '61'))], 1, '63'), Update(VReg(Var('d', '65'), '66'), Var('result', '67'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SMULL Vd.2D,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_product'),
    'vmull_s8': ARMSema(intrin='vmull_s8', inst='SMULL', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '62'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(0)], '47')), Update(ElemSlice(Var('result', '49'), Var('e', '50'), Number(16), '53'), ArrayIndex(BinaryExpr('*', Var('element1', '54'), Var('element2', '55'), '56'), [SliceRange(Number(15), Number(0), '60')], '61'))], 1, '63'), Update(VReg(Var('d', '65'), '66'), Var('result', '67'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SMULL Vd.8H,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_product'),
    'vmull_u16': ARMSema(intrin='vmull_u16', inst='UMULL', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '62'), Number(0), Number(3), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(1)], '47')), Update(ElemSlice(Var('result', '49'), Var('e', '50'), Number(32), '53'), ArrayIndex(BinaryExpr('*', Var('element1', '54'), Var('element2', '55'), '56'), [SliceRange(Number(31), Number(0), '60')], '61'))], 1, '63'), Update(VReg(Var('d', '65'), '66'), Var('result', '67'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UMULL Vd.4S,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_product'),
    'vmull_u32': ARMSema(intrin='vmull_u32', inst='UMULL', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '62'), Number(0), Number(1), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(1)], '47')), Update(ElemSlice(Var('result', '49'), Var('e', '50'), Number(64), '53'), ArrayIndex(BinaryExpr('*', Var('element1', '54'), Var('element2', '55'), '56'), [SliceRange(Number(63), Number(0), '60')], '61'))], 1, '63'), Update(VReg(Var('d', '65'), '66'), Var('result', '67'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UMULL Vd.2D,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_product'),
    'vmull_u8': ARMSema(intrin='vmull_u8', inst='UMULL', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), For(Var('e', '62'), Number(0), Number(7), [Update(Var('element1', '30'), Call('Int', [ElemSlice(Var('operand1', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '38')), Update(Var('element2', '39'), Call('Int', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(1)], '47')), Update(ElemSlice(Var('result', '49'), Var('e', '50'), Number(16), '53'), ArrayIndex(BinaryExpr('*', Var('element1', '54'), Var('element2', '55'), '56'), [SliceRange(Number(15), Number(0), '60')], '61'))], 1, '63'), Update(VReg(Var('d', '65'), '66'), Var('result', '67'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UMULL Vd.8H,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_product'),
    'vmulq_n_s16': ARMSema(intrin='vmulq_n_s16', inst='MUL', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('product', '26'), '27')], ('bits', Number(16)), '28'), Update(Var('element2', '29'), Call('UInt', [ElemSlice(Var('operand2', '32'), Number(0), Number(16), '35')], '36')), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element1', '39'), Call('UInt', [ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(16), '45')], '46')), Update(Var('product', '47'), ArrayIndex(BinaryExpr('*', Var('element1', '48'), Var('element2', '49'), '50'), [SliceRange(Number(15), Number(0), '53')], '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(16), '59'), Var('product', '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int16x8_t', ret_is_signed=True, inst_form='MUL Vd.8H,Vn.8H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 128, 'elements': 8}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_int'),
    'vmulq_n_s32': ARMSema(intrin='vmulq_n_s32', inst='MUL', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('product', '26'), '27')], ('bits', Number(32)), '28'), Update(Var('element2', '29'), Call('UInt', [ElemSlice(Var('operand2', '32'), Number(0), Number(32), '35')], '36')), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element1', '39'), Call('UInt', [ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(32), '45')], '46')), Update(Var('product', '47'), ArrayIndex(BinaryExpr('*', Var('element1', '48'), Var('element2', '49'), '50'), [SliceRange(Number(31), Number(0), '53')], '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(32), '59'), Var('product', '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int32x4_t', ret_is_signed=True, inst_form='MUL Vd.4S,Vn.4S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 128, 'elements': 4}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_int'),
    'vmulq_n_u16': ARMSema(intrin='vmulq_n_u16', inst='MUL', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('product', '26'), '27')], ('bits', Number(16)), '28'), Update(Var('element2', '29'), Call('UInt', [ElemSlice(Var('operand2', '32'), Number(0), Number(16), '35')], '36')), For(Var('e', '61'), Number(0), Number(7), [Update(Var('element1', '39'), Call('UInt', [ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(16), '45')], '46')), Update(Var('product', '47'), ArrayIndex(BinaryExpr('*', Var('element1', '48'), Var('element2', '49'), '50'), [SliceRange(Number(15), Number(0), '53')], '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(16), '59'), Var('product', '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='MUL Vd.8H,Vn.8H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 128, 'elements': 8}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_int'),
    'vmulq_n_u32': ARMSema(intrin='vmulq_n_u32', inst='MUL', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('product', '26'), '27')], ('bits', Number(32)), '28'), Update(Var('element2', '29'), Call('UInt', [ElemSlice(Var('operand2', '32'), Number(0), Number(32), '35')], '36')), For(Var('e', '61'), Number(0), Number(3), [Update(Var('element1', '39'), Call('UInt', [ElemSlice(Var('operand1', '42'), Var('e', '43'), Number(32), '45')], '46')), Update(Var('product', '47'), ArrayIndex(BinaryExpr('*', Var('element1', '48'), Var('element2', '49'), '50'), [SliceRange(Number(31), Number(0), '53')], '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(32), '59'), Var('product', '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='MUL Vd.4S,Vn.4S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 128, 'elements': 4}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_int'),
    'vmulq_s16': ARMSema(intrin='vmulq_s16', inst='MUL', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(16)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(16)), '26'), VarsDecl([VarDeclUndef(Var('product', '28'), '29')], ('bits', Number(16)), '30'), For(Var('e', '74'), Number(0), Number(7), [Update(Var('element1', '33'), ElemSlice(Var('operand1', '35'), Var('e', '36'), Number(16), '38')), Update(Var('element2', '39'), ElemSlice(Var('operand2', '41'), Var('e', '42'), Number(16), '44')), Update(Var('product', '55'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '57')], '58'), Call('UInt', [Var('element2', '60')], '61'), '62'), [SliceRange(Number(15), Number(0), '65')], '66')), Update(ElemSlice(Var('result', '69'), Var('e', '70'), Number(16), '72'), Var('product', '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='int16x8_t', ret_is_signed=True, inst_form='MUL Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'poly': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_product'),
    'vmulq_s32': ARMSema(intrin='vmulq_s32', inst='MUL', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(32)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(32)), '26'), VarsDecl([VarDeclUndef(Var('product', '28'), '29')], ('bits', Number(32)), '30'), For(Var('e', '74'), Number(0), Number(3), [Update(Var('element1', '33'), ElemSlice(Var('operand1', '35'), Var('e', '36'), Number(32), '38')), Update(Var('element2', '39'), ElemSlice(Var('operand2', '41'), Var('e', '42'), Number(32), '44')), Update(Var('product', '55'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '57')], '58'), Call('UInt', [Var('element2', '60')], '61'), '62'), [SliceRange(Number(31), Number(0), '65')], '66')), Update(ElemSlice(Var('result', '69'), Var('e', '70'), Number(32), '72'), Var('product', '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='int32x4_t', ret_is_signed=True, inst_form='MUL Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'poly': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_product'),
    'vmulq_s8': ARMSema(intrin='vmulq_s8', inst='MUL', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(8)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(8)), '26'), VarsDecl([VarDeclUndef(Var('product', '28'), '29')], ('bits', Number(8)), '30'), For(Var('e', '74'), Number(0), Number(15), [Update(Var('element1', '33'), ElemSlice(Var('operand1', '35'), Var('e', '36'), Number(8), '38')), Update(Var('element2', '39'), ElemSlice(Var('operand2', '41'), Var('e', '42'), Number(8), '44')), Update(Var('product', '55'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '57')], '58'), Call('UInt', [Var('element2', '60')], '61'), '62'), [SliceRange(Number(7), Number(0), '65')], '66')), Update(ElemSlice(Var('result', '69'), Var('e', '70'), Number(8), '72'), Var('product', '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='int8x16_t', ret_is_signed=True, inst_form='MUL Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'poly': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_product'),
    'vmulq_u16': ARMSema(intrin='vmulq_u16', inst='MUL', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(16)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(16)), '26'), VarsDecl([VarDeclUndef(Var('product', '28'), '29')], ('bits', Number(16)), '30'), For(Var('e', '74'), Number(0), Number(7), [Update(Var('element1', '33'), ElemSlice(Var('operand1', '35'), Var('e', '36'), Number(16), '38')), Update(Var('element2', '39'), ElemSlice(Var('operand2', '41'), Var('e', '42'), Number(16), '44')), Update(Var('product', '55'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '57')], '58'), Call('UInt', [Var('element2', '60')], '61'), '62'), [SliceRange(Number(15), Number(0), '65')], '66')), Update(ElemSlice(Var('result', '69'), Var('e', '70'), Number(16), '72'), Var('product', '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='MUL Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'poly': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_product'),
    'vmulq_u32': ARMSema(intrin='vmulq_u32', inst='MUL', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(32)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(32)), '26'), VarsDecl([VarDeclUndef(Var('product', '28'), '29')], ('bits', Number(32)), '30'), For(Var('e', '74'), Number(0), Number(3), [Update(Var('element1', '33'), ElemSlice(Var('operand1', '35'), Var('e', '36'), Number(32), '38')), Update(Var('element2', '39'), ElemSlice(Var('operand2', '41'), Var('e', '42'), Number(32), '44')), Update(Var('product', '55'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '57')], '58'), Call('UInt', [Var('element2', '60')], '61'), '62'), [SliceRange(Number(31), Number(0), '65')], '66')), Update(ElemSlice(Var('result', '69'), Var('e', '70'), Number(32), '72'), Var('product', '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='MUL Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'poly': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_product'),
    'vmulq_u8': ARMSema(intrin='vmulq_u8', inst='MUL', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(8)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(8)), '26'), VarsDecl([VarDeclUndef(Var('product', '28'), '29')], ('bits', Number(8)), '30'), For(Var('e', '74'), Number(0), Number(15), [Update(Var('element1', '33'), ElemSlice(Var('operand1', '35'), Var('e', '36'), Number(8), '38')), Update(Var('element2', '39'), ElemSlice(Var('operand2', '41'), Var('e', '42'), Number(8), '44')), Update(Var('product', '55'), ArrayIndex(BinaryExpr('*', Call('UInt', [Var('element1', '57')], '58'), Call('UInt', [Var('element2', '60')], '61'), '62'), [SliceRange(Number(7), Number(0), '65')], '66')), Update(ElemSlice(Var('result', '69'), Var('e', '70'), Number(8), '72'), Var('product', '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='MUL Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'poly': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_product'),
    'vmvn_s16': ARMSema(intrin='vmvn_s16', inst='MVN', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '13'), '14')], ('bits', Number(8)), '15'), For(Var('e', '32'), Number(0), Number(7), [Update(Var('element', '18'), ElemSlice(Var('operand', '20'), Var('e', '21'), Number(8), '23')), Update(ElemSlice(Var('result', '25'), Var('e', '26'), Number(8), '28'), Call('NOT', [Var('element', '30')], '31'))], 1, '33'), Update(VReg(Var('d', '35'), '36'), Var('result', '37'))], rettype='int16x4_t', ret_is_signed=True, inst_form='MVN Vd.8B,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8}, belongs_to='aarch64_vector_arithmetic_unary_not'),
    'vmvn_s32': ARMSema(intrin='vmvn_s32', inst='MVN', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '13'), '14')], ('bits', Number(8)), '15'), For(Var('e', '32'), Number(0), Number(7), [Update(Var('element', '18'), ElemSlice(Var('operand', '20'), Var('e', '21'), Number(8), '23')), Update(ElemSlice(Var('result', '25'), Var('e', '26'), Number(8), '28'), Call('NOT', [Var('element', '30')], '31'))], 1, '33'), Update(VReg(Var('d', '35'), '36'), Var('result', '37'))], rettype='int32x2_t', ret_is_signed=True, inst_form='MVN Vd.8B,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8}, belongs_to='aarch64_vector_arithmetic_unary_not'),
    'vmvn_s8': ARMSema(intrin='vmvn_s8', inst='MVN', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '13'), '14')], ('bits', Number(8)), '15'), For(Var('e', '32'), Number(0), Number(7), [Update(Var('element', '18'), ElemSlice(Var('operand', '20'), Var('e', '21'), Number(8), '23')), Update(ElemSlice(Var('result', '25'), Var('e', '26'), Number(8), '28'), Call('NOT', [Var('element', '30')], '31'))], 1, '33'), Update(VReg(Var('d', '35'), '36'), Var('result', '37'))], rettype='int8x8_t', ret_is_signed=True, inst_form='MVN Vd.8B,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8}, belongs_to='aarch64_vector_arithmetic_unary_not'),
    'vmvn_u16': ARMSema(intrin='vmvn_u16', inst='MVN', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '13'), '14')], ('bits', Number(8)), '15'), For(Var('e', '32'), Number(0), Number(7), [Update(Var('element', '18'), ElemSlice(Var('operand', '20'), Var('e', '21'), Number(8), '23')), Update(ElemSlice(Var('result', '25'), Var('e', '26'), Number(8), '28'), Call('NOT', [Var('element', '30')], '31'))], 1, '33'), Update(VReg(Var('d', '35'), '36'), Var('result', '37'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='MVN Vd.8B,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8}, belongs_to='aarch64_vector_arithmetic_unary_not'),
    'vmvn_u32': ARMSema(intrin='vmvn_u32', inst='MVN', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '13'), '14')], ('bits', Number(8)), '15'), For(Var('e', '32'), Number(0), Number(7), [Update(Var('element', '18'), ElemSlice(Var('operand', '20'), Var('e', '21'), Number(8), '23')), Update(ElemSlice(Var('result', '25'), Var('e', '26'), Number(8), '28'), Call('NOT', [Var('element', '30')], '31'))], 1, '33'), Update(VReg(Var('d', '35'), '36'), Var('result', '37'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='MVN Vd.8B,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8}, belongs_to='aarch64_vector_arithmetic_unary_not'),
    'vmvn_u8': ARMSema(intrin='vmvn_u8', inst='MVN', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '13'), '14')], ('bits', Number(8)), '15'), For(Var('e', '32'), Number(0), Number(7), [Update(Var('element', '18'), ElemSlice(Var('operand', '20'), Var('e', '21'), Number(8), '23')), Update(ElemSlice(Var('result', '25'), Var('e', '26'), Number(8), '28'), Call('NOT', [Var('element', '30')], '31'))], 1, '33'), Update(VReg(Var('d', '35'), '36'), Var('result', '37'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='MVN Vd.8B,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8}, belongs_to='aarch64_vector_arithmetic_unary_not'),
    'vmvnq_s16': ARMSema(intrin='vmvnq_s16', inst='MVN', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '13'), '14')], ('bits', Number(8)), '15'), For(Var('e', '32'), Number(0), Number(15), [Update(Var('element', '18'), ElemSlice(Var('operand', '20'), Var('e', '21'), Number(8), '23')), Update(ElemSlice(Var('result', '25'), Var('e', '26'), Number(8), '28'), Call('NOT', [Var('element', '30')], '31'))], 1, '33'), Update(VReg(Var('d', '35'), '36'), Var('result', '37'))], rettype='int16x8_t', ret_is_signed=True, inst_form='MVN Vd.16B,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16}, belongs_to='aarch64_vector_arithmetic_unary_not'),
    'vmvnq_s32': ARMSema(intrin='vmvnq_s32', inst='MVN', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '13'), '14')], ('bits', Number(8)), '15'), For(Var('e', '32'), Number(0), Number(15), [Update(Var('element', '18'), ElemSlice(Var('operand', '20'), Var('e', '21'), Number(8), '23')), Update(ElemSlice(Var('result', '25'), Var('e', '26'), Number(8), '28'), Call('NOT', [Var('element', '30')], '31'))], 1, '33'), Update(VReg(Var('d', '35'), '36'), Var('result', '37'))], rettype='int32x4_t', ret_is_signed=True, inst_form='MVN Vd.16B,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16}, belongs_to='aarch64_vector_arithmetic_unary_not'),
    'vmvnq_s8': ARMSema(intrin='vmvnq_s8', inst='MVN', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '13'), '14')], ('bits', Number(8)), '15'), For(Var('e', '32'), Number(0), Number(15), [Update(Var('element', '18'), ElemSlice(Var('operand', '20'), Var('e', '21'), Number(8), '23')), Update(ElemSlice(Var('result', '25'), Var('e', '26'), Number(8), '28'), Call('NOT', [Var('element', '30')], '31'))], 1, '33'), Update(VReg(Var('d', '35'), '36'), Var('result', '37'))], rettype='int8x16_t', ret_is_signed=True, inst_form='MVN Vd.16B,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16}, belongs_to='aarch64_vector_arithmetic_unary_not'),
    'vmvnq_u16': ARMSema(intrin='vmvnq_u16', inst='MVN', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '13'), '14')], ('bits', Number(8)), '15'), For(Var('e', '32'), Number(0), Number(15), [Update(Var('element', '18'), ElemSlice(Var('operand', '20'), Var('e', '21'), Number(8), '23')), Update(ElemSlice(Var('result', '25'), Var('e', '26'), Number(8), '28'), Call('NOT', [Var('element', '30')], '31'))], 1, '33'), Update(VReg(Var('d', '35'), '36'), Var('result', '37'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='MVN Vd.16B,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16}, belongs_to='aarch64_vector_arithmetic_unary_not'),
    'vmvnq_u32': ARMSema(intrin='vmvnq_u32', inst='MVN', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '13'), '14')], ('bits', Number(8)), '15'), For(Var('e', '32'), Number(0), Number(15), [Update(Var('element', '18'), ElemSlice(Var('operand', '20'), Var('e', '21'), Number(8), '23')), Update(ElemSlice(Var('result', '25'), Var('e', '26'), Number(8), '28'), Call('NOT', [Var('element', '30')], '31'))], 1, '33'), Update(VReg(Var('d', '35'), '36'), Var('result', '37'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='MVN Vd.16B,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16}, belongs_to='aarch64_vector_arithmetic_unary_not'),
    'vmvnq_u8': ARMSema(intrin='vmvnq_u8', inst='MVN', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '13'), '14')], ('bits', Number(8)), '15'), For(Var('e', '32'), Number(0), Number(15), [Update(Var('element', '18'), ElemSlice(Var('operand', '20'), Var('e', '21'), Number(8), '23')), Update(ElemSlice(Var('result', '25'), Var('e', '26'), Number(8), '28'), Call('NOT', [Var('element', '30')], '31'))], 1, '33'), Update(VReg(Var('d', '35'), '36'), Var('result', '37'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='MVN Vd.16B,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16}, belongs_to='aarch64_vector_arithmetic_unary_not'),
    'vneg_s16': ARMSema(intrin='vneg_s16', inst='NEG', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), For(Var('e', '47'), Number(0), Number(3), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26')], '27')), Update(Var('element2', '29'), UnaryExpr('-', Var('element', '30'), '31')), Update(ElemSlice(Var('result', '38'), Var('e', '39'), Number(16), '41'), ArrayIndex(Var('element2', '42'), [SliceRange(Number(15), Number(0), '45')], '46'))], 1, '48'), Update(VReg(Var('d', '50'), '51'), Var('result', '52'))], rettype='int16x4_t', ret_is_signed=True, inst_form='NEG Vd.4H,Vn.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_int_simd'),
    'vneg_s32': ARMSema(intrin='vneg_s32', inst='NEG', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), For(Var('e', '47'), Number(0), Number(1), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26')], '27')), Update(Var('element2', '29'), UnaryExpr('-', Var('element', '30'), '31')), Update(ElemSlice(Var('result', '38'), Var('e', '39'), Number(32), '41'), ArrayIndex(Var('element2', '42'), [SliceRange(Number(31), Number(0), '45')], '46'))], 1, '48'), Update(VReg(Var('d', '50'), '51'), Var('result', '52'))], rettype='int32x2_t', ret_is_signed=True, inst_form='NEG Vd.2S,Vn.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_int_simd'),
    'vneg_s64': ARMSema(intrin='vneg_s64', inst='NEG', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), For(Var('e', '47'), Number(0), Number(0), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('element2', '29'), UnaryExpr('-', Var('element', '30'), '31')), Update(ElemSlice(Var('result', '38'), Var('e', '39'), Number(64), '41'), ArrayIndex(Var('element2', '42'), [SliceRange(Number(63), Number(0), '45')], '46'))], 1, '48'), Update(VReg(Var('d', '50'), '51'), Var('result', '52'))], rettype='int64x1_t', ret_is_signed=True, inst_form='NEG Dd,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_int_sisd'),
    'vneg_s8': ARMSema(intrin='vneg_s8', inst='NEG', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), For(Var('e', '47'), Number(0), Number(7), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26')], '27')), Update(Var('element2', '29'), UnaryExpr('-', Var('element', '30'), '31')), Update(ElemSlice(Var('result', '38'), Var('e', '39'), Number(8), '41'), ArrayIndex(Var('element2', '42'), [SliceRange(Number(7), Number(0), '45')], '46'))], 1, '48'), Update(VReg(Var('d', '50'), '51'), Var('result', '52'))], rettype='int8x8_t', ret_is_signed=True, inst_form='NEG Vd.8B,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_int_simd'),
    'vnegd_s64': ARMSema(intrin='vnegd_s64', inst='NEG', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), For(Var('e', '47'), Number(0), Number(0), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('element2', '29'), UnaryExpr('-', Var('element', '30'), '31')), Update(ElemSlice(Var('result', '38'), Var('e', '39'), Number(64), '41'), ArrayIndex(Var('element2', '42'), [SliceRange(Number(63), Number(0), '45')], '46'))], 1, '48'), Update(VReg(Var('d', '50'), '51'), Var('result', '52'))], rettype='int64_t', ret_is_signed=True, inst_form='NEG Dd,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_int_sisd'),
    'vnegq_s16': ARMSema(intrin='vnegq_s16', inst='NEG', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), For(Var('e', '47'), Number(0), Number(7), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26')], '27')), Update(Var('element2', '29'), UnaryExpr('-', Var('element', '30'), '31')), Update(ElemSlice(Var('result', '38'), Var('e', '39'), Number(16), '41'), ArrayIndex(Var('element2', '42'), [SliceRange(Number(15), Number(0), '45')], '46'))], 1, '48'), Update(VReg(Var('d', '50'), '51'), Var('result', '52'))], rettype='int16x8_t', ret_is_signed=True, inst_form='NEG Vd.8H,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_int_simd'),
    'vnegq_s32': ARMSema(intrin='vnegq_s32', inst='NEG', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), For(Var('e', '47'), Number(0), Number(3), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26')], '27')), Update(Var('element2', '29'), UnaryExpr('-', Var('element', '30'), '31')), Update(ElemSlice(Var('result', '38'), Var('e', '39'), Number(32), '41'), ArrayIndex(Var('element2', '42'), [SliceRange(Number(31), Number(0), '45')], '46'))], 1, '48'), Update(VReg(Var('d', '50'), '51'), Var('result', '52'))], rettype='int32x4_t', ret_is_signed=True, inst_form='NEG Vd.4S,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_int_simd'),
    'vnegq_s64': ARMSema(intrin='vnegq_s64', inst='NEG', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), For(Var('e', '47'), Number(0), Number(1), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26')], '27')), Update(Var('element2', '29'), UnaryExpr('-', Var('element', '30'), '31')), Update(ElemSlice(Var('result', '38'), Var('e', '39'), Number(64), '41'), ArrayIndex(Var('element2', '42'), [SliceRange(Number(63), Number(0), '45')], '46'))], 1, '48'), Update(VReg(Var('d', '50'), '51'), Var('result', '52'))], rettype='int64x2_t', ret_is_signed=True, inst_form='NEG Vd.2D,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_int_simd'),
    'vnegq_s8': ARMSema(intrin='vnegq_s8', inst='NEG', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), For(Var('e', '47'), Number(0), Number(15), [Update(Var('element', '20'), Call('SInt', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26')], '27')), Update(Var('element2', '29'), UnaryExpr('-', Var('element', '30'), '31')), Update(ElemSlice(Var('result', '38'), Var('e', '39'), Number(8), '41'), ArrayIndex(Var('element2', '42'), [SliceRange(Number(7), Number(0), '45')], '46'))], 1, '48'), Update(VReg(Var('d', '50'), '51'), Var('result', '52'))], rettype='int8x16_t', ret_is_signed=True, inst_form='NEG Vd.16B,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_int_simd'),
    'vorn_s16': ARMSema(intrin='vorn_s16', inst='ORN', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int16x4_t', ret_is_signed=True, inst_form='ORN Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': True, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorn_s32': ARMSema(intrin='vorn_s32', inst='ORN', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int32x2_t', ret_is_signed=True, inst_form='ORN Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': True, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorn_s64': ARMSema(intrin='vorn_s64', inst='ORN', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int64x1_t', ret_is_signed=True, inst_form='ORN Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': True, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorn_s8': ARMSema(intrin='vorn_s8', inst='ORN', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int8x8_t', ret_is_signed=True, inst_form='ORN Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': True, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorn_u16': ARMSema(intrin='vorn_u16', inst='ORN', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='ORN Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': True, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorn_u32': ARMSema(intrin='vorn_u32', inst='ORN', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='ORN Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': True, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorn_u64': ARMSema(intrin='vorn_u64', inst='ORN', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='ORN Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': True, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorn_u8': ARMSema(intrin='vorn_u8', inst='ORN', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='ORN Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': True, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vornq_s16': ARMSema(intrin='vornq_s16', inst='ORN', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int16x8_t', ret_is_signed=True, inst_form='ORN Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': True, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vornq_s32': ARMSema(intrin='vornq_s32', inst='ORN', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int32x4_t', ret_is_signed=True, inst_form='ORN Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': True, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vornq_s64': ARMSema(intrin='vornq_s64', inst='ORN', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int64x2_t', ret_is_signed=True, inst_form='ORN Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': True, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vornq_s8': ARMSema(intrin='vornq_s8', inst='ORN', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int8x16_t', ret_is_signed=True, inst_form='ORN Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': True, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vornq_u16': ARMSema(intrin='vornq_u16', inst='ORN', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='ORN Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': True, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vornq_u32': ARMSema(intrin='vornq_u32', inst='ORN', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='ORN Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': True, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vornq_u64': ARMSema(intrin='vornq_u64', inst='ORN', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='ORN Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': True, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vornq_u8': ARMSema(intrin='vornq_u8', inst='ORN', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('operand2', '20'), Call('NOT', [Var('operand2', '22')], '23')), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='ORN Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': True, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorr_s16': ARMSema(intrin='vorr_s16', inst='ORR', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int16x4_t', ret_is_signed=True, inst_form='ORR Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': False, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorr_s32': ARMSema(intrin='vorr_s32', inst='ORR', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int32x2_t', ret_is_signed=True, inst_form='ORR Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': False, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorr_s64': ARMSema(intrin='vorr_s64', inst='ORR', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int64x1_t', ret_is_signed=True, inst_form='ORR Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': False, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorr_s8': ARMSema(intrin='vorr_s8', inst='ORR', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int8x8_t', ret_is_signed=True, inst_form='ORR Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': False, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorr_u16': ARMSema(intrin='vorr_u16', inst='ORR', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='ORR Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': False, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorr_u32': ARMSema(intrin='vorr_u32', inst='ORR', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='ORR Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': False, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorr_u64': ARMSema(intrin='vorr_u64', inst='ORR', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='ORR Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': False, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorr_u8': ARMSema(intrin='vorr_u8', inst='ORR', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='ORR Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'invert': False, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorrq_s16': ARMSema(intrin='vorrq_s16', inst='ORR', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int16x8_t', ret_is_signed=True, inst_form='ORR Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': False, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorrq_s32': ARMSema(intrin='vorrq_s32', inst='ORR', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int32x4_t', ret_is_signed=True, inst_form='ORR Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': False, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorrq_s64': ARMSema(intrin='vorrq_s64', inst='ORR', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int64x2_t', ret_is_signed=True, inst_form='ORR Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': False, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorrq_s8': ARMSema(intrin='vorrq_s8', inst='ORR', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='int8x16_t', ret_is_signed=True, inst_form='ORR Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': False, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorrq_u16': ARMSema(intrin='vorrq_u16', inst='ORR', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='ORR Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': False, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorrq_u32': ARMSema(intrin='vorrq_u32', inst='ORR', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='ORR Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': False, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorrq_u64': ARMSema(intrin='vorrq_u64', inst='ORR', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='ORR Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': False, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vorrq_u8': ARMSema(intrin='vorrq_u8', inst='ORR', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), Update(Var('result', '31'), BinaryExpr('OR', Var('operand1', '32'), Var('operand2', '33'), '34')), Update(VReg(Var('d', '38'), '39'), Var('result', '40'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='ORR Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'invert': False, 'op': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_logical_and_orr'),
    'vpadal_s16': ARMSema(intrin='vpadal_s16', inst='SADALP', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(32)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '82'), Number(0), Number(1), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(16), '45'), Number(0)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(16), '56'), Number(0)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(31), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(32), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(32), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SADALP Vd.2S,Vn.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 2, 'acc': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpadal_s32': ARMSema(intrin='vpadal_s32', inst='SADALP', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '82'), Number(0), Number(0), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(32), '45'), Number(0)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(32), '56'), Number(0)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(63), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(64), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(64), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='int64x1_t', ret_is_signed=True, inst_form='SADALP Vd.1D,Vn.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 1, 'acc': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpadal_s8': ARMSema(intrin='vpadal_s8', inst='SADALP', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(16)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '82'), Number(0), Number(3), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(8), '45'), Number(0)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(8), '56'), Number(0)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(15), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(16), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(16), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SADALP Vd.4H,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 4, 'acc': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpadal_u16': ARMSema(intrin='vpadal_u16', inst='UADALP', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(32)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '82'), Number(0), Number(1), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(16), '45'), Number(1)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(16), '56'), Number(1)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(31), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(32), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(32), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='UADALP Vd.2S,Vn.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 2, 'acc': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpadal_u32': ARMSema(intrin='vpadal_u32', inst='UADALP', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '82'), Number(0), Number(0), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(32), '45'), Number(1)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(32), '56'), Number(1)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(63), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(64), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(64), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='UADALP Vd.1D,Vn.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 1, 'acc': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpadal_u8': ARMSema(intrin='vpadal_u8', inst='UADALP', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(16)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '82'), Number(0), Number(3), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(8), '45'), Number(1)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(8), '56'), Number(1)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(15), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(16), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(16), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='UADALP Vd.4H,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 4, 'acc': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpadalq_s16': ARMSema(intrin='vpadalq_s16', inst='SADALP', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(32)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '82'), Number(0), Number(3), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(16), '45'), Number(0)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(16), '56'), Number(0)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(31), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(32), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(32), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SADALP Vd.4S,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 4, 'acc': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpadalq_s32': ARMSema(intrin='vpadalq_s32', inst='SADALP', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '82'), Number(0), Number(1), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(32), '45'), Number(0)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(32), '56'), Number(0)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(63), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(64), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(64), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SADALP Vd.2D,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 2, 'acc': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpadalq_s8': ARMSema(intrin='vpadalq_s8', inst='SADALP', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(16)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '82'), Number(0), Number(7), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(8), '45'), Number(0)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(8), '56'), Number(0)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(15), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(16), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(16), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SADALP Vd.8H,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 8, 'acc': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpadalq_u16': ARMSema(intrin='vpadalq_u16', inst='UADALP', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(32)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '82'), Number(0), Number(3), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(16), '45'), Number(1)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(16), '56'), Number(1)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(31), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(32), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(32), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UADALP Vd.4S,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 4, 'acc': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpadalq_u32': ARMSema(intrin='vpadalq_u32', inst='UADALP', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '82'), Number(0), Number(1), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(32), '45'), Number(1)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(32), '56'), Number(1)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(63), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(64), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(64), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UADALP Vd.2D,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 2, 'acc': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpadalq_u8': ARMSema(intrin='vpadalq_u8', inst='UADALP', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(16)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '82'), Number(0), Number(7), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(8), '45'), Number(1)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(8), '56'), Number(1)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(15), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(16), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(16), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UADALP Vd.8H,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 8, 'acc': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpadd_s16': ARMSema(intrin='vpadd_s16', inst='ADDP', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '28'), '29')], ('bits', Number(16)), '30'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('bits', Number(16)), '34'), For(Var('e', '60'), Number(0), Number(3), [Update(Var('element1', '37'), ElemSlice(Var('concat', '39'), BinaryExpr('*', Number(2), Var('e', '40'), '41'), Number(16), '43')), Update(Var('element2', '44'), ElemSlice(Var('concat', '46'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '47'), '48'), Number(1), '49'), Number(16), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(16), '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59'))], 1, '61'), Update(VReg(Var('d', '63'), '64'), Var('result', '65'))], rettype='int16x4_t', ret_is_signed=True, inst_form='ADDP Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_pair'),
    'vpadd_s32': ARMSema(intrin='vpadd_s32', inst='ADDP', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '28'), '29')], ('bits', Number(32)), '30'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('bits', Number(32)), '34'), For(Var('e', '60'), Number(0), Number(1), [Update(Var('element1', '37'), ElemSlice(Var('concat', '39'), BinaryExpr('*', Number(2), Var('e', '40'), '41'), Number(32), '43')), Update(Var('element2', '44'), ElemSlice(Var('concat', '46'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '47'), '48'), Number(1), '49'), Number(32), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(32), '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59'))], 1, '61'), Update(VReg(Var('d', '63'), '64'), Var('result', '65'))], rettype='int32x2_t', ret_is_signed=True, inst_form='ADDP Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_pair'),
    'vpadd_s8': ARMSema(intrin='vpadd_s8', inst='ADDP', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '28'), '29')], ('bits', Number(8)), '30'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('bits', Number(8)), '34'), For(Var('e', '60'), Number(0), Number(7), [Update(Var('element1', '37'), ElemSlice(Var('concat', '39'), BinaryExpr('*', Number(2), Var('e', '40'), '41'), Number(8), '43')), Update(Var('element2', '44'), ElemSlice(Var('concat', '46'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '47'), '48'), Number(1), '49'), Number(8), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(8), '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59'))], 1, '61'), Update(VReg(Var('d', '63'), '64'), Var('result', '65'))], rettype='int8x8_t', ret_is_signed=True, inst_form='ADDP Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_pair'),
    'vpadd_u16': ARMSema(intrin='vpadd_u16', inst='ADDP', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '28'), '29')], ('bits', Number(16)), '30'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('bits', Number(16)), '34'), For(Var('e', '60'), Number(0), Number(3), [Update(Var('element1', '37'), ElemSlice(Var('concat', '39'), BinaryExpr('*', Number(2), Var('e', '40'), '41'), Number(16), '43')), Update(Var('element2', '44'), ElemSlice(Var('concat', '46'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '47'), '48'), Number(1), '49'), Number(16), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(16), '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59'))], 1, '61'), Update(VReg(Var('d', '63'), '64'), Var('result', '65'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='ADDP Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_pair'),
    'vpadd_u32': ARMSema(intrin='vpadd_u32', inst='ADDP', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '28'), '29')], ('bits', Number(32)), '30'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('bits', Number(32)), '34'), For(Var('e', '60'), Number(0), Number(1), [Update(Var('element1', '37'), ElemSlice(Var('concat', '39'), BinaryExpr('*', Number(2), Var('e', '40'), '41'), Number(32), '43')), Update(Var('element2', '44'), ElemSlice(Var('concat', '46'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '47'), '48'), Number(1), '49'), Number(32), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(32), '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59'))], 1, '61'), Update(VReg(Var('d', '63'), '64'), Var('result', '65'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='ADDP Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_pair'),
    'vpadd_u8': ARMSema(intrin='vpadd_u8', inst='ADDP', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '28'), '29')], ('bits', Number(8)), '30'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('bits', Number(8)), '34'), For(Var('e', '60'), Number(0), Number(7), [Update(Var('element1', '37'), ElemSlice(Var('concat', '39'), BinaryExpr('*', Number(2), Var('e', '40'), '41'), Number(8), '43')), Update(Var('element2', '44'), ElemSlice(Var('concat', '46'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '47'), '48'), Number(1), '49'), Number(8), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(8), '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59'))], 1, '61'), Update(VReg(Var('d', '63'), '64'), Var('result', '65'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='ADDP Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_pair'),
    'vpaddd_s64': ARMSema(intrin='vpaddd_s64', inst='ADDP', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), Update(VReg(Var('d', '9'), '10'), Call('Reduce', [Number(5), Var('operand', '13'), Number(64)], '15'))], rettype='int64_t', ret_is_signed=True, inst_form='ADDP Dd,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'op': 5}, belongs_to='aarch64_vector_reduce_add_sisd'),
    'vpaddd_u64': ARMSema(intrin='vpaddd_u64', inst='ADDP', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), Update(VReg(Var('d', '9'), '10'), Call('Reduce', [Number(5), Var('operand', '13'), Number(64)], '15'))], rettype='uint64_t', ret_is_signed=False, inst_form='ADDP Dd,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'op': 5}, belongs_to='aarch64_vector_reduce_add_sisd'),
    'vpaddl_s16': ARMSema(intrin='vpaddl_s16', inst='SADDLP', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(32)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), Call('Zeros', [], '33')), For(Var('e', '82'), Number(0), Number(1), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(16), '45'), Number(0)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(16), '56'), Number(0)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(31), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(32), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(32), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SADDLP Vd.2S,Vn.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'elements': 2, 'acc': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpaddl_s32': ARMSema(intrin='vpaddl_s32', inst='SADDLP', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), Call('Zeros', [], '33')), For(Var('e', '82'), Number(0), Number(0), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(32), '45'), Number(0)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(32), '56'), Number(0)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(63), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(64), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(64), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='int64x1_t', ret_is_signed=True, inst_form='SADDLP Vd.1D,Vn.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'elements': 1, 'acc': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpaddl_s8': ARMSema(intrin='vpaddl_s8', inst='SADDLP', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(16)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), Call('Zeros', [], '33')), For(Var('e', '82'), Number(0), Number(3), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(8), '45'), Number(0)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(8), '56'), Number(0)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(15), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(16), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(16), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SADDLP Vd.4H,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 4, 'acc': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpaddl_u16': ARMSema(intrin='vpaddl_u16', inst='UADDLP', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(32)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), Call('Zeros', [], '33')), For(Var('e', '82'), Number(0), Number(1), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(16), '45'), Number(1)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(16), '56'), Number(1)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(31), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(32), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(32), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='UADDLP Vd.2S,Vn.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'elements': 2, 'acc': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpaddl_u32': ARMSema(intrin='vpaddl_u32', inst='UADDLP', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), Call('Zeros', [], '33')), For(Var('e', '82'), Number(0), Number(0), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(32), '45'), Number(1)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(32), '56'), Number(1)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(63), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(64), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(64), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='UADDLP Vd.1D,Vn.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'elements': 1, 'acc': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpaddl_u8': ARMSema(intrin='vpaddl_u8', inst='UADDLP', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(16)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), Call('Zeros', [], '33')), For(Var('e', '82'), Number(0), Number(3), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(8), '45'), Number(1)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(8), '56'), Number(1)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(15), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(16), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(16), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='UADDLP Vd.4H,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 4, 'acc': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpaddlq_s16': ARMSema(intrin='vpaddlq_s16', inst='SADDLP', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(32)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), Call('Zeros', [], '33')), For(Var('e', '82'), Number(0), Number(3), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(16), '45'), Number(0)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(16), '56'), Number(0)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(31), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(32), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(32), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SADDLP Vd.4S,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 128, 'elements': 4, 'acc': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpaddlq_s32': ARMSema(intrin='vpaddlq_s32', inst='SADDLP', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), Call('Zeros', [], '33')), For(Var('e', '82'), Number(0), Number(1), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(32), '45'), Number(0)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(32), '56'), Number(0)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(63), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(64), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(64), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SADDLP Vd.2D,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 128, 'elements': 2, 'acc': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpaddlq_s8': ARMSema(intrin='vpaddlq_s8', inst='SADDLP', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(16)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), Call('Zeros', [], '33')), For(Var('e', '82'), Number(0), Number(7), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(8), '45'), Number(0)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(8), '56'), Number(0)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(15), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(16), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(16), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SADDLP Vd.8H,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 8, 'acc': False, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpaddlq_u16': ARMSema(intrin='vpaddlq_u16', inst='UADDLP', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(32)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), Call('Zeros', [], '33')), For(Var('e', '82'), Number(0), Number(3), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(16), '45'), Number(1)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(16), '56'), Number(1)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(31), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(32), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(32), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UADDLP Vd.4S,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 128, 'elements': 4, 'acc': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpaddlq_u32': ARMSema(intrin='vpaddlq_u32', inst='UADDLP', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), Call('Zeros', [], '33')), For(Var('e', '82'), Number(0), Number(1), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(32), '45'), Number(1)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(32), '56'), Number(1)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(63), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(64), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(64), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UADDLP Vd.2D,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 128, 'elements': 2, 'acc': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpaddlq_u8': ARMSema(intrin='vpaddlq_u8', inst='UADDLP', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result2', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclUndef(Var('sum', '18'), '19')], ('bits', Number(16)), '20'), VarsDecl([VarDeclUndef(Var('op1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('op2', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('result', '27'), Call('Zeros', [], '33')), For(Var('e', '82'), Number(0), Number(7), [Update(Var('op1', '37'), Call('Int', [ElemSlice(Var('operand', '40'), BinaryExpr('*', Number(2), Var('e', '41'), '42'), Number(8), '45'), Number(1)], '47')), Update(Var('op2', '48'), Call('Int', [ElemSlice(Var('operand', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(8), '56'), Number(1)], '58')), Update(Var('sum', '59'), ArrayIndex(BinaryExpr('+', Var('op1', '60'), Var('op2', '61'), '62'), [SliceRange(Number(15), Number(0), '66')], '67')), Update(ElemSlice(Var('result2', '69'), Var('e', '70'), Number(16), '73'), BinaryExpr('+', ElemSlice(Var('result', '75'), Var('e', '76'), Number(16), '79'), Var('sum', '80'), '81'))], 1, '83'), Update(VReg(Var('d', '85'), '86'), Var('result2', '87'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UADDLP Vd.8H,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 8, 'acc': False, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_pairwise'),
    'vpaddq_s16': ARMSema(intrin='vpaddq_s16', inst='ADDP', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(256)), '26'), VarsDecl([VarDeclUndef(Var('element1', '28'), '29')], ('bits', Number(16)), '30'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('bits', Number(16)), '34'), For(Var('e', '60'), Number(0), Number(7), [Update(Var('element1', '37'), ElemSlice(Var('concat', '39'), BinaryExpr('*', Number(2), Var('e', '40'), '41'), Number(16), '43')), Update(Var('element2', '44'), ElemSlice(Var('concat', '46'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '47'), '48'), Number(1), '49'), Number(16), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(16), '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59'))], 1, '61'), Update(VReg(Var('d', '63'), '64'), Var('result', '65'))], rettype='int16x8_t', ret_is_signed=True, inst_form='ADDP Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_pair'),
    'vpaddq_s32': ARMSema(intrin='vpaddq_s32', inst='ADDP', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(256)), '26'), VarsDecl([VarDeclUndef(Var('element1', '28'), '29')], ('bits', Number(32)), '30'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('bits', Number(32)), '34'), For(Var('e', '60'), Number(0), Number(3), [Update(Var('element1', '37'), ElemSlice(Var('concat', '39'), BinaryExpr('*', Number(2), Var('e', '40'), '41'), Number(32), '43')), Update(Var('element2', '44'), ElemSlice(Var('concat', '46'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '47'), '48'), Number(1), '49'), Number(32), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(32), '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59'))], 1, '61'), Update(VReg(Var('d', '63'), '64'), Var('result', '65'))], rettype='int32x4_t', ret_is_signed=True, inst_form='ADDP Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_pair'),
    'vpaddq_s64': ARMSema(intrin='vpaddq_s64', inst='ADDP', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(256)), '26'), VarsDecl([VarDeclUndef(Var('element1', '28'), '29')], ('bits', Number(64)), '30'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('bits', Number(64)), '34'), For(Var('e', '60'), Number(0), Number(1), [Update(Var('element1', '37'), ElemSlice(Var('concat', '39'), BinaryExpr('*', Number(2), Var('e', '40'), '41'), Number(64), '43')), Update(Var('element2', '44'), ElemSlice(Var('concat', '46'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '47'), '48'), Number(1), '49'), Number(64), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(64), '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59'))], 1, '61'), Update(VReg(Var('d', '63'), '64'), Var('result', '65'))], rettype='int64x2_t', ret_is_signed=True, inst_form='ADDP Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_pair'),
    'vpaddq_s8': ARMSema(intrin='vpaddq_s8', inst='ADDP', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(256)), '26'), VarsDecl([VarDeclUndef(Var('element1', '28'), '29')], ('bits', Number(8)), '30'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('bits', Number(8)), '34'), For(Var('e', '60'), Number(0), Number(15), [Update(Var('element1', '37'), ElemSlice(Var('concat', '39'), BinaryExpr('*', Number(2), Var('e', '40'), '41'), Number(8), '43')), Update(Var('element2', '44'), ElemSlice(Var('concat', '46'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '47'), '48'), Number(1), '49'), Number(8), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(8), '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59'))], 1, '61'), Update(VReg(Var('d', '63'), '64'), Var('result', '65'))], rettype='int8x16_t', ret_is_signed=True, inst_form='ADDP Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_pair'),
    'vpaddq_u16': ARMSema(intrin='vpaddq_u16', inst='ADDP', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(256)), '26'), VarsDecl([VarDeclUndef(Var('element1', '28'), '29')], ('bits', Number(16)), '30'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('bits', Number(16)), '34'), For(Var('e', '60'), Number(0), Number(7), [Update(Var('element1', '37'), ElemSlice(Var('concat', '39'), BinaryExpr('*', Number(2), Var('e', '40'), '41'), Number(16), '43')), Update(Var('element2', '44'), ElemSlice(Var('concat', '46'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '47'), '48'), Number(1), '49'), Number(16), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(16), '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59'))], 1, '61'), Update(VReg(Var('d', '63'), '64'), Var('result', '65'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='ADDP Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_pair'),
    'vpaddq_u32': ARMSema(intrin='vpaddq_u32', inst='ADDP', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(256)), '26'), VarsDecl([VarDeclUndef(Var('element1', '28'), '29')], ('bits', Number(32)), '30'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('bits', Number(32)), '34'), For(Var('e', '60'), Number(0), Number(3), [Update(Var('element1', '37'), ElemSlice(Var('concat', '39'), BinaryExpr('*', Number(2), Var('e', '40'), '41'), Number(32), '43')), Update(Var('element2', '44'), ElemSlice(Var('concat', '46'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '47'), '48'), Number(1), '49'), Number(32), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(32), '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59'))], 1, '61'), Update(VReg(Var('d', '63'), '64'), Var('result', '65'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='ADDP Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_pair'),
    'vpaddq_u64': ARMSema(intrin='vpaddq_u64', inst='ADDP', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(256)), '26'), VarsDecl([VarDeclUndef(Var('element1', '28'), '29')], ('bits', Number(64)), '30'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('bits', Number(64)), '34'), For(Var('e', '60'), Number(0), Number(1), [Update(Var('element1', '37'), ElemSlice(Var('concat', '39'), BinaryExpr('*', Number(2), Var('e', '40'), '41'), Number(64), '43')), Update(Var('element2', '44'), ElemSlice(Var('concat', '46'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '47'), '48'), Number(1), '49'), Number(64), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(64), '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59'))], 1, '61'), Update(VReg(Var('d', '63'), '64'), Var('result', '65'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='ADDP Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_pair'),
    'vpaddq_u8': ARMSema(intrin='vpaddq_u8', inst='ADDP', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(256)), '26'), VarsDecl([VarDeclUndef(Var('element1', '28'), '29')], ('bits', Number(8)), '30'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('bits', Number(8)), '34'), For(Var('e', '60'), Number(0), Number(15), [Update(Var('element1', '37'), ElemSlice(Var('concat', '39'), BinaryExpr('*', Number(2), Var('e', '40'), '41'), Number(8), '43')), Update(Var('element2', '44'), ElemSlice(Var('concat', '46'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '47'), '48'), Number(1), '49'), Number(8), '51')), Update(ElemSlice(Var('result', '53'), Var('e', '54'), Number(8), '56'), BinaryExpr('+', Var('element1', '57'), Var('element2', '58'), '59'))], 1, '61'), Update(VReg(Var('d', '63'), '64'), Var('result', '65'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='ADDP Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_pair'),
    'vpmax_s16': ARMSema(intrin='vpmax_s16', inst='SMAXP', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(3), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(16), '45'), Number(0)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(16), '56'), Number(0)], '58')), Update(Var('maxmin', '59'), Call('Max', [Var('element1', '66'), Var('element2', '67')], '68')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(16), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(15), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SMAXP Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpmax_s32': ARMSema(intrin='vpmax_s32', inst='SMAXP', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(1), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(32), '45'), Number(0)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(32), '56'), Number(0)], '58')), Update(Var('maxmin', '59'), Call('Max', [Var('element1', '66'), Var('element2', '67')], '68')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(32), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(31), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SMAXP Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpmax_s8': ARMSema(intrin='vpmax_s8', inst='SMAXP', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(7), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(8), '45'), Number(0)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(8), '56'), Number(0)], '58')), Update(Var('maxmin', '59'), Call('Max', [Var('element1', '66'), Var('element2', '67')], '68')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(8), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(7), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SMAXP Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpmax_u16': ARMSema(intrin='vpmax_u16', inst='UMAXP', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(3), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(16), '45'), Number(1)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(16), '56'), Number(1)], '58')), Update(Var('maxmin', '59'), Call('Max', [Var('element1', '66'), Var('element2', '67')], '68')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(16), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(15), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='UMAXP Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpmax_u32': ARMSema(intrin='vpmax_u32', inst='UMAXP', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(1), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(32), '45'), Number(1)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(32), '56'), Number(1)], '58')), Update(Var('maxmin', '59'), Call('Max', [Var('element1', '66'), Var('element2', '67')], '68')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(32), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(31), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='UMAXP Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpmax_u8': ARMSema(intrin='vpmax_u8', inst='UMAXP', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(7), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(8), '45'), Number(1)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(8), '56'), Number(1)], '58')), Update(Var('maxmin', '59'), Call('Max', [Var('element1', '66'), Var('element2', '67')], '68')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(8), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(7), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='UMAXP Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpmaxq_s16': ARMSema(intrin='vpmaxq_s16', inst='SMAXP', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(256)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(7), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(16), '45'), Number(0)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(16), '56'), Number(0)], '58')), Update(Var('maxmin', '59'), Call('Max', [Var('element1', '66'), Var('element2', '67')], '68')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(16), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(15), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SMAXP Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpmaxq_s32': ARMSema(intrin='vpmaxq_s32', inst='SMAXP', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(256)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(3), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(32), '45'), Number(0)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(32), '56'), Number(0)], '58')), Update(Var('maxmin', '59'), Call('Max', [Var('element1', '66'), Var('element2', '67')], '68')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(32), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(31), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SMAXP Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpmaxq_s8': ARMSema(intrin='vpmaxq_s8', inst='SMAXP', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(256)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(15), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(8), '45'), Number(0)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(8), '56'), Number(0)], '58')), Update(Var('maxmin', '59'), Call('Max', [Var('element1', '66'), Var('element2', '67')], '68')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(8), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(7), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SMAXP Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpmaxq_u16': ARMSema(intrin='vpmaxq_u16', inst='UMAXP', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(256)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(7), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(16), '45'), Number(1)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(16), '56'), Number(1)], '58')), Update(Var('maxmin', '59'), Call('Max', [Var('element1', '66'), Var('element2', '67')], '68')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(16), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(15), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UMAXP Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpmaxq_u32': ARMSema(intrin='vpmaxq_u32', inst='UMAXP', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(256)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(3), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(32), '45'), Number(1)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(32), '56'), Number(1)], '58')), Update(Var('maxmin', '59'), Call('Max', [Var('element1', '66'), Var('element2', '67')], '68')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(32), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(31), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UMAXP Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpmaxq_u8': ARMSema(intrin='vpmaxq_u8', inst='UMAXP', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(256)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(15), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(8), '45'), Number(1)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(8), '56'), Number(1)], '58')), Update(Var('maxmin', '59'), Call('Max', [Var('element1', '66'), Var('element2', '67')], '68')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(8), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(7), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='UMAXP Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True, 'minimum': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpmin_s16': ARMSema(intrin='vpmin_s16', inst='SMINP', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(3), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(16), '45'), Number(0)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(16), '56'), Number(0)], '58')), Update(Var('maxmin', '59'), Call('Min', [Var('element1', '61'), Var('element2', '62')], '63')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(16), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(15), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SMINP Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpmin_s32': ARMSema(intrin='vpmin_s32', inst='SMINP', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(1), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(32), '45'), Number(0)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(32), '56'), Number(0)], '58')), Update(Var('maxmin', '59'), Call('Min', [Var('element1', '61'), Var('element2', '62')], '63')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(32), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(31), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SMINP Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpmin_s8': ARMSema(intrin='vpmin_s8', inst='SMINP', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(7), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(8), '45'), Number(0)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(8), '56'), Number(0)], '58')), Update(Var('maxmin', '59'), Call('Min', [Var('element1', '61'), Var('element2', '62')], '63')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(8), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(7), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SMINP Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpmin_u16': ARMSema(intrin='vpmin_u16', inst='UMINP', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(3), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(16), '45'), Number(1)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(16), '56'), Number(1)], '58')), Update(Var('maxmin', '59'), Call('Min', [Var('element1', '61'), Var('element2', '62')], '63')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(16), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(15), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='UMINP Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpmin_u32': ARMSema(intrin='vpmin_u32', inst='UMINP', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(1), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(32), '45'), Number(1)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(32), '56'), Number(1)], '58')), Update(Var('maxmin', '59'), Call('Min', [Var('element1', '61'), Var('element2', '62')], '63')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(32), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(31), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='UMINP Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpmin_u8': ARMSema(intrin='vpmin_u8', inst='UMINP', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(128)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(7), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(8), '45'), Number(1)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(8), '56'), Number(1)], '58')), Update(Var('maxmin', '59'), Call('Min', [Var('element1', '61'), Var('element2', '62')], '63')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(8), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(7), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='UMINP Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpminq_s16': ARMSema(intrin='vpminq_s16', inst='SMINP', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(256)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(7), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(16), '45'), Number(0)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(16), '56'), Number(0)], '58')), Update(Var('maxmin', '59'), Call('Min', [Var('element1', '61'), Var('element2', '62')], '63')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(16), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(15), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SMINP Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpminq_s32': ARMSema(intrin='vpminq_s32', inst='SMINP', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(256)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(3), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(32), '45'), Number(0)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(32), '56'), Number(0)], '58')), Update(Var('maxmin', '59'), Call('Min', [Var('element1', '61'), Var('element2', '62')], '63')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(32), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(31), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SMINP Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpminq_s8': ARMSema(intrin='vpminq_s8', inst='SMINP', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(256)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(15), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(8), '45'), Number(0)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(8), '56'), Number(0)], '58')), Update(Var('maxmin', '59'), Call('Min', [Var('element1', '61'), Var('element2', '62')], '63')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(8), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(7), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SMINP Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpminq_u16': ARMSema(intrin='vpminq_u16', inst='UMINP', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(256)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(7), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(16), '45'), Number(1)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(16), '56'), Number(1)], '58')), Update(Var('maxmin', '59'), Call('Min', [Var('element1', '61'), Var('element2', '62')], '63')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(16), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(15), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UMINP Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpminq_u32': ARMSema(intrin='vpminq_u32', inst='UMINP', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(256)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(3), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(32), '45'), Number(1)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(32), '56'), Number(1)], '58')), Update(Var('maxmin', '59'), Call('Min', [Var('element1', '61'), Var('element2', '62')], '63')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(32), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(31), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UMINP Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vpminq_u8': ARMSema(intrin='vpminq_u8', inst='UMINP', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('concat', '24'), BinaryExpr(':', Var('operand2', '21'), Var('operand1', '22'), '23'), '25')], ('bits', Number(256)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('maxmin', '33'), '34')], ('integer', Number(64)), '35'), For(Var('e', '80'), Number(0), Number(15), [Update(Var('element1', '38'), Call('Int', [ElemSlice(Var('concat', '41'), BinaryExpr('*', Number(2), Var('e', '42'), '43'), Number(8), '45'), Number(1)], '47')), Update(Var('element2', '48'), Call('Int', [ElemSlice(Var('concat', '51'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '52'), '53'), Number(1), '54'), Number(8), '56'), Number(1)], '58')), Update(Var('maxmin', '59'), Call('Min', [Var('element1', '61'), Var('element2', '62')], '63')), Update(ElemSlice(Var('result', '71'), Var('e', '72'), Number(8), '74'), ArrayIndex(Var('maxmin', '75'), [SliceRange(Number(7), Number(0), '78')], '79'))], 1, '81'), Update(VReg(Var('d', '83'), '84'), Var('result', '85'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='UMINP Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True, 'minimum': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_max_min_pair'),
    'vqabs_s16': ARMSema(intrin='vqabs_s16', inst='SQABS', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(3), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(16), '29')], '30')), Update(Var('element2', '35'), Call('Abs', [Var('element', '37')], '38')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(16), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(16)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SQABS Vd.4H,Vn.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_simd'),
    'vqabs_s32': ARMSema(intrin='vqabs_s32', inst='SQABS', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(1), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(32), '29')], '30')), Update(Var('element2', '35'), Call('Abs', [Var('element', '37')], '38')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(32), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(32)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SQABS Vd.2S,Vn.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_simd'),
    'vqabs_s64': ARMSema(intrin='vqabs_s64', inst='SQABS', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(0), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(64), '29')], '30')), Update(Var('element2', '35'), Call('Abs', [Var('element', '37')], '38')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(64), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(64)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int64x1_t', ret_is_signed=True, inst_form='SQABS Dd,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_sisd'),
    'vqabs_s8': ARMSema(intrin='vqabs_s8', inst='SQABS', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(7), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(8), '29')], '30')), Update(Var('element2', '35'), Call('Abs', [Var('element', '37')], '38')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(8), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(8)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SQABS Vd.8B,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_simd'),
    'vqabsb_s8': ARMSema(intrin='vqabsb_s8', inst='SQABS', params=[Parameter(name='a', type='int8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(8)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(0), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(8), '29')], '30')), Update(Var('element2', '35'), Call('Abs', [Var('element', '37')], '38')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(8), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(8)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int8_t', ret_is_signed=True, inst_form='SQABS Bd,Bn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_sisd'),
    'vqabsd_s64': ARMSema(intrin='vqabsd_s64', inst='SQABS', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(0), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(64), '29')], '30')), Update(Var('element2', '35'), Call('Abs', [Var('element', '37')], '38')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(64), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(64)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int64_t', ret_is_signed=True, inst_form='SQABS Dd,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_sisd'),
    'vqabsh_s16': ARMSema(intrin='vqabsh_s16', inst='SQABS', params=[Parameter(name='a', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(16)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(0), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(16), '29')], '30')), Update(Var('element2', '35'), Call('Abs', [Var('element', '37')], '38')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(16), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(16)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int16_t', ret_is_signed=True, inst_form='SQABS Hd,Hn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_sisd'),
    'vqabsq_s16': ARMSema(intrin='vqabsq_s16', inst='SQABS', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(7), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(16), '29')], '30')), Update(Var('element2', '35'), Call('Abs', [Var('element', '37')], '38')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(16), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(16)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SQABS Vd.8H,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_simd'),
    'vqabsq_s32': ARMSema(intrin='vqabsq_s32', inst='SQABS', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(3), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(32), '29')], '30')), Update(Var('element2', '35'), Call('Abs', [Var('element', '37')], '38')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(32), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(32)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQABS Vd.4S,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_simd'),
    'vqabsq_s64': ARMSema(intrin='vqabsq_s64', inst='SQABS', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(1), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(64), '29')], '30')), Update(Var('element2', '35'), Call('Abs', [Var('element', '37')], '38')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(64), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(64)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SQABS Vd.2D,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_simd'),
    'vqabsq_s8': ARMSema(intrin='vqabsq_s8', inst='SQABS', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(15), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(8), '29')], '30')), Update(Var('element2', '35'), Call('Abs', [Var('element', '37')], '38')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(8), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(8)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SQABS Vd.16B,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_simd'),
    'vqabss_s32': ARMSema(intrin='vqabss_s32', inst='SQABS', params=[Parameter(name='a', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(32)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(0), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(32), '29')], '30')), Update(Var('element2', '35'), Call('Abs', [Var('element', '37')], '38')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(32), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(32)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int32_t', ret_is_signed=True, inst_form='SQABS Sd,Sn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'neg': False}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_sisd'),
    'vqadd_s16': ARMSema(intrin='vqadd_s16', inst='SQADD', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(16), '48'), Number(0)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(16), '59'), Call('SatQ', [Var('sum', '61'), Number(16), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SQADD Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_simd'),
    'vqadd_s32': ARMSema(intrin='vqadd_s32', inst='SQADD', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(32), '48'), Number(0)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(32), '59'), Call('SatQ', [Var('sum', '61'), Number(32), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SQADD Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_simd'),
    'vqadd_s64': ARMSema(intrin='vqadd_s64', inst='SQADD', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(0), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(64), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(64), '48'), Number(0)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(64), '59'), Call('SatQ', [Var('sum', '61'), Number(64), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int64x1_t', ret_is_signed=True, inst_form='SQADD Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_sisd'),
    'vqadd_s8': ARMSema(intrin='vqadd_s8', inst='SQADD', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(8), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(8), '48'), Number(0)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(8), '59'), Call('SatQ', [Var('sum', '61'), Number(8), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SQADD Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_simd'),
    'vqadd_u16': ARMSema(intrin='vqadd_u16', inst='UQADD', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(16), '48'), Number(1)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(16), '59'), Call('SatQ', [Var('sum', '61'), Number(16), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='UQADD Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_simd'),
    'vqadd_u32': ARMSema(intrin='vqadd_u32', inst='UQADD', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(32), '48'), Number(1)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(32), '59'), Call('SatQ', [Var('sum', '61'), Number(32), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='UQADD Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_simd'),
    'vqadd_u64': ARMSema(intrin='vqadd_u64', inst='UQADD', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(0), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(64), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(64), '48'), Number(1)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(64), '59'), Call('SatQ', [Var('sum', '61'), Number(64), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='UQADD Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_sisd'),
    'vqadd_u8': ARMSema(intrin='vqadd_u8', inst='UQADD', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(8), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(8), '48'), Number(1)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(8), '59'), Call('SatQ', [Var('sum', '61'), Number(8), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='UQADD Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_simd'),
    'vqaddb_s8': ARMSema(intrin='vqaddb_s8', inst='SQADD', params=[Parameter(name='a', type='int8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(8)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(8)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(0), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(8), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(8), '48'), Number(0)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(8), '59'), Call('SatQ', [Var('sum', '61'), Number(8), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int8_t', ret_is_signed=True, inst_form='SQADD Bd,Bn,Bm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_sisd'),
    'vqaddb_u8': ARMSema(intrin='vqaddb_u8', inst='UQADD', params=[Parameter(name='a', type='uint8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(8)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(8)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(0), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(8), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(8), '48'), Number(1)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(8), '59'), Call('SatQ', [Var('sum', '61'), Number(8), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint8_t', ret_is_signed=False, inst_form='UQADD Bd,Bn,Bm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_sisd'),
    'vqaddd_s64': ARMSema(intrin='vqaddd_s64', inst='SQADD', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(0), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(64), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(64), '48'), Number(0)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(64), '59'), Call('SatQ', [Var('sum', '61'), Number(64), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int64_t', ret_is_signed=True, inst_form='SQADD Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_sisd'),
    'vqaddd_u64': ARMSema(intrin='vqaddd_u64', inst='UQADD', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(0), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(64), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(64), '48'), Number(1)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(64), '59'), Call('SatQ', [Var('sum', '61'), Number(64), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint64_t', ret_is_signed=False, inst_form='UQADD Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_sisd'),
    'vqaddh_s16': ARMSema(intrin='vqaddh_s16', inst='SQADD', params=[Parameter(name='a', type='int16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(16)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(16)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(0), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(16), '48'), Number(0)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(16), '59'), Call('SatQ', [Var('sum', '61'), Number(16), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int16_t', ret_is_signed=True, inst_form='SQADD Hd,Hn,Hm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_sisd'),
    'vqaddh_u16': ARMSema(intrin='vqaddh_u16', inst='UQADD', params=[Parameter(name='a', type='uint16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(16)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(16)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(0), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(16), '48'), Number(1)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(16), '59'), Call('SatQ', [Var('sum', '61'), Number(16), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint16_t', ret_is_signed=False, inst_form='UQADD Hd,Hn,Hm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_sisd'),
    'vqaddq_s16': ARMSema(intrin='vqaddq_s16', inst='SQADD', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(16), '48'), Number(0)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(16), '59'), Call('SatQ', [Var('sum', '61'), Number(16), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SQADD Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_simd'),
    'vqaddq_s32': ARMSema(intrin='vqaddq_s32', inst='SQADD', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(32), '48'), Number(0)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(32), '59'), Call('SatQ', [Var('sum', '61'), Number(32), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQADD Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_simd'),
    'vqaddq_s64': ARMSema(intrin='vqaddq_s64', inst='SQADD', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(64), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(64), '48'), Number(0)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(64), '59'), Call('SatQ', [Var('sum', '61'), Number(64), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SQADD Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_simd'),
    'vqaddq_s8': ARMSema(intrin='vqaddq_s8', inst='SQADD', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(15), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(8), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(8), '48'), Number(0)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(8), '59'), Call('SatQ', [Var('sum', '61'), Number(8), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SQADD Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_simd'),
    'vqaddq_u16': ARMSema(intrin='vqaddq_u16', inst='UQADD', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(16), '48'), Number(1)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(16), '59'), Call('SatQ', [Var('sum', '61'), Number(16), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UQADD Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_simd'),
    'vqaddq_u32': ARMSema(intrin='vqaddq_u32', inst='UQADD', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(32), '48'), Number(1)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(32), '59'), Call('SatQ', [Var('sum', '61'), Number(32), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UQADD Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_simd'),
    'vqaddq_u64': ARMSema(intrin='vqaddq_u64', inst='UQADD', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(64), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(64), '48'), Number(1)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(64), '59'), Call('SatQ', [Var('sum', '61'), Number(64), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UQADD Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_simd'),
    'vqaddq_u8': ARMSema(intrin='vqaddq_u8', inst='UQADD', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(15), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(8), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(8), '48'), Number(1)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(8), '59'), Call('SatQ', [Var('sum', '61'), Number(8), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='UQADD Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_simd'),
    'vqadds_s32': ARMSema(intrin='vqadds_s32', inst='SQADD', params=[Parameter(name='a', type='int32_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(32)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(32)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(0), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(32), '48'), Number(0)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(32), '59'), Call('SatQ', [Var('sum', '61'), Number(32), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int32_t', ret_is_signed=True, inst_form='SQADD Sd,Sn,Sm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_sisd'),
    'vqadds_u32': ARMSema(intrin='vqadds_u32', inst='UQADD', params=[Parameter(name='a', type='uint32_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(32)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(32)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sum', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(0), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(32), '48'), Number(1)], '50')), Update(Var('sum', '51'), BinaryExpr('+', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(32), '59'), Call('SatQ', [Var('sum', '61'), Number(32), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint32_t', ret_is_signed=False, inst_form='UQADD Sd,Sn,Sm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_saturating_sisd'),
    'vqdmlal_high_n_s16': ARMSema(intrin='vqdmlal_high_n_s16', inst='SQDMLAL2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(32)), '39'), VarsDecl([VarDeclUndef(Var('accum', '40'), '41')], ('integer', Number(64)), '42'), VarsDecl([VarDeclUndef(Var('sat1', '43'), '44')], ('boolean', Number(1)), '45'), VarsDecl([VarDeclUndef(Var('sat2', '46'), '47')], ('boolean', Number(1)), '48'), Update(Var('element2', '49'), Call('SInt', [ElemSlice(Var('operand2', '52'), Number(0), Number(16), '55')], '56')), For(Var('e', '115'), Number(0), Number(3), [Update(Var('element1', '59'), Call('SInt', [ElemSlice(Var('operand1', '62'), Var('e', '63'), Number(16), '65')], '66')), Update(Var('product', '67'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '69'), '70'), Var('element2', '71'), '72'), Number(32)], '75')), Update(Var('accum', '90'), BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand3', '93'), Var('e', '94'), Number(32), '97')], '98'), Call('SInt', [Var('product', '100')], '101'), '102')), Update(ElemSlice(Var('result', '105'), Var('e', '106'), Number(32), '109'), Call('SignedSatQ', [Var('accum', '111'), Number(32)], '114'))], 1, '116'), Update(VReg(Var('d', '118'), '119'), Var('result', '120'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQDMLAL2 Vd.4S,Vn.8H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_double_simd'),
    'vqdmlal_high_n_s32': ARMSema(intrin='vqdmlal_high_n_s32', inst='SQDMLAL2', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(64)), '39'), VarsDecl([VarDeclUndef(Var('accum', '40'), '41')], ('integer', Number(64)), '42'), VarsDecl([VarDeclUndef(Var('sat1', '43'), '44')], ('boolean', Number(1)), '45'), VarsDecl([VarDeclUndef(Var('sat2', '46'), '47')], ('boolean', Number(1)), '48'), Update(Var('element2', '49'), Call('SInt', [ElemSlice(Var('operand2', '52'), Number(0), Number(32), '55')], '56')), For(Var('e', '115'), Number(0), Number(1), [Update(Var('element1', '59'), Call('SInt', [ElemSlice(Var('operand1', '62'), Var('e', '63'), Number(32), '65')], '66')), Update(Var('product', '67'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '69'), '70'), Var('element2', '71'), '72'), Number(64)], '75')), Update(Var('accum', '90'), BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand3', '93'), Var('e', '94'), Number(64), '97')], '98'), Call('SInt', [Var('product', '100')], '101'), '102')), Update(ElemSlice(Var('result', '105'), Var('e', '106'), Number(64), '109'), Call('SignedSatQ', [Var('accum', '111'), Number(64)], '114'))], 1, '116'), Update(VReg(Var('d', '118'), '119'), Var('result', '120'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SQDMLAL2 Vd.2D,Vn.4S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_double_simd'),
    'vqdmlal_high_s16': ARMSema(intrin='vqdmlal_high_s16', inst='SQDMLAL2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(32)), '40'), VarsDecl([VarDeclUndef(Var('accum', '41'), '42')], ('integer', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sat1', '44'), '45')], ('boolean', Number(1)), '46'), VarsDecl([VarDeclUndef(Var('sat2', '47'), '48')], ('boolean', Number(1)), '49'), For(Var('e', '116'), Number(0), Number(3), [Update(Var('element1', '52'), Call('SInt', [ElemSlice(Var('operand1', '55'), Var('e', '56'), Number(16), '58')], '59')), Update(Var('element2', '60'), Call('SInt', [ElemSlice(Var('operand2', '63'), Var('e', '64'), Number(16), '66')], '67')), Update(Var('product', '68'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '70'), '71'), Var('element2', '72'), '73'), Number(32)], '76')), Update(Var('accum', '91'), BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand3', '94'), Var('e', '95'), Number(32), '98')], '99'), Call('SInt', [Var('product', '101')], '102'), '103')), Update(ElemSlice(Var('result', '106'), Var('e', '107'), Number(32), '110'), Call('SignedSatQ', [Var('accum', '112'), Number(32)], '115'))], 1, '117'), Update(VReg(Var('d', '119'), '120'), Var('result', '121'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQDMLAL2 Vd.4S,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_dmacc_simd'),
    'vqdmlal_high_s32': ARMSema(intrin='vqdmlal_high_s32', inst='SQDMLAL2', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(64)), '40'), VarsDecl([VarDeclUndef(Var('accum', '41'), '42')], ('integer', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sat1', '44'), '45')], ('boolean', Number(1)), '46'), VarsDecl([VarDeclUndef(Var('sat2', '47'), '48')], ('boolean', Number(1)), '49'), For(Var('e', '116'), Number(0), Number(1), [Update(Var('element1', '52'), Call('SInt', [ElemSlice(Var('operand1', '55'), Var('e', '56'), Number(32), '58')], '59')), Update(Var('element2', '60'), Call('SInt', [ElemSlice(Var('operand2', '63'), Var('e', '64'), Number(32), '66')], '67')), Update(Var('product', '68'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '70'), '71'), Var('element2', '72'), '73'), Number(64)], '76')), Update(Var('accum', '91'), BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand3', '94'), Var('e', '95'), Number(64), '98')], '99'), Call('SInt', [Var('product', '101')], '102'), '103')), Update(ElemSlice(Var('result', '106'), Var('e', '107'), Number(64), '110'), Call('SignedSatQ', [Var('accum', '112'), Number(64)], '115'))], 1, '117'), Update(VReg(Var('d', '119'), '120'), Var('result', '121'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SQDMLAL2 Vd.2D,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_dmacc_simd'),
    'vqdmlal_n_s16': ARMSema(intrin='vqdmlal_n_s16', inst='SQDMLAL', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(32)), '39'), VarsDecl([VarDeclUndef(Var('accum', '40'), '41')], ('integer', Number(64)), '42'), VarsDecl([VarDeclUndef(Var('sat1', '43'), '44')], ('boolean', Number(1)), '45'), VarsDecl([VarDeclUndef(Var('sat2', '46'), '47')], ('boolean', Number(1)), '48'), Update(Var('element2', '49'), Call('SInt', [ElemSlice(Var('operand2', '52'), Number(0), Number(16), '55')], '56')), For(Var('e', '115'), Number(0), Number(3), [Update(Var('element1', '59'), Call('SInt', [ElemSlice(Var('operand1', '62'), Var('e', '63'), Number(16), '65')], '66')), Update(Var('product', '67'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '69'), '70'), Var('element2', '71'), '72'), Number(32)], '75')), Update(Var('accum', '90'), BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand3', '93'), Var('e', '94'), Number(32), '97')], '98'), Call('SInt', [Var('product', '100')], '101'), '102')), Update(ElemSlice(Var('result', '105'), Var('e', '106'), Number(32), '109'), Call('SignedSatQ', [Var('accum', '111'), Number(32)], '114'))], 1, '116'), Update(VReg(Var('d', '118'), '119'), Var('result', '120'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQDMLAL Vd.4S,Vn.4H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_double_simd'),
    'vqdmlal_n_s32': ARMSema(intrin='vqdmlal_n_s32', inst='SQDMLAL', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(64)), '39'), VarsDecl([VarDeclUndef(Var('accum', '40'), '41')], ('integer', Number(64)), '42'), VarsDecl([VarDeclUndef(Var('sat1', '43'), '44')], ('boolean', Number(1)), '45'), VarsDecl([VarDeclUndef(Var('sat2', '46'), '47')], ('boolean', Number(1)), '48'), Update(Var('element2', '49'), Call('SInt', [ElemSlice(Var('operand2', '52'), Number(0), Number(32), '55')], '56')), For(Var('e', '115'), Number(0), Number(1), [Update(Var('element1', '59'), Call('SInt', [ElemSlice(Var('operand1', '62'), Var('e', '63'), Number(32), '65')], '66')), Update(Var('product', '67'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '69'), '70'), Var('element2', '71'), '72'), Number(64)], '75')), Update(Var('accum', '90'), BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand3', '93'), Var('e', '94'), Number(64), '97')], '98'), Call('SInt', [Var('product', '100')], '101'), '102')), Update(ElemSlice(Var('result', '105'), Var('e', '106'), Number(64), '109'), Call('SignedSatQ', [Var('accum', '111'), Number(64)], '114'))], 1, '116'), Update(VReg(Var('d', '118'), '119'), Var('result', '120'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SQDMLAL Vd.2D,Vn.2S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_double_simd'),
    'vqdmlal_s16': ARMSema(intrin='vqdmlal_s16', inst='SQDMLAL', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(32)), '40'), VarsDecl([VarDeclUndef(Var('accum', '41'), '42')], ('integer', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sat1', '44'), '45')], ('boolean', Number(1)), '46'), VarsDecl([VarDeclUndef(Var('sat2', '47'), '48')], ('boolean', Number(1)), '49'), For(Var('e', '116'), Number(0), Number(3), [Update(Var('element1', '52'), Call('SInt', [ElemSlice(Var('operand1', '55'), Var('e', '56'), Number(16), '58')], '59')), Update(Var('element2', '60'), Call('SInt', [ElemSlice(Var('operand2', '63'), Var('e', '64'), Number(16), '66')], '67')), Update(Var('product', '68'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '70'), '71'), Var('element2', '72'), '73'), Number(32)], '76')), Update(Var('accum', '91'), BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand3', '94'), Var('e', '95'), Number(32), '98')], '99'), Call('SInt', [Var('product', '101')], '102'), '103')), Update(ElemSlice(Var('result', '106'), Var('e', '107'), Number(32), '110'), Call('SignedSatQ', [Var('accum', '112'), Number(32)], '115'))], 1, '117'), Update(VReg(Var('d', '119'), '120'), Var('result', '121'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQDMLAL Vd.4S,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_dmacc_simd'),
    'vqdmlal_s32': ARMSema(intrin='vqdmlal_s32', inst='SQDMLAL', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(64)), '40'), VarsDecl([VarDeclUndef(Var('accum', '41'), '42')], ('integer', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sat1', '44'), '45')], ('boolean', Number(1)), '46'), VarsDecl([VarDeclUndef(Var('sat2', '47'), '48')], ('boolean', Number(1)), '49'), For(Var('e', '116'), Number(0), Number(1), [Update(Var('element1', '52'), Call('SInt', [ElemSlice(Var('operand1', '55'), Var('e', '56'), Number(32), '58')], '59')), Update(Var('element2', '60'), Call('SInt', [ElemSlice(Var('operand2', '63'), Var('e', '64'), Number(32), '66')], '67')), Update(Var('product', '68'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '70'), '71'), Var('element2', '72'), '73'), Number(64)], '76')), Update(Var('accum', '91'), BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand3', '94'), Var('e', '95'), Number(64), '98')], '99'), Call('SInt', [Var('product', '101')], '102'), '103')), Update(ElemSlice(Var('result', '106'), Var('e', '107'), Number(64), '110'), Call('SignedSatQ', [Var('accum', '112'), Number(64)], '115'))], 1, '117'), Update(VReg(Var('d', '119'), '120'), Var('result', '121'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SQDMLAL Vd.2D,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_dmacc_simd'),
    'vqdmlalh_s16': ARMSema(intrin='vqdmlalh_s16', inst='SQDMLAL', params=[Parameter(name='a', type='int32_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(16)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(16)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(32)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(32)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(32)), '40'), VarsDecl([VarDeclUndef(Var('accum', '41'), '42')], ('integer', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sat1', '44'), '45')], ('boolean', Number(1)), '46'), VarsDecl([VarDeclUndef(Var('sat2', '47'), '48')], ('boolean', Number(1)), '49'), For(Var('e', '116'), Number(0), Number(0), [Update(Var('element1', '52'), Call('SInt', [ElemSlice(Var('operand1', '55'), Var('e', '56'), Number(16), '58')], '59')), Update(Var('element2', '60'), Call('SInt', [ElemSlice(Var('operand2', '63'), Var('e', '64'), Number(16), '66')], '67')), Update(Var('product', '68'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '70'), '71'), Var('element2', '72'), '73'), Number(32)], '76')), Update(Var('accum', '91'), BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand3', '94'), Var('e', '95'), Number(32), '98')], '99'), Call('SInt', [Var('product', '101')], '102'), '103')), Update(ElemSlice(Var('result', '106'), Var('e', '107'), Number(32), '110'), Call('SignedSatQ', [Var('accum', '112'), Number(32)], '115'))], 1, '117'), Update(VReg(Var('d', '119'), '120'), Var('result', '121'))], rettype='int32_t', ret_is_signed=True, inst_form='SQDMLAL Sd,Hn,Hm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'part': 0, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_dmacc_sisd'),
    'vqdmlals_s32': ARMSema(intrin='vqdmlals_s32', inst='SQDMLAL', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(32)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(32)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(64)), '40'), VarsDecl([VarDeclUndef(Var('accum', '41'), '42')], ('integer', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sat1', '44'), '45')], ('boolean', Number(1)), '46'), VarsDecl([VarDeclUndef(Var('sat2', '47'), '48')], ('boolean', Number(1)), '49'), For(Var('e', '116'), Number(0), Number(0), [Update(Var('element1', '52'), Call('SInt', [ElemSlice(Var('operand1', '55'), Var('e', '56'), Number(32), '58')], '59')), Update(Var('element2', '60'), Call('SInt', [ElemSlice(Var('operand2', '63'), Var('e', '64'), Number(32), '66')], '67')), Update(Var('product', '68'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '70'), '71'), Var('element2', '72'), '73'), Number(64)], '76')), Update(Var('accum', '91'), BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand3', '94'), Var('e', '95'), Number(64), '98')], '99'), Call('SInt', [Var('product', '101')], '102'), '103')), Update(ElemSlice(Var('result', '106'), Var('e', '107'), Number(64), '110'), Call('SignedSatQ', [Var('accum', '112'), Number(64)], '115'))], 1, '117'), Update(VReg(Var('d', '119'), '120'), Var('result', '121'))], rettype='int64_t', ret_is_signed=True, inst_form='SQDMLAL Dd,Sn,Sm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'part': 0, 'sub_op': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_dmacc_sisd'),
    'vqdmlsl_high_n_s16': ARMSema(intrin='vqdmlsl_high_n_s16', inst='SQDMLSL2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(32)), '39'), VarsDecl([VarDeclUndef(Var('accum', '40'), '41')], ('integer', Number(64)), '42'), VarsDecl([VarDeclUndef(Var('sat1', '43'), '44')], ('boolean', Number(1)), '45'), VarsDecl([VarDeclUndef(Var('sat2', '46'), '47')], ('boolean', Number(1)), '48'), Update(Var('element2', '49'), Call('SInt', [ElemSlice(Var('operand2', '52'), Number(0), Number(16), '55')], '56')), For(Var('e', '115'), Number(0), Number(3), [Update(Var('element1', '59'), Call('SInt', [ElemSlice(Var('operand1', '62'), Var('e', '63'), Number(16), '65')], '66')), Update(Var('product', '67'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '69'), '70'), Var('element2', '71'), '72'), Number(32)], '75')), Update(Var('accum', '77'), BinaryExpr('-', Call('SInt', [ElemSlice(Var('operand3', '80'), Var('e', '81'), Number(32), '84')], '85'), Call('SInt', [Var('product', '87')], '88'), '89')), Update(ElemSlice(Var('result', '105'), Var('e', '106'), Number(32), '109'), Call('SignedSatQ', [Var('accum', '111'), Number(32)], '114'))], 1, '116'), Update(VReg(Var('d', '118'), '119'), Var('result', '120'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQDMLSL2 Vd.4S,Vn.8H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_double_simd'),
    'vqdmlsl_high_n_s32': ARMSema(intrin='vqdmlsl_high_n_s32', inst='SQDMLSL2', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(64)), '39'), VarsDecl([VarDeclUndef(Var('accum', '40'), '41')], ('integer', Number(64)), '42'), VarsDecl([VarDeclUndef(Var('sat1', '43'), '44')], ('boolean', Number(1)), '45'), VarsDecl([VarDeclUndef(Var('sat2', '46'), '47')], ('boolean', Number(1)), '48'), Update(Var('element2', '49'), Call('SInt', [ElemSlice(Var('operand2', '52'), Number(0), Number(32), '55')], '56')), For(Var('e', '115'), Number(0), Number(1), [Update(Var('element1', '59'), Call('SInt', [ElemSlice(Var('operand1', '62'), Var('e', '63'), Number(32), '65')], '66')), Update(Var('product', '67'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '69'), '70'), Var('element2', '71'), '72'), Number(64)], '75')), Update(Var('accum', '77'), BinaryExpr('-', Call('SInt', [ElemSlice(Var('operand3', '80'), Var('e', '81'), Number(64), '84')], '85'), Call('SInt', [Var('product', '87')], '88'), '89')), Update(ElemSlice(Var('result', '105'), Var('e', '106'), Number(64), '109'), Call('SignedSatQ', [Var('accum', '111'), Number(64)], '114'))], 1, '116'), Update(VReg(Var('d', '118'), '119'), Var('result', '120'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SQDMLSL2 Vd.2D,Vn.4S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_double_simd'),
    'vqdmlsl_high_s16': ARMSema(intrin='vqdmlsl_high_s16', inst='SQDMLSL2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(32)), '40'), VarsDecl([VarDeclUndef(Var('accum', '41'), '42')], ('integer', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sat1', '44'), '45')], ('boolean', Number(1)), '46'), VarsDecl([VarDeclUndef(Var('sat2', '47'), '48')], ('boolean', Number(1)), '49'), For(Var('e', '116'), Number(0), Number(3), [Update(Var('element1', '52'), Call('SInt', [ElemSlice(Var('operand1', '55'), Var('e', '56'), Number(16), '58')], '59')), Update(Var('element2', '60'), Call('SInt', [ElemSlice(Var('operand2', '63'), Var('e', '64'), Number(16), '66')], '67')), Update(Var('product', '68'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '70'), '71'), Var('element2', '72'), '73'), Number(32)], '76')), Update(Var('accum', '78'), BinaryExpr('-', Call('SInt', [ElemSlice(Var('operand3', '81'), Var('e', '82'), Number(32), '85')], '86'), Call('SInt', [Var('product', '88')], '89'), '90')), Update(ElemSlice(Var('result', '106'), Var('e', '107'), Number(32), '110'), Call('SignedSatQ', [Var('accum', '112'), Number(32)], '115'))], 1, '117'), Update(VReg(Var('d', '119'), '120'), Var('result', '121'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQDMLSL2 Vd.4S,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_dmacc_simd'),
    'vqdmlsl_high_s32': ARMSema(intrin='vqdmlsl_high_s32', inst='SQDMLSL2', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(64)), '40'), VarsDecl([VarDeclUndef(Var('accum', '41'), '42')], ('integer', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sat1', '44'), '45')], ('boolean', Number(1)), '46'), VarsDecl([VarDeclUndef(Var('sat2', '47'), '48')], ('boolean', Number(1)), '49'), For(Var('e', '116'), Number(0), Number(1), [Update(Var('element1', '52'), Call('SInt', [ElemSlice(Var('operand1', '55'), Var('e', '56'), Number(32), '58')], '59')), Update(Var('element2', '60'), Call('SInt', [ElemSlice(Var('operand2', '63'), Var('e', '64'), Number(32), '66')], '67')), Update(Var('product', '68'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '70'), '71'), Var('element2', '72'), '73'), Number(64)], '76')), Update(Var('accum', '78'), BinaryExpr('-', Call('SInt', [ElemSlice(Var('operand3', '81'), Var('e', '82'), Number(64), '85')], '86'), Call('SInt', [Var('product', '88')], '89'), '90')), Update(ElemSlice(Var('result', '106'), Var('e', '107'), Number(64), '110'), Call('SignedSatQ', [Var('accum', '112'), Number(64)], '115'))], 1, '117'), Update(VReg(Var('d', '119'), '120'), Var('result', '121'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SQDMLSL2 Vd.2D,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_dmacc_simd'),
    'vqdmlsl_n_s16': ARMSema(intrin='vqdmlsl_n_s16', inst='SQDMLSL', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(32)), '39'), VarsDecl([VarDeclUndef(Var('accum', '40'), '41')], ('integer', Number(64)), '42'), VarsDecl([VarDeclUndef(Var('sat1', '43'), '44')], ('boolean', Number(1)), '45'), VarsDecl([VarDeclUndef(Var('sat2', '46'), '47')], ('boolean', Number(1)), '48'), Update(Var('element2', '49'), Call('SInt', [ElemSlice(Var('operand2', '52'), Number(0), Number(16), '55')], '56')), For(Var('e', '115'), Number(0), Number(3), [Update(Var('element1', '59'), Call('SInt', [ElemSlice(Var('operand1', '62'), Var('e', '63'), Number(16), '65')], '66')), Update(Var('product', '67'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '69'), '70'), Var('element2', '71'), '72'), Number(32)], '75')), Update(Var('accum', '77'), BinaryExpr('-', Call('SInt', [ElemSlice(Var('operand3', '80'), Var('e', '81'), Number(32), '84')], '85'), Call('SInt', [Var('product', '87')], '88'), '89')), Update(ElemSlice(Var('result', '105'), Var('e', '106'), Number(32), '109'), Call('SignedSatQ', [Var('accum', '111'), Number(32)], '114'))], 1, '116'), Update(VReg(Var('d', '118'), '119'), Var('result', '120'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQDMLSL Vd.4S,Vn.4H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_double_simd'),
    'vqdmlsl_n_s32': ARMSema(intrin='vqdmlsl_n_s32', inst='SQDMLSL', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('operand3', '21'), VReg(Var('d', '19'), '20'), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('result', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element1', '29'), '30')], ('integer', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('element2', '32'), '33')], ('integer', Number(64)), '34'), VarsDecl([VarDeclUndef(Var('product', '37'), '38')], ('bits', Number(64)), '39'), VarsDecl([VarDeclUndef(Var('accum', '40'), '41')], ('integer', Number(64)), '42'), VarsDecl([VarDeclUndef(Var('sat1', '43'), '44')], ('boolean', Number(1)), '45'), VarsDecl([VarDeclUndef(Var('sat2', '46'), '47')], ('boolean', Number(1)), '48'), Update(Var('element2', '49'), Call('SInt', [ElemSlice(Var('operand2', '52'), Number(0), Number(32), '55')], '56')), For(Var('e', '115'), Number(0), Number(1), [Update(Var('element1', '59'), Call('SInt', [ElemSlice(Var('operand1', '62'), Var('e', '63'), Number(32), '65')], '66')), Update(Var('product', '67'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '69'), '70'), Var('element2', '71'), '72'), Number(64)], '75')), Update(Var('accum', '77'), BinaryExpr('-', Call('SInt', [ElemSlice(Var('operand3', '80'), Var('e', '81'), Number(64), '84')], '85'), Call('SInt', [Var('product', '87')], '88'), '89')), Update(ElemSlice(Var('result', '105'), Var('e', '106'), Number(64), '109'), Call('SignedSatQ', [Var('accum', '111'), Number(64)], '114'))], 1, '116'), Update(VReg(Var('d', '118'), '119'), Var('result', '120'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SQDMLSL Vd.2D,Vn.2S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_acc_double_simd'),
    'vqdmlsl_s16': ARMSema(intrin='vqdmlsl_s16', inst='SQDMLSL', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(32)), '40'), VarsDecl([VarDeclUndef(Var('accum', '41'), '42')], ('integer', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sat1', '44'), '45')], ('boolean', Number(1)), '46'), VarsDecl([VarDeclUndef(Var('sat2', '47'), '48')], ('boolean', Number(1)), '49'), For(Var('e', '116'), Number(0), Number(3), [Update(Var('element1', '52'), Call('SInt', [ElemSlice(Var('operand1', '55'), Var('e', '56'), Number(16), '58')], '59')), Update(Var('element2', '60'), Call('SInt', [ElemSlice(Var('operand2', '63'), Var('e', '64'), Number(16), '66')], '67')), Update(Var('product', '68'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '70'), '71'), Var('element2', '72'), '73'), Number(32)], '76')), Update(Var('accum', '78'), BinaryExpr('-', Call('SInt', [ElemSlice(Var('operand3', '81'), Var('e', '82'), Number(32), '85')], '86'), Call('SInt', [Var('product', '88')], '89'), '90')), Update(ElemSlice(Var('result', '106'), Var('e', '107'), Number(32), '110'), Call('SignedSatQ', [Var('accum', '112'), Number(32)], '115'))], 1, '117'), Update(VReg(Var('d', '119'), '120'), Var('result', '121'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQDMLSL Vd.4S,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_dmacc_simd'),
    'vqdmlsl_s32': ARMSema(intrin='vqdmlsl_s32', inst='SQDMLSL', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(128)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(128)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(64)), '40'), VarsDecl([VarDeclUndef(Var('accum', '41'), '42')], ('integer', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sat1', '44'), '45')], ('boolean', Number(1)), '46'), VarsDecl([VarDeclUndef(Var('sat2', '47'), '48')], ('boolean', Number(1)), '49'), For(Var('e', '116'), Number(0), Number(1), [Update(Var('element1', '52'), Call('SInt', [ElemSlice(Var('operand1', '55'), Var('e', '56'), Number(32), '58')], '59')), Update(Var('element2', '60'), Call('SInt', [ElemSlice(Var('operand2', '63'), Var('e', '64'), Number(32), '66')], '67')), Update(Var('product', '68'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '70'), '71'), Var('element2', '72'), '73'), Number(64)], '76')), Update(Var('accum', '78'), BinaryExpr('-', Call('SInt', [ElemSlice(Var('operand3', '81'), Var('e', '82'), Number(64), '85')], '86'), Call('SInt', [Var('product', '88')], '89'), '90')), Update(ElemSlice(Var('result', '106'), Var('e', '107'), Number(64), '110'), Call('SignedSatQ', [Var('accum', '112'), Number(64)], '115'))], 1, '117'), Update(VReg(Var('d', '119'), '120'), Var('result', '121'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SQDMLSL Vd.2D,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_dmacc_simd'),
    'vqdmlslh_s16': ARMSema(intrin='vqdmlslh_s16', inst='SQDMLSL', params=[Parameter(name='a', type='int32_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(16)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(16)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(32)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(32)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(32)), '40'), VarsDecl([VarDeclUndef(Var('accum', '41'), '42')], ('integer', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sat1', '44'), '45')], ('boolean', Number(1)), '46'), VarsDecl([VarDeclUndef(Var('sat2', '47'), '48')], ('boolean', Number(1)), '49'), For(Var('e', '116'), Number(0), Number(0), [Update(Var('element1', '52'), Call('SInt', [ElemSlice(Var('operand1', '55'), Var('e', '56'), Number(16), '58')], '59')), Update(Var('element2', '60'), Call('SInt', [ElemSlice(Var('operand2', '63'), Var('e', '64'), Number(16), '66')], '67')), Update(Var('product', '68'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '70'), '71'), Var('element2', '72'), '73'), Number(32)], '76')), Update(Var('accum', '78'), BinaryExpr('-', Call('SInt', [ElemSlice(Var('operand3', '81'), Var('e', '82'), Number(32), '85')], '86'), Call('SInt', [Var('product', '88')], '89'), '90')), Update(ElemSlice(Var('result', '106'), Var('e', '107'), Number(32), '110'), Call('SignedSatQ', [Var('accum', '112'), Number(32)], '115'))], 1, '117'), Update(VReg(Var('d', '119'), '120'), Var('result', '121'))], rettype='int32_t', ret_is_signed=True, inst_form='SQDMLSL Sd,Hn,Hm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'part': 0, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_dmacc_sisd'),
    'vqdmlsls_s32': ARMSema(intrin='vqdmlsls_s32', inst='SQDMLSL', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='c', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(32)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(32)), '16'), VarsDecl([VarDeclInit(Var('operand3', '22'), VReg(Var('d', '20'), '21'), '23')], ('bits', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('result', '27'), '28')], ('bits', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element1', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('element2', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('product', '38'), '39')], ('bits', Number(64)), '40'), VarsDecl([VarDeclUndef(Var('accum', '41'), '42')], ('integer', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sat1', '44'), '45')], ('boolean', Number(1)), '46'), VarsDecl([VarDeclUndef(Var('sat2', '47'), '48')], ('boolean', Number(1)), '49'), For(Var('e', '116'), Number(0), Number(0), [Update(Var('element1', '52'), Call('SInt', [ElemSlice(Var('operand1', '55'), Var('e', '56'), Number(32), '58')], '59')), Update(Var('element2', '60'), Call('SInt', [ElemSlice(Var('operand2', '63'), Var('e', '64'), Number(32), '66')], '67')), Update(Var('product', '68'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '70'), '71'), Var('element2', '72'), '73'), Number(64)], '76')), Update(Var('accum', '78'), BinaryExpr('-', Call('SInt', [ElemSlice(Var('operand3', '81'), Var('e', '82'), Number(64), '85')], '86'), Call('SInt', [Var('product', '88')], '89'), '90')), Update(ElemSlice(Var('result', '106'), Var('e', '107'), Number(64), '110'), Call('SignedSatQ', [Var('accum', '112'), Number(64)], '115'))], 1, '117'), Update(VReg(Var('d', '119'), '120'), Var('result', '121'))], rettype='int64_t', ret_is_signed=True, inst_form='SQDMLSL Dd,Sn,Sm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'm': 'c'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'part': 0, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_dmacc_sisd'),
    'vqdmulh_n_s16': ARMSema(intrin='vqdmulh_n_s16', inst='SQDMULH', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '24'), Number(0), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('sat', '36'), '37')], ('boolean', Number(1)), '38'), Update(Var('element2', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Number(0), Number(16), '45')], '46')), For(Var('e', '75'), Number(0), Number(3), [Update(Var('element1', '49'), Call('SInt', [ElemSlice(Var('operand1', '52'), Var('e', '53'), Number(16), '55')], '56')), Update(Var('product', '57'), BinaryExpr('+', BinaryExpr('*', Var('element1', '58'), Var('element2', '59'), '60'), Var('round_const', '61'), '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(16), '67'), Call('SignedSatQ', [BinaryExpr('>>', Var('product', '69'), Number(15), '72'), Number(16)], '74'))], 1, '76'), Update(VReg(Var('d', '78'), '79'), Var('result', '80'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SQDMULH Vd.4H,Vn.4H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'elements': 4, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_high_simd'),
    'vqdmulh_n_s32': ARMSema(intrin='vqdmulh_n_s32', inst='SQDMULH', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '24'), Number(0), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('sat', '36'), '37')], ('boolean', Number(1)), '38'), Update(Var('element2', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Number(0), Number(32), '45')], '46')), For(Var('e', '75'), Number(0), Number(1), [Update(Var('element1', '49'), Call('SInt', [ElemSlice(Var('operand1', '52'), Var('e', '53'), Number(32), '55')], '56')), Update(Var('product', '57'), BinaryExpr('+', BinaryExpr('*', Var('element1', '58'), Var('element2', '59'), '60'), Var('round_const', '61'), '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(32), '67'), Call('SignedSatQ', [BinaryExpr('>>', Var('product', '69'), Number(31), '72'), Number(32)], '74'))], 1, '76'), Update(VReg(Var('d', '78'), '79'), Var('result', '80'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SQDMULH Vd.2S,Vn.2S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'elements': 2, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_high_simd'),
    'vqdmulh_s16': ARMSema(intrin='vqdmulh_s16', inst='SQDMULH', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '24'), Number(0), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('sat', '36'), '37')], ('boolean', Number(1)), '38'), For(Var('e', '75'), Number(0), Number(3), [Update(Var('element1', '41'), Call('SInt', [ElemSlice(Var('operand1', '44'), Var('e', '45'), Number(16), '47')], '48')), Update(Var('element2', '49'), Call('SInt', [ElemSlice(Var('operand2', '52'), Var('e', '53'), Number(16), '55')], '56')), Update(Var('product', '57'), BinaryExpr('+', BinaryExpr('*', Var('element1', '58'), Var('element2', '59'), '60'), Var('round_const', '61'), '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(16), '67'), Call('SignedSatQ', [BinaryExpr('>>', Var('product', '69'), Number(15), '72'), Number(16)], '74'))], 1, '76'), Update(VReg(Var('d', '78'), '79'), Var('result', '80'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SQDMULH Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'rounding': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_doubling_simd'),
    'vqdmulh_s32': ARMSema(intrin='vqdmulh_s32', inst='SQDMULH', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '24'), Number(0), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('sat', '36'), '37')], ('boolean', Number(1)), '38'), For(Var('e', '75'), Number(0), Number(1), [Update(Var('element1', '41'), Call('SInt', [ElemSlice(Var('operand1', '44'), Var('e', '45'), Number(32), '47')], '48')), Update(Var('element2', '49'), Call('SInt', [ElemSlice(Var('operand2', '52'), Var('e', '53'), Number(32), '55')], '56')), Update(Var('product', '57'), BinaryExpr('+', BinaryExpr('*', Var('element1', '58'), Var('element2', '59'), '60'), Var('round_const', '61'), '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(32), '67'), Call('SignedSatQ', [BinaryExpr('>>', Var('product', '69'), Number(31), '72'), Number(32)], '74'))], 1, '76'), Update(VReg(Var('d', '78'), '79'), Var('result', '80'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SQDMULH Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'rounding': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_doubling_simd'),
    'vqdmulhh_s16': ARMSema(intrin='vqdmulhh_s16', inst='SQDMULH', params=[Parameter(name='a', type='int16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(16)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(16)), '18'), VarsDecl([VarDeclInit(Var('round_const', '24'), Number(0), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('sat', '36'), '37')], ('boolean', Number(1)), '38'), For(Var('e', '75'), Number(0), Number(0), [Update(Var('element1', '41'), Call('SInt', [ElemSlice(Var('operand1', '44'), Var('e', '45'), Number(16), '47')], '48')), Update(Var('element2', '49'), Call('SInt', [ElemSlice(Var('operand2', '52'), Var('e', '53'), Number(16), '55')], '56')), Update(Var('product', '57'), BinaryExpr('+', BinaryExpr('*', Var('element1', '58'), Var('element2', '59'), '60'), Var('round_const', '61'), '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(16), '67'), Call('SignedSatQ', [BinaryExpr('>>', Var('product', '69'), Number(15), '72'), Number(16)], '74'))], 1, '76'), Update(VReg(Var('d', '78'), '79'), Var('result', '80'))], rettype='int16_t', ret_is_signed=True, inst_form='SQDMULH Hd,Hn,Hm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'rounding': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_doubling_sisd'),
    'vqdmulhq_n_s16': ARMSema(intrin='vqdmulhq_n_s16', inst='SQDMULH', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '24'), Number(0), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('sat', '36'), '37')], ('boolean', Number(1)), '38'), Update(Var('element2', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Number(0), Number(16), '45')], '46')), For(Var('e', '75'), Number(0), Number(7), [Update(Var('element1', '49'), Call('SInt', [ElemSlice(Var('operand1', '52'), Var('e', '53'), Number(16), '55')], '56')), Update(Var('product', '57'), BinaryExpr('+', BinaryExpr('*', Var('element1', '58'), Var('element2', '59'), '60'), Var('round_const', '61'), '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(16), '67'), Call('SignedSatQ', [BinaryExpr('>>', Var('product', '69'), Number(15), '72'), Number(16)], '74'))], 1, '76'), Update(VReg(Var('d', '78'), '79'), Var('result', '80'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SQDMULH Vd.8H,Vn.8H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 128, 'elements': 8, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_high_simd'),
    'vqdmulhq_n_s32': ARMSema(intrin='vqdmulhq_n_s32', inst='SQDMULH', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '24'), Number(0), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('sat', '36'), '37')], ('boolean', Number(1)), '38'), Update(Var('element2', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Number(0), Number(32), '45')], '46')), For(Var('e', '75'), Number(0), Number(3), [Update(Var('element1', '49'), Call('SInt', [ElemSlice(Var('operand1', '52'), Var('e', '53'), Number(32), '55')], '56')), Update(Var('product', '57'), BinaryExpr('+', BinaryExpr('*', Var('element1', '58'), Var('element2', '59'), '60'), Var('round_const', '61'), '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(32), '67'), Call('SignedSatQ', [BinaryExpr('>>', Var('product', '69'), Number(31), '72'), Number(32)], '74'))], 1, '76'), Update(VReg(Var('d', '78'), '79'), Var('result', '80'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQDMULH Vd.4S,Vn.4S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 128, 'elements': 4, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_high_simd'),
    'vqdmulhq_s16': ARMSema(intrin='vqdmulhq_s16', inst='SQDMULH', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '24'), Number(0), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('sat', '36'), '37')], ('boolean', Number(1)), '38'), For(Var('e', '75'), Number(0), Number(7), [Update(Var('element1', '41'), Call('SInt', [ElemSlice(Var('operand1', '44'), Var('e', '45'), Number(16), '47')], '48')), Update(Var('element2', '49'), Call('SInt', [ElemSlice(Var('operand2', '52'), Var('e', '53'), Number(16), '55')], '56')), Update(Var('product', '57'), BinaryExpr('+', BinaryExpr('*', Var('element1', '58'), Var('element2', '59'), '60'), Var('round_const', '61'), '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(16), '67'), Call('SignedSatQ', [BinaryExpr('>>', Var('product', '69'), Number(15), '72'), Number(16)], '74'))], 1, '76'), Update(VReg(Var('d', '78'), '79'), Var('result', '80'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SQDMULH Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'rounding': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_doubling_simd'),
    'vqdmulhq_s32': ARMSema(intrin='vqdmulhq_s32', inst='SQDMULH', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '24'), Number(0), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('sat', '36'), '37')], ('boolean', Number(1)), '38'), For(Var('e', '75'), Number(0), Number(3), [Update(Var('element1', '41'), Call('SInt', [ElemSlice(Var('operand1', '44'), Var('e', '45'), Number(32), '47')], '48')), Update(Var('element2', '49'), Call('SInt', [ElemSlice(Var('operand2', '52'), Var('e', '53'), Number(32), '55')], '56')), Update(Var('product', '57'), BinaryExpr('+', BinaryExpr('*', Var('element1', '58'), Var('element2', '59'), '60'), Var('round_const', '61'), '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(32), '67'), Call('SignedSatQ', [BinaryExpr('>>', Var('product', '69'), Number(31), '72'), Number(32)], '74'))], 1, '76'), Update(VReg(Var('d', '78'), '79'), Var('result', '80'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQDMULH Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'rounding': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_doubling_simd'),
    'vqdmulhs_s32': ARMSema(intrin='vqdmulhs_s32', inst='SQDMULH', params=[Parameter(name='a', type='int32_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(32)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(32)), '18'), VarsDecl([VarDeclInit(Var('round_const', '24'), Number(0), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('sat', '36'), '37')], ('boolean', Number(1)), '38'), For(Var('e', '75'), Number(0), Number(0), [Update(Var('element1', '41'), Call('SInt', [ElemSlice(Var('operand1', '44'), Var('e', '45'), Number(32), '47')], '48')), Update(Var('element2', '49'), Call('SInt', [ElemSlice(Var('operand2', '52'), Var('e', '53'), Number(32), '55')], '56')), Update(Var('product', '57'), BinaryExpr('+', BinaryExpr('*', Var('element1', '58'), Var('element2', '59'), '60'), Var('round_const', '61'), '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(32), '67'), Call('SignedSatQ', [BinaryExpr('>>', Var('product', '69'), Number(31), '72'), Number(32)], '74'))], 1, '76'), Update(VReg(Var('d', '78'), '79'), Var('result', '80'))], rettype='int32_t', ret_is_signed=True, inst_form='SQDMULH Sd,Sn,Sm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'rounding': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_doubling_sisd'),
    'vqdmull_high_n_s16': ARMSema(intrin='vqdmull_high_n_s16', inst='SQDMULL2', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(128)), '20'), VarsDecl([VarDeclUndef(Var('element1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('product', '29'), '30')], ('bits', Number(32)), '31'), VarsDecl([VarDeclUndef(Var('sat', '32'), '33')], ('boolean', Number(1)), '34'), Update(Var('element2', '35'), Call('SInt', [ElemSlice(Var('operand2', '38'), Number(0), Number(16), '41')], '42')), For(Var('e', '69'), Number(0), Number(3), [Update(Var('element1', '45'), Call('SInt', [ElemSlice(Var('operand1', '48'), Var('e', '49'), Number(16), '51')], '52')), Update(Var('product', '53'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '55'), '56'), Var('element2', '57'), '58'), Number(32)], '61')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(32), '67'), Var('product', '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQDMULL2 Vd.4S,Vn.8H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_double_simd'),
    'vqdmull_high_n_s32': ARMSema(intrin='vqdmull_high_n_s32', inst='SQDMULL2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(128)), '20'), VarsDecl([VarDeclUndef(Var('element1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('product', '29'), '30')], ('bits', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('sat', '32'), '33')], ('boolean', Number(1)), '34'), Update(Var('element2', '35'), Call('SInt', [ElemSlice(Var('operand2', '38'), Number(0), Number(32), '41')], '42')), For(Var('e', '69'), Number(0), Number(1), [Update(Var('element1', '45'), Call('SInt', [ElemSlice(Var('operand1', '48'), Var('e', '49'), Number(32), '51')], '52')), Update(Var('product', '53'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '55'), '56'), Var('element2', '57'), '58'), Number(64)], '61')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(64), '67'), Var('product', '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SQDMULL2 Vd.2D,Vn.4S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_double_simd'),
    'vqdmull_high_s16': ARMSema(intrin='vqdmull_high_s16', inst='SQDMULL2', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('product', '30'), '31')], ('bits', Number(32)), '32'), VarsDecl([VarDeclUndef(Var('sat', '33'), '34')], ('boolean', Number(1)), '35'), For(Var('e', '70'), Number(0), Number(3), [Update(Var('element1', '38'), Call('SInt', [ElemSlice(Var('operand1', '41'), Var('e', '42'), Number(16), '44')], '45')), Update(Var('element2', '46'), Call('SInt', [ElemSlice(Var('operand2', '49'), Var('e', '50'), Number(16), '52')], '53')), Update(Var('product', '54'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '56'), '57'), Var('element2', '58'), '59'), Number(32)], '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(32), '68'), Var('product', '69'))], 1, '71'), Update(VReg(Var('d', '73'), '74'), Var('result', '75'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQDMULL2 Vd.4S,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_double_simd'),
    'vqdmull_high_s32': ARMSema(intrin='vqdmull_high_s32', inst='SQDMULL2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('product', '30'), '31')], ('bits', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('sat', '33'), '34')], ('boolean', Number(1)), '35'), For(Var('e', '70'), Number(0), Number(1), [Update(Var('element1', '38'), Call('SInt', [ElemSlice(Var('operand1', '41'), Var('e', '42'), Number(32), '44')], '45')), Update(Var('element2', '46'), Call('SInt', [ElemSlice(Var('operand2', '49'), Var('e', '50'), Number(32), '52')], '53')), Update(Var('product', '54'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '56'), '57'), Var('element2', '58'), '59'), Number(64)], '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(64), '68'), Var('product', '69'))], 1, '71'), Update(VReg(Var('d', '73'), '74'), Var('result', '75'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SQDMULL2 Vd.2D,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_double_simd'),
    'vqdmull_n_s16': ARMSema(intrin='vqdmull_n_s16', inst='SQDMULL', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(128)), '20'), VarsDecl([VarDeclUndef(Var('element1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('product', '29'), '30')], ('bits', Number(32)), '31'), VarsDecl([VarDeclUndef(Var('sat', '32'), '33')], ('boolean', Number(1)), '34'), Update(Var('element2', '35'), Call('SInt', [ElemSlice(Var('operand2', '38'), Number(0), Number(16), '41')], '42')), For(Var('e', '69'), Number(0), Number(3), [Update(Var('element1', '45'), Call('SInt', [ElemSlice(Var('operand1', '48'), Var('e', '49'), Number(16), '51')], '52')), Update(Var('product', '53'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '55'), '56'), Var('element2', '57'), '58'), Number(32)], '61')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(32), '67'), Var('product', '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQDMULL Vd.4S,Vn.4H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_double_simd'),
    'vqdmull_n_s32': ARMSema(intrin='vqdmull_n_s32', inst='SQDMULL', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '13'), VReg(Var('m', '11'), '12'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(128)), '20'), VarsDecl([VarDeclUndef(Var('element1', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('product', '29'), '30')], ('bits', Number(64)), '31'), VarsDecl([VarDeclUndef(Var('sat', '32'), '33')], ('boolean', Number(1)), '34'), Update(Var('element2', '35'), Call('SInt', [ElemSlice(Var('operand2', '38'), Number(0), Number(32), '41')], '42')), For(Var('e', '69'), Number(0), Number(1), [Update(Var('element1', '45'), Call('SInt', [ElemSlice(Var('operand1', '48'), Var('e', '49'), Number(32), '51')], '52')), Update(Var('product', '53'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '55'), '56'), Var('element2', '57'), '58'), Number(64)], '61')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(64), '67'), Var('product', '68'))], 1, '70'), Update(VReg(Var('d', '72'), '73'), Var('result', '74'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SQDMULL Vd.2D,Vn.2S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_double_simd'),
    'vqdmull_s16': ARMSema(intrin='vqdmull_s16', inst='SQDMULL', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('product', '30'), '31')], ('bits', Number(32)), '32'), VarsDecl([VarDeclUndef(Var('sat', '33'), '34')], ('boolean', Number(1)), '35'), For(Var('e', '70'), Number(0), Number(3), [Update(Var('element1', '38'), Call('SInt', [ElemSlice(Var('operand1', '41'), Var('e', '42'), Number(16), '44')], '45')), Update(Var('element2', '46'), Call('SInt', [ElemSlice(Var('operand2', '49'), Var('e', '50'), Number(16), '52')], '53')), Update(Var('product', '54'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '56'), '57'), Var('element2', '58'), '59'), Number(32)], '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(32), '68'), Var('product', '69'))], 1, '71'), Update(VReg(Var('d', '73'), '74'), Var('result', '75'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQDMULL Vd.4S,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_double_simd'),
    'vqdmull_s32': ARMSema(intrin='vqdmull_s32', inst='SQDMULL', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('product', '30'), '31')], ('bits', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('sat', '33'), '34')], ('boolean', Number(1)), '35'), For(Var('e', '70'), Number(0), Number(1), [Update(Var('element1', '38'), Call('SInt', [ElemSlice(Var('operand1', '41'), Var('e', '42'), Number(32), '44')], '45')), Update(Var('element2', '46'), Call('SInt', [ElemSlice(Var('operand2', '49'), Var('e', '50'), Number(32), '52')], '53')), Update(Var('product', '54'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '56'), '57'), Var('element2', '58'), '59'), Number(64)], '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(64), '68'), Var('product', '69'))], 1, '71'), Update(VReg(Var('d', '73'), '74'), Var('result', '75'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SQDMULL Vd.2D,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_double_simd'),
    'vqdmullh_s16': ARMSema(intrin='vqdmullh_s16', inst='SQDMULL', params=[Parameter(name='a', type='int16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(16)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(16)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(32)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('product', '30'), '31')], ('bits', Number(32)), '32'), VarsDecl([VarDeclUndef(Var('sat', '33'), '34')], ('boolean', Number(1)), '35'), For(Var('e', '70'), Number(0), Number(0), [Update(Var('element1', '38'), Call('SInt', [ElemSlice(Var('operand1', '41'), Var('e', '42'), Number(16), '44')], '45')), Update(Var('element2', '46'), Call('SInt', [ElemSlice(Var('operand2', '49'), Var('e', '50'), Number(16), '52')], '53')), Update(Var('product', '54'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '56'), '57'), Var('element2', '58'), '59'), Number(32)], '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(32), '68'), Var('product', '69'))], 1, '71'), Update(VReg(Var('d', '73'), '74'), Var('result', '75'))], rettype='int32_t', ret_is_signed=True, inst_form='SQDMULL Sd,Hn,Hm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'part': 0}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_double_sisd'),
    'vqdmulls_s32': ARMSema(intrin='vqdmulls_s32', inst='SQDMULL', params=[Parameter(name='a', type='int32_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(32)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(32)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('product', '30'), '31')], ('bits', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('sat', '33'), '34')], ('boolean', Number(1)), '35'), For(Var('e', '70'), Number(0), Number(0), [Update(Var('element1', '38'), Call('SInt', [ElemSlice(Var('operand1', '41'), Var('e', '42'), Number(32), '44')], '45')), Update(Var('element2', '46'), Call('SInt', [ElemSlice(Var('operand2', '49'), Var('e', '50'), Number(32), '52')], '53')), Update(Var('product', '54'), Call('SignedSatQ', [BinaryExpr('*', BinaryExpr('*', Number(2), Var('element1', '56'), '57'), Var('element2', '58'), '59'), Number(64)], '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(64), '68'), Var('product', '69'))], 1, '71'), Update(VReg(Var('d', '73'), '74'), Var('result', '75'))], rettype='int64_t', ret_is_signed=True, inst_form='SQDMULL Dd,Sn,Sm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'part': 0}, belongs_to='aarch64_vector_arithmetic_binary_disparate_mul_double_sisd'),
    'vqmovn_high_s16': ARMSema(intrin='vqmovn_high_s16', inst='SQXTN2', params=[Parameter(name='r', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(16)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '43'), Number(0), Number(7), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(16), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(8), '34'), Call('SatQ', [Call('Int', [Var('element', '37'), Number(0)], '39'), Number(8), Number(0)], '42'))], 1, '44'), Update(VPartReg(Var('d', '46'), Number(1), '48'), Var('result', '49'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SQXTN2 Vd.16B,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_extract_sat_simd'),
    'vqmovn_high_s32': ARMSema(intrin='vqmovn_high_s32', inst='SQXTN2', params=[Parameter(name='r', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(32)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '43'), Number(0), Number(3), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(32), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(16), '34'), Call('SatQ', [Call('Int', [Var('element', '37'), Number(0)], '39'), Number(16), Number(0)], '42'))], 1, '44'), Update(VPartReg(Var('d', '46'), Number(1), '48'), Var('result', '49'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SQXTN2 Vd.8H,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_extract_sat_simd'),
    'vqmovn_high_s64': ARMSema(intrin='vqmovn_high_s64', inst='SQXTN2', params=[Parameter(name='r', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '43'), Number(0), Number(1), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(64), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(32), '34'), Call('SatQ', [Call('Int', [Var('element', '37'), Number(0)], '39'), Number(32), Number(0)], '42'))], 1, '44'), Update(VPartReg(Var('d', '46'), Number(1), '48'), Var('result', '49'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQXTN2 Vd.4S,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_extract_sat_simd'),
    'vqmovn_high_u16': ARMSema(intrin='vqmovn_high_u16', inst='UQXTN2', params=[Parameter(name='r', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(16)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '43'), Number(0), Number(7), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(16), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(8), '34'), Call('SatQ', [Call('Int', [Var('element', '37'), Number(1)], '39'), Number(8), Number(1)], '42'))], 1, '44'), Update(VPartReg(Var('d', '46'), Number(1), '48'), Var('result', '49'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='UQXTN2 Vd.16B,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_extract_sat_simd'),
    'vqmovn_high_u32': ARMSema(intrin='vqmovn_high_u32', inst='UQXTN2', params=[Parameter(name='r', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(32)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '43'), Number(0), Number(3), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(32), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(16), '34'), Call('SatQ', [Call('Int', [Var('element', '37'), Number(1)], '39'), Number(16), Number(1)], '42'))], 1, '44'), Update(VPartReg(Var('d', '46'), Number(1), '48'), Var('result', '49'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UQXTN2 Vd.8H,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_extract_sat_simd'),
    'vqmovn_high_u64': ARMSema(intrin='vqmovn_high_u64', inst='UQXTN2', params=[Parameter(name='r', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '43'), Number(0), Number(1), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(64), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(32), '34'), Call('SatQ', [Call('Int', [Var('element', '37'), Number(1)], '39'), Number(32), Number(1)], '42'))], 1, '44'), Update(VPartReg(Var('d', '46'), Number(1), '48'), Var('result', '49'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UQXTN2 Vd.4S,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_extract_sat_simd'),
    'vqmovn_s16': ARMSema(intrin='vqmovn_s16', inst='SQXTN', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(16)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '43'), Number(0), Number(7), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(16), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(8), '34'), Call('SatQ', [Call('Int', [Var('element', '37'), Number(0)], '39'), Number(8), Number(0)], '42'))], 1, '44'), Update(VPartReg(Var('d', '46'), Number(0), '48'), Var('result', '49'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SQXTN Vd.8B,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_extract_sat_simd'),
    'vqmovn_s32': ARMSema(intrin='vqmovn_s32', inst='SQXTN', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(32)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '43'), Number(0), Number(3), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(32), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(16), '34'), Call('SatQ', [Call('Int', [Var('element', '37'), Number(0)], '39'), Number(16), Number(0)], '42'))], 1, '44'), Update(VPartReg(Var('d', '46'), Number(0), '48'), Var('result', '49'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SQXTN Vd.4H,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_extract_sat_simd'),
    'vqmovn_s64': ARMSema(intrin='vqmovn_s64', inst='SQXTN', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '43'), Number(0), Number(1), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(64), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(32), '34'), Call('SatQ', [Call('Int', [Var('element', '37'), Number(0)], '39'), Number(32), Number(0)], '42'))], 1, '44'), Update(VPartReg(Var('d', '46'), Number(0), '48'), Var('result', '49'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SQXTN Vd.2S,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_extract_sat_simd'),
    'vqmovn_u16': ARMSema(intrin='vqmovn_u16', inst='UQXTN', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(16)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '43'), Number(0), Number(7), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(16), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(8), '34'), Call('SatQ', [Call('Int', [Var('element', '37'), Number(1)], '39'), Number(8), Number(1)], '42'))], 1, '44'), Update(VPartReg(Var('d', '46'), Number(0), '48'), Var('result', '49'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='UQXTN Vd.8B,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_extract_sat_simd'),
    'vqmovn_u32': ARMSema(intrin='vqmovn_u32', inst='UQXTN', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(32)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '43'), Number(0), Number(3), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(32), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(16), '34'), Call('SatQ', [Call('Int', [Var('element', '37'), Number(1)], '39'), Number(16), Number(1)], '42'))], 1, '44'), Update(VPartReg(Var('d', '46'), Number(0), '48'), Var('result', '49'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='UQXTN Vd.4H,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_extract_sat_simd'),
    'vqmovn_u64': ARMSema(intrin='vqmovn_u64', inst='UQXTN', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '43'), Number(0), Number(1), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(64), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(32), '34'), Call('SatQ', [Call('Int', [Var('element', '37'), Number(1)], '39'), Number(32), Number(1)], '42'))], 1, '44'), Update(VPartReg(Var('d', '46'), Number(0), '48'), Var('result', '49'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='UQXTN Vd.2S,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_extract_sat_simd'),
    'vqmovnd_s64': ARMSema(intrin='vqmovnd_s64', inst='SQXTN', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(32)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '43'), Number(0), Number(0), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(64), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(32), '34'), Call('SatQ', [Call('Int', [Var('element', '37'), Number(0)], '39'), Number(32), Number(0)], '42'))], 1, '44'), Update(VPartReg(Var('d', '46'), Number(0), '48'), Var('result', '49'))], rettype='int32_t', ret_is_signed=True, inst_form='SQXTN Sd,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 32, 'part': 0, 'elements': 1, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_extract_sat_sisd'),
    'vqmovnd_u64': ARMSema(intrin='vqmovnd_u64', inst='UQXTN', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(32)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '43'), Number(0), Number(0), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(64), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(32), '34'), Call('SatQ', [Call('Int', [Var('element', '37'), Number(1)], '39'), Number(32), Number(1)], '42'))], 1, '44'), Update(VPartReg(Var('d', '46'), Number(0), '48'), Var('result', '49'))], rettype='uint32_t', ret_is_signed=False, inst_form='UQXTN Sd,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 32, 'part': 0, 'elements': 1, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_extract_sat_sisd'),
    'vqmovnh_s16': ARMSema(intrin='vqmovnh_s16', inst='SQXTN', params=[Parameter(name='a', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(16)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(8)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(16)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '43'), Number(0), Number(0), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(16), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(8), '34'), Call('SatQ', [Call('Int', [Var('element', '37'), Number(0)], '39'), Number(8), Number(0)], '42'))], 1, '44'), Update(VPartReg(Var('d', '46'), Number(0), '48'), Var('result', '49'))], rettype='int8_t', ret_is_signed=True, inst_form='SQXTN Bd,Hn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 8, 'part': 0, 'elements': 1, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_extract_sat_sisd'),
    'vqmovnh_u16': ARMSema(intrin='vqmovnh_u16', inst='UQXTN', params=[Parameter(name='a', type='uint16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(16)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(8)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(16)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '43'), Number(0), Number(0), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(16), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(8), '34'), Call('SatQ', [Call('Int', [Var('element', '37'), Number(1)], '39'), Number(8), Number(1)], '42'))], 1, '44'), Update(VPartReg(Var('d', '46'), Number(0), '48'), Var('result', '49'))], rettype='uint8_t', ret_is_signed=False, inst_form='UQXTN Bd,Hn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 8, 'part': 0, 'elements': 1, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_extract_sat_sisd'),
    'vqmovns_s32': ARMSema(intrin='vqmovns_s32', inst='SQXTN', params=[Parameter(name='a', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(32)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(16)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(32)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '43'), Number(0), Number(0), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(32), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(16), '34'), Call('SatQ', [Call('Int', [Var('element', '37'), Number(0)], '39'), Number(16), Number(0)], '42'))], 1, '44'), Update(VPartReg(Var('d', '46'), Number(0), '48'), Var('result', '49'))], rettype='int16_t', ret_is_signed=True, inst_form='SQXTN Hd,Sn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 16, 'part': 0, 'elements': 1, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_extract_sat_sisd'),
    'vqmovns_u32': ARMSema(intrin='vqmovns_u32', inst='UQXTN', params=[Parameter(name='a', type='uint32_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(32)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(16)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(32)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '43'), Number(0), Number(0), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(32), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(16), '34'), Call('SatQ', [Call('Int', [Var('element', '37'), Number(1)], '39'), Number(16), Number(1)], '42'))], 1, '44'), Update(VPartReg(Var('d', '46'), Number(0), '48'), Var('result', '49'))], rettype='uint16_t', ret_is_signed=False, inst_form='UQXTN Hd,Sn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 16, 'part': 0, 'elements': 1, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_extract_sat_sisd'),
    'vqmovun_high_s16': ARMSema(intrin='vqmovun_high_s16', inst='SQXTUN2', params=[Parameter(name='r', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(16)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '41'), Number(0), Number(7), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(16), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(8), '34'), Call('UnsignedSatQ', [Call('SInt', [Var('element', '37')], '38'), Number(8)], '40'))], 1, '42'), Update(VPartReg(Var('d', '44'), Number(1), '46'), Var('result', '47'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='SQXTUN2 Vd.16B,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8}, belongs_to='aarch64_vector_arithmetic_unary_extract_sqxtun_simd'),
    'vqmovun_high_s32': ARMSema(intrin='vqmovun_high_s32', inst='SQXTUN2', params=[Parameter(name='r', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(32)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '41'), Number(0), Number(3), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(32), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(16), '34'), Call('UnsignedSatQ', [Call('SInt', [Var('element', '37')], '38'), Number(16)], '40'))], 1, '42'), Update(VPartReg(Var('d', '44'), Number(1), '46'), Var('result', '47'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='SQXTUN2 Vd.8H,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4}, belongs_to='aarch64_vector_arithmetic_unary_extract_sqxtun_simd'),
    'vqmovun_high_s64': ARMSema(intrin='vqmovun_high_s64', inst='SQXTUN2', params=[Parameter(name='r', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '41'), Number(0), Number(1), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(64), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(32), '34'), Call('UnsignedSatQ', [Call('SInt', [Var('element', '37')], '38'), Number(32)], '40'))], 1, '42'), Update(VPartReg(Var('d', '44'), Number(1), '46'), Var('result', '47'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='SQXTUN2 Vd.4S,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2}, belongs_to='aarch64_vector_arithmetic_unary_extract_sqxtun_simd'),
    'vqmovun_s16': ARMSema(intrin='vqmovun_s16', inst='SQXTUN', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(16)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '41'), Number(0), Number(7), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(16), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(8), '34'), Call('UnsignedSatQ', [Call('SInt', [Var('element', '37')], '38'), Number(8)], '40'))], 1, '42'), Update(VPartReg(Var('d', '44'), Number(0), '46'), Var('result', '47'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='SQXTUN Vd.8B,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8}, belongs_to='aarch64_vector_arithmetic_unary_extract_sqxtun_simd'),
    'vqmovun_s32': ARMSema(intrin='vqmovun_s32', inst='SQXTUN', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(32)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '41'), Number(0), Number(3), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(32), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(16), '34'), Call('UnsignedSatQ', [Call('SInt', [Var('element', '37')], '38'), Number(16)], '40'))], 1, '42'), Update(VPartReg(Var('d', '44'), Number(0), '46'), Var('result', '47'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='SQXTUN Vd.4H,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4}, belongs_to='aarch64_vector_arithmetic_unary_extract_sqxtun_simd'),
    'vqmovun_s64': ARMSema(intrin='vqmovun_s64', inst='SQXTUN', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '41'), Number(0), Number(1), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(64), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(32), '34'), Call('UnsignedSatQ', [Call('SInt', [Var('element', '37')], '38'), Number(32)], '40'))], 1, '42'), Update(VPartReg(Var('d', '44'), Number(0), '46'), Var('result', '47'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='SQXTUN Vd.2S,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2}, belongs_to='aarch64_vector_arithmetic_unary_extract_sqxtun_simd'),
    'vqmovund_s64': ARMSema(intrin='vqmovund_s64', inst='SQXTUN', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(32)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '41'), Number(0), Number(0), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(64), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(32), '34'), Call('UnsignedSatQ', [Call('SInt', [Var('element', '37')], '38'), Number(32)], '40'))], 1, '42'), Update(VPartReg(Var('d', '44'), Number(0), '46'), Var('result', '47'))], rettype='uint32_t', ret_is_signed=False, inst_form='SQXTUN Sd,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 32, 'part': 0, 'elements': 1}, belongs_to='aarch64_vector_arithmetic_unary_extract_sqxtun_sisd'),
    'vqmovunh_s16': ARMSema(intrin='vqmovunh_s16', inst='SQXTUN', params=[Parameter(name='a', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(16)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(8)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(16)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '41'), Number(0), Number(0), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(16), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(8), '34'), Call('UnsignedSatQ', [Call('SInt', [Var('element', '37')], '38'), Number(8)], '40'))], 1, '42'), Update(VPartReg(Var('d', '44'), Number(0), '46'), Var('result', '47'))], rettype='uint8_t', ret_is_signed=False, inst_form='SQXTUN Bd,Hn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 8, 'part': 0, 'elements': 1}, belongs_to='aarch64_vector_arithmetic_unary_extract_sqxtun_sisd'),
    'vqmovuns_s32': ARMSema(intrin='vqmovuns_s32', inst='SQXTUN', params=[Parameter(name='a', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(32)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(16)), '12'), VarsDecl([VarDeclUndef(Var('element', '15'), '16')], ('bits', Number(32)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '41'), Number(0), Number(0), [Update(Var('element', '23'), ElemSlice(Var('operand', '25'), Var('e', '26'), Number(32), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(16), '34'), Call('UnsignedSatQ', [Call('SInt', [Var('element', '37')], '38'), Number(16)], '40'))], 1, '42'), Update(VPartReg(Var('d', '44'), Number(0), '46'), Var('result', '47'))], rettype='uint16_t', ret_is_signed=False, inst_form='SQXTUN Hd,Sn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 16, 'part': 0, 'elements': 1}, belongs_to='aarch64_vector_arithmetic_unary_extract_sqxtun_sisd'),
    'vqneg_s16': ARMSema(intrin='vqneg_s16', inst='SQNEG', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(3), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(16), '29')], '30')), Update(Var('element2', '32'), UnaryExpr('-', Var('element', '33'), '34')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(16), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(16)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SQNEG Vd.4H,Vn.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_simd'),
    'vqneg_s32': ARMSema(intrin='vqneg_s32', inst='SQNEG', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(1), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(32), '29')], '30')), Update(Var('element2', '32'), UnaryExpr('-', Var('element', '33'), '34')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(32), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(32)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SQNEG Vd.2S,Vn.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_simd'),
    'vqneg_s64': ARMSema(intrin='vqneg_s64', inst='SQNEG', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(0), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(64), '29')], '30')), Update(Var('element2', '32'), UnaryExpr('-', Var('element', '33'), '34')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(64), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(64)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int64x1_t', ret_is_signed=True, inst_form='SQNEG Dd,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_sisd'),
    'vqneg_s8': ARMSema(intrin='vqneg_s8', inst='SQNEG', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(7), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(8), '29')], '30')), Update(Var('element2', '32'), UnaryExpr('-', Var('element', '33'), '34')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(8), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(8)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SQNEG Vd.8B,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_simd'),
    'vqnegb_s8': ARMSema(intrin='vqnegb_s8', inst='SQNEG', params=[Parameter(name='a', type='int8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(8)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(0), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(8), '29')], '30')), Update(Var('element2', '32'), UnaryExpr('-', Var('element', '33'), '34')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(8), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(8)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int8_t', ret_is_signed=True, inst_form='SQNEG Bd,Bn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_sisd'),
    'vqnegd_s64': ARMSema(intrin='vqnegd_s64', inst='SQNEG', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(0), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(64), '29')], '30')), Update(Var('element2', '32'), UnaryExpr('-', Var('element', '33'), '34')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(64), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(64)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int64_t', ret_is_signed=True, inst_form='SQNEG Dd,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_sisd'),
    'vqnegh_s16': ARMSema(intrin='vqnegh_s16', inst='SQNEG', params=[Parameter(name='a', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(16)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(0), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(16), '29')], '30')), Update(Var('element2', '32'), UnaryExpr('-', Var('element', '33'), '34')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(16), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(16)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int16_t', ret_is_signed=True, inst_form='SQNEG Hd,Hn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_sisd'),
    'vqnegq_s16': ARMSema(intrin='vqnegq_s16', inst='SQNEG', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(7), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(16), '29')], '30')), Update(Var('element2', '32'), UnaryExpr('-', Var('element', '33'), '34')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(16), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(16)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SQNEG Vd.8H,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_simd'),
    'vqnegq_s32': ARMSema(intrin='vqnegq_s32', inst='SQNEG', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(3), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(32), '29')], '30')), Update(Var('element2', '32'), UnaryExpr('-', Var('element', '33'), '34')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(32), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(32)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQNEG Vd.4S,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_simd'),
    'vqnegq_s64': ARMSema(intrin='vqnegq_s64', inst='SQNEG', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(1), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(64), '29')], '30')), Update(Var('element2', '32'), UnaryExpr('-', Var('element', '33'), '34')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(64), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(64)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SQNEG Vd.2D,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_simd'),
    'vqnegq_s8': ARMSema(intrin='vqnegq_s8', inst='SQNEG', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(15), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(8), '29')], '30')), Update(Var('element2', '32'), UnaryExpr('-', Var('element', '33'), '34')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(8), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(8)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SQNEG Vd.16B,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_simd'),
    'vqnegs_s32': ARMSema(intrin='vqnegs_s32', inst='SQNEG', params=[Parameter(name='a', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(32)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('element2', '15'), '16')], ('integer', Number(64)), '17'), VarsDecl([VarDeclUndef(Var('sat', '18'), '19')], ('boolean', Number(1)), '20'), For(Var('e', '49'), Number(0), Number(0), [Update(Var('element', '23'), Call('SInt', [ElemSlice(Var('operand', '26'), Var('e', '27'), Number(32), '29')], '30')), Update(Var('element2', '32'), UnaryExpr('-', Var('element', '33'), '34')), Update(ElemSlice(Var('result', '41'), Var('e', '42'), Number(32), '44'), Call('SignedSatQ', [Var('element2', '46'), Number(32)], '48'))], 1, '50'), Update(VReg(Var('d', '52'), '53'), Var('result', '54'))], rettype='int32_t', ret_is_signed=True, inst_form='SQNEG Sd,Sn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'neg': True}, belongs_to='aarch64_vector_arithmetic_unary_diff_neg_sat_sisd'),
    'vqrdmulh_n_s16': ARMSema(intrin='vqrdmulh_n_s16', inst='SQRDMULH', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '24'), Number(16384), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('sat', '36'), '37')], ('boolean', Number(1)), '38'), Update(Var('element2', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Number(0), Number(16), '45')], '46')), For(Var('e', '75'), Number(0), Number(3), [Update(Var('element1', '49'), Call('SInt', [ElemSlice(Var('operand1', '52'), Var('e', '53'), Number(16), '55')], '56')), Update(Var('product', '57'), BinaryExpr('+', BinaryExpr('*', Var('element1', '58'), Var('element2', '59'), '60'), Var('round_const', '61'), '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(16), '67'), Call('SignedSatQ', [BinaryExpr('>>', Var('product', '69'), Number(15), '72'), Number(16)], '74'))], 1, '76'), Update(VReg(Var('d', '78'), '79'), Var('result', '80'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SQRDMULH Vd.4H,Vn.4H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 64, 'elements': 4, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_high_simd'),
    'vqrdmulh_n_s32': ARMSema(intrin='vqrdmulh_n_s32', inst='SQRDMULH', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '24'), Number(1073741824), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('sat', '36'), '37')], ('boolean', Number(1)), '38'), Update(Var('element2', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Number(0), Number(32), '45')], '46')), For(Var('e', '75'), Number(0), Number(1), [Update(Var('element1', '49'), Call('SInt', [ElemSlice(Var('operand1', '52'), Var('e', '53'), Number(32), '55')], '56')), Update(Var('product', '57'), BinaryExpr('+', BinaryExpr('*', Var('element1', '58'), Var('element2', '59'), '60'), Var('round_const', '61'), '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(32), '67'), Call('SignedSatQ', [BinaryExpr('>>', Var('product', '69'), Number(31), '72'), Number(32)], '74'))], 1, '76'), Update(VReg(Var('d', '78'), '79'), Var('result', '80'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SQRDMULH Vd.2S,Vn.2S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 64, 'elements': 2, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_high_simd'),
    'vqrdmulh_s16': ARMSema(intrin='vqrdmulh_s16', inst='SQRDMULH', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '24'), Number(16384), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('sat', '36'), '37')], ('boolean', Number(1)), '38'), For(Var('e', '75'), Number(0), Number(3), [Update(Var('element1', '41'), Call('SInt', [ElemSlice(Var('operand1', '44'), Var('e', '45'), Number(16), '47')], '48')), Update(Var('element2', '49'), Call('SInt', [ElemSlice(Var('operand2', '52'), Var('e', '53'), Number(16), '55')], '56')), Update(Var('product', '57'), BinaryExpr('+', BinaryExpr('*', Var('element1', '58'), Var('element2', '59'), '60'), Var('round_const', '61'), '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(16), '67'), Call('SignedSatQ', [BinaryExpr('>>', Var('product', '69'), Number(15), '72'), Number(16)], '74'))], 1, '76'), Update(VReg(Var('d', '78'), '79'), Var('result', '80'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SQRDMULH Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'rounding': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_doubling_simd'),
    'vqrdmulh_s32': ARMSema(intrin='vqrdmulh_s32', inst='SQRDMULH', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '24'), Number(1073741824), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('sat', '36'), '37')], ('boolean', Number(1)), '38'), For(Var('e', '75'), Number(0), Number(1), [Update(Var('element1', '41'), Call('SInt', [ElemSlice(Var('operand1', '44'), Var('e', '45'), Number(32), '47')], '48')), Update(Var('element2', '49'), Call('SInt', [ElemSlice(Var('operand2', '52'), Var('e', '53'), Number(32), '55')], '56')), Update(Var('product', '57'), BinaryExpr('+', BinaryExpr('*', Var('element1', '58'), Var('element2', '59'), '60'), Var('round_const', '61'), '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(32), '67'), Call('SignedSatQ', [BinaryExpr('>>', Var('product', '69'), Number(31), '72'), Number(32)], '74'))], 1, '76'), Update(VReg(Var('d', '78'), '79'), Var('result', '80'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SQRDMULH Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'rounding': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_doubling_simd'),
    'vqrdmulhh_s16': ARMSema(intrin='vqrdmulhh_s16', inst='SQRDMULH', params=[Parameter(name='a', type='int16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(16)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(16)), '18'), VarsDecl([VarDeclInit(Var('round_const', '24'), Number(16384), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('sat', '36'), '37')], ('boolean', Number(1)), '38'), For(Var('e', '75'), Number(0), Number(0), [Update(Var('element1', '41'), Call('SInt', [ElemSlice(Var('operand1', '44'), Var('e', '45'), Number(16), '47')], '48')), Update(Var('element2', '49'), Call('SInt', [ElemSlice(Var('operand2', '52'), Var('e', '53'), Number(16), '55')], '56')), Update(Var('product', '57'), BinaryExpr('+', BinaryExpr('*', Var('element1', '58'), Var('element2', '59'), '60'), Var('round_const', '61'), '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(16), '67'), Call('SignedSatQ', [BinaryExpr('>>', Var('product', '69'), Number(15), '72'), Number(16)], '74'))], 1, '76'), Update(VReg(Var('d', '78'), '79'), Var('result', '80'))], rettype='int16_t', ret_is_signed=True, inst_form='SQRDMULH Hd,Hn,Hm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'rounding': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_doubling_sisd'),
    'vqrdmulhq_n_s16': ARMSema(intrin='vqrdmulhq_n_s16', inst='SQRDMULH', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '24'), Number(16384), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('sat', '36'), '37')], ('boolean', Number(1)), '38'), Update(Var('element2', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Number(0), Number(16), '45')], '46')), For(Var('e', '75'), Number(0), Number(7), [Update(Var('element1', '49'), Call('SInt', [ElemSlice(Var('operand1', '52'), Var('e', '53'), Number(16), '55')], '56')), Update(Var('product', '57'), BinaryExpr('+', BinaryExpr('*', Var('element1', '58'), Var('element2', '59'), '60'), Var('round_const', '61'), '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(16), '67'), Call('SignedSatQ', [BinaryExpr('>>', Var('product', '69'), Number(15), '72'), Number(16)], '74'))], 1, '76'), Update(VReg(Var('d', '78'), '79'), Var('result', '80'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SQRDMULH Vd.8H,Vn.8H,Vm.H[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 16, 'datasize': 128, 'elements': 8, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_high_simd'),
    'vqrdmulhq_n_s32': ARMSema(intrin='vqrdmulhq_n_s32', inst='SQRDMULH', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '24'), Number(1073741824), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('sat', '36'), '37')], ('boolean', Number(1)), '38'), Update(Var('element2', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Number(0), Number(32), '45')], '46')), For(Var('e', '75'), Number(0), Number(3), [Update(Var('element1', '49'), Call('SInt', [ElemSlice(Var('operand1', '52'), Var('e', '53'), Number(32), '55')], '56')), Update(Var('product', '57'), BinaryExpr('+', BinaryExpr('*', Var('element1', '58'), Var('element2', '59'), '60'), Var('round_const', '61'), '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(32), '67'), Call('SignedSatQ', [BinaryExpr('>>', Var('product', '69'), Number(31), '72'), Number(32)], '74'))], 1, '76'), Update(VReg(Var('d', '78'), '79'), Var('result', '80'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQRDMULH Vd.4S,Vn.4S,Vm.S[0]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'idxdsize': 64, 'index': 0, 'Rmhi': '0', 'esize': 32, 'datasize': 128, 'elements': 4, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_element_mul_high_simd'),
    'vqrdmulhq_s16': ARMSema(intrin='vqrdmulhq_s16', inst='SQRDMULH', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '24'), Number(16384), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('sat', '36'), '37')], ('boolean', Number(1)), '38'), For(Var('e', '75'), Number(0), Number(7), [Update(Var('element1', '41'), Call('SInt', [ElemSlice(Var('operand1', '44'), Var('e', '45'), Number(16), '47')], '48')), Update(Var('element2', '49'), Call('SInt', [ElemSlice(Var('operand2', '52'), Var('e', '53'), Number(16), '55')], '56')), Update(Var('product', '57'), BinaryExpr('+', BinaryExpr('*', Var('element1', '58'), Var('element2', '59'), '60'), Var('round_const', '61'), '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(16), '67'), Call('SignedSatQ', [BinaryExpr('>>', Var('product', '69'), Number(15), '72'), Number(16)], '74'))], 1, '76'), Update(VReg(Var('d', '78'), '79'), Var('result', '80'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SQRDMULH Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'rounding': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_doubling_simd'),
    'vqrdmulhq_s32': ARMSema(intrin='vqrdmulhq_s32', inst='SQRDMULH', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '24'), Number(1073741824), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('sat', '36'), '37')], ('boolean', Number(1)), '38'), For(Var('e', '75'), Number(0), Number(3), [Update(Var('element1', '41'), Call('SInt', [ElemSlice(Var('operand1', '44'), Var('e', '45'), Number(32), '47')], '48')), Update(Var('element2', '49'), Call('SInt', [ElemSlice(Var('operand2', '52'), Var('e', '53'), Number(32), '55')], '56')), Update(Var('product', '57'), BinaryExpr('+', BinaryExpr('*', Var('element1', '58'), Var('element2', '59'), '60'), Var('round_const', '61'), '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(32), '67'), Call('SignedSatQ', [BinaryExpr('>>', Var('product', '69'), Number(31), '72'), Number(32)], '74'))], 1, '76'), Update(VReg(Var('d', '78'), '79'), Var('result', '80'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQRDMULH Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'rounding': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_doubling_simd'),
    'vqrdmulhs_s32': ARMSema(intrin='vqrdmulhs_s32', inst='SQRDMULH', params=[Parameter(name='a', type='int32_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(32)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(32)), '18'), VarsDecl([VarDeclInit(Var('round_const', '24'), Number(1073741824), '25')], ('integer', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('element1', '27'), '28')], ('integer', Number(64)), '29'), VarsDecl([VarDeclUndef(Var('element2', '30'), '31')], ('integer', Number(64)), '32'), VarsDecl([VarDeclUndef(Var('product', '33'), '34')], ('integer', Number(64)), '35'), VarsDecl([VarDeclUndef(Var('sat', '36'), '37')], ('boolean', Number(1)), '38'), For(Var('e', '75'), Number(0), Number(0), [Update(Var('element1', '41'), Call('SInt', [ElemSlice(Var('operand1', '44'), Var('e', '45'), Number(32), '47')], '48')), Update(Var('element2', '49'), Call('SInt', [ElemSlice(Var('operand2', '52'), Var('e', '53'), Number(32), '55')], '56')), Update(Var('product', '57'), BinaryExpr('+', BinaryExpr('*', Var('element1', '58'), Var('element2', '59'), '60'), Var('round_const', '61'), '62')), Update(ElemSlice(Var('result', '64'), Var('e', '65'), Number(32), '67'), Call('SignedSatQ', [BinaryExpr('>>', Var('product', '69'), Number(31), '72'), Number(32)], '74'))], 1, '76'), Update(VReg(Var('d', '78'), '79'), Var('result', '80'))], rettype='int32_t', ret_is_signed=True, inst_form='SQRDMULH Sd,Sn,Sm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'rounding': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_mul_int_doubling_sisd'),
    'vqrshl_s16': ARMSema(intrin='vqrshl_s16', inst='SQRSHL', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(32)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(32)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(3), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(32)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(16), '62'), Number(0), Number(32)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(16), '76'), Call('SatQ', [Var('element', '78'), Number(16), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SQRSHL Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqrshl_s32': ARMSema(intrin='vqrshl_s32', inst='SQRSHL', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(1), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(64)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(32), '62'), Number(0), Number(64)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(32), '76'), Call('SatQ', [Var('element', '78'), Number(32), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SQRSHL Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqrshl_s64': ARMSema(intrin='vqrshl_s64', inst='SQRSHL', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(0), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(64), '76'), Call('SatQ', [Var('element', '78'), Number(64), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int64x1_t', ret_is_signed=True, inst_form='SQRSHL Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vqrshl_s8': ARMSema(intrin='vqrshl_s8', inst='SQRSHL', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(16)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(16)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(7), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(16)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(8), '62'), Number(0), Number(16)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(8), '76'), Call('SatQ', [Var('element', '78'), Number(8), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SQRSHL Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqrshl_u16': ARMSema(intrin='vqrshl_u16', inst='UQRSHL', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(32)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(32)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(3), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(32)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(16), '62'), Number(1), Number(32)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(16), '76'), Call('SatQ', [Var('element', '78'), Number(16), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='UQRSHL Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqrshl_u32': ARMSema(intrin='vqrshl_u32', inst='UQRSHL', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(1), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(64)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(32), '62'), Number(1), Number(64)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(32), '76'), Call('SatQ', [Var('element', '78'), Number(32), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='UQRSHL Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqrshl_u64': ARMSema(intrin='vqrshl_u64', inst='UQRSHL', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(1), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(64), '76'), Call('SatQ', [Var('element', '78'), Number(64), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='UQRSHL Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vqrshl_u8': ARMSema(intrin='vqrshl_u8', inst='UQRSHL', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(16)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(16)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(7), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(16)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(8), '62'), Number(1), Number(16)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(8), '76'), Call('SatQ', [Var('element', '78'), Number(8), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='UQRSHL Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqrshlb_s8': ARMSema(intrin='vqrshlb_s8', inst='SQRSHL', params=[Parameter(name='a', type='int8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(8)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(8)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(16)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(16)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(16)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(8), '62'), Number(0), Number(16)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(8), '76'), Call('SatQ', [Var('element', '78'), Number(8), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int8_t', ret_is_signed=True, inst_form='SQRSHL Bd,Bn,Bm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'unsigned': False, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vqrshlb_u8': ARMSema(intrin='vqrshlb_u8', inst='UQRSHL', params=[Parameter(name='a', type='uint8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(8)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(8)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(16)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(16)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(16)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(8), '62'), Number(1), Number(16)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(8), '76'), Call('SatQ', [Var('element', '78'), Number(8), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint8_t', ret_is_signed=False, inst_form='UQRSHL Bd,Bn,Bm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'unsigned': True, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vqrshld_s64': ARMSema(intrin='vqrshld_s64', inst='SQRSHL', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(0), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(64), '76'), Call('SatQ', [Var('element', '78'), Number(64), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int64_t', ret_is_signed=True, inst_form='SQRSHL Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vqrshld_u64': ARMSema(intrin='vqrshld_u64', inst='UQRSHL', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(1), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(64), '76'), Call('SatQ', [Var('element', '78'), Number(64), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint64_t', ret_is_signed=False, inst_form='UQRSHL Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vqrshlh_s16': ARMSema(intrin='vqrshlh_s16', inst='SQRSHL', params=[Parameter(name='a', type='int16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(16)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(16)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(32)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(32)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(32)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(16), '62'), Number(0), Number(32)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(16), '76'), Call('SatQ', [Var('element', '78'), Number(16), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int16_t', ret_is_signed=True, inst_form='SQRSHL Hd,Hn,Hm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'unsigned': False, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vqrshlh_u16': ARMSema(intrin='vqrshlh_u16', inst='UQRSHL', params=[Parameter(name='a', type='uint16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(16)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(16)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(32)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(32)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(32)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(16), '62'), Number(1), Number(32)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(16), '76'), Call('SatQ', [Var('element', '78'), Number(16), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint16_t', ret_is_signed=False, inst_form='UQRSHL Hd,Hn,Hm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'unsigned': True, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vqrshlq_s16': ARMSema(intrin='vqrshlq_s16', inst='SQRSHL', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(32)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(32)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(7), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(32)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(16), '62'), Number(0), Number(32)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(16), '76'), Call('SatQ', [Var('element', '78'), Number(16), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SQRSHL Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqrshlq_s32': ARMSema(intrin='vqrshlq_s32', inst='SQRSHL', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(3), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(64)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(32), '62'), Number(0), Number(64)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(32), '76'), Call('SatQ', [Var('element', '78'), Number(32), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQRSHL Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqrshlq_s64': ARMSema(intrin='vqrshlq_s64', inst='SQRSHL', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(1), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(0), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(64), '76'), Call('SatQ', [Var('element', '78'), Number(64), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SQRSHL Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': False, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqrshlq_s8': ARMSema(intrin='vqrshlq_s8', inst='SQRSHL', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(16)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(16)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(15), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(16)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(8), '62'), Number(0), Number(16)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(8), '76'), Call('SatQ', [Var('element', '78'), Number(8), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SQRSHL Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqrshlq_u16': ARMSema(intrin='vqrshlq_u16', inst='UQRSHL', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(32)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(32)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(7), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(32)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(16), '62'), Number(1), Number(32)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(16), '76'), Call('SatQ', [Var('element', '78'), Number(16), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UQRSHL Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqrshlq_u32': ARMSema(intrin='vqrshlq_u32', inst='UQRSHL', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(3), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(64)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(32), '62'), Number(1), Number(64)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(32), '76'), Call('SatQ', [Var('element', '78'), Number(32), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UQRSHL Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqrshlq_u64': ARMSema(intrin='vqrshlq_u64', inst='UQRSHL', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(1), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(1), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(64), '76'), Call('SatQ', [Var('element', '78'), Number(64), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UQRSHL Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': True, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqrshlq_u8': ARMSema(intrin='vqrshlq_u8', inst='UQRSHL', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(16)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(16)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(15), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(16)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(8), '62'), Number(1), Number(16)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(8), '76'), Call('SatQ', [Var('element', '78'), Number(8), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='UQRSHL Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqrshls_s32': ARMSema(intrin='vqrshls_s32', inst='SQRSHL', params=[Parameter(name='a', type='int32_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(32)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(32)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(64)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(32), '62'), Number(0), Number(64)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(32), '76'), Call('SatQ', [Var('element', '78'), Number(32), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int32_t', ret_is_signed=True, inst_form='SQRSHL Sd,Sn,Sm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'unsigned': False, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vqrshls_u32': ARMSema(intrin='vqrshls_u32', inst='UQRSHL', params=[Parameter(name='a', type='uint32_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(32)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(32)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(64)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(32), '62'), Number(1), Number(64)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(32), '76'), Call('SatQ', [Var('element', '78'), Number(32), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint32_t', ret_is_signed=False, inst_form='UQRSHL Sd,Sn,Sm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'unsigned': True, 'rounding': True, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vqrshrn_high_n_s16': ARMSema(intrin='vqrshrn_high_n_s16', inst='SQRSHRN2', params=[Parameter(name='r', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(7), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(16), '36'), Number(0)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(8), '47'), Call('SatQ', [Var('element', '49'), Number(8), Number(0)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(1), '58'), Var('result', '59'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SQRSHRN2 Vd.16B,Vn.8H,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'round': True, 'unsigned': False}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqrshrn_high_n_s32': ARMSema(intrin='vqrshrn_high_n_s32', inst='SQRSHRN2', params=[Parameter(name='r', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(3), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(32), '36'), Number(0)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(16), '47'), Call('SatQ', [Var('element', '49'), Number(16), Number(0)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(1), '58'), Var('result', '59'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SQRSHRN2 Vd.8H,Vn.4S,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'round': True, 'unsigned': False}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqrshrn_high_n_s64': ARMSema(intrin='vqrshrn_high_n_s64', inst='SQRSHRN2', params=[Parameter(name='r', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(1), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(64), '36'), Number(0)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(32), '47'), Call('SatQ', [Var('element', '49'), Number(32), Number(0)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(1), '58'), Var('result', '59'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQRSHRN2 Vd.4S,Vn.2D,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'round': True, 'unsigned': False}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqrshrn_high_n_u16': ARMSema(intrin='vqrshrn_high_n_u16', inst='UQRSHRN2', params=[Parameter(name='r', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(7), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(16), '36'), Number(1)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(8), '47'), Call('SatQ', [Var('element', '49'), Number(8), Number(1)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(1), '58'), Var('result', '59'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='UQRSHRN2 Vd.16B,Vn.8H,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'round': True, 'unsigned': True}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqrshrn_high_n_u32': ARMSema(intrin='vqrshrn_high_n_u32', inst='UQRSHRN2', params=[Parameter(name='r', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(3), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(32), '36'), Number(1)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(16), '47'), Call('SatQ', [Var('element', '49'), Number(16), Number(1)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(1), '58'), Var('result', '59'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UQRSHRN2 Vd.8H,Vn.4S,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'round': True, 'unsigned': True}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqrshrn_high_n_u64': ARMSema(intrin='vqrshrn_high_n_u64', inst='UQRSHRN2', params=[Parameter(name='r', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(1), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(64), '36'), Number(1)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(32), '47'), Call('SatQ', [Var('element', '49'), Number(32), Number(1)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(1), '58'), Var('result', '59'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UQRSHRN2 Vd.4S,Vn.2D,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'round': True, 'unsigned': True}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqrshrn_n_s16': ARMSema(intrin='vqrshrn_n_s16', inst='SQRSHRN', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(7), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(16), '36'), Number(0)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(8), '47'), Call('SatQ', [Var('element', '49'), Number(8), Number(0)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SQRSHRN Vd.8B,Vn.8H,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'round': True, 'unsigned': False}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqrshrn_n_s32': ARMSema(intrin='vqrshrn_n_s32', inst='SQRSHRN', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(3), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(32), '36'), Number(0)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(16), '47'), Call('SatQ', [Var('element', '49'), Number(16), Number(0)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SQRSHRN Vd.4H,Vn.4S,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'round': True, 'unsigned': False}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqrshrn_n_s64': ARMSema(intrin='vqrshrn_n_s64', inst='SQRSHRN', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(1), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(64), '36'), Number(0)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(32), '47'), Call('SatQ', [Var('element', '49'), Number(32), Number(0)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SQRSHRN Vd.2S,Vn.2D,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'round': True, 'unsigned': False}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqrshrn_n_u16': ARMSema(intrin='vqrshrn_n_u16', inst='UQRSHRN', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(7), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(16), '36'), Number(1)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(8), '47'), Call('SatQ', [Var('element', '49'), Number(8), Number(1)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='UQRSHRN Vd.8B,Vn.8H,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'round': True, 'unsigned': True}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqrshrn_n_u32': ARMSema(intrin='vqrshrn_n_u32', inst='UQRSHRN', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(3), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(32), '36'), Number(1)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(16), '47'), Call('SatQ', [Var('element', '49'), Number(16), Number(1)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='UQRSHRN Vd.4H,Vn.4S,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'round': True, 'unsigned': True}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqrshrn_n_u64': ARMSema(intrin='vqrshrn_n_u64', inst='UQRSHRN', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(1), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(64), '36'), Number(1)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(32), '47'), Call('SatQ', [Var('element', '49'), Number(32), Number(1)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='UQRSHRN Vd.2S,Vn.2D,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'round': True, 'unsigned': True}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqrshrnd_n_s64': ARMSema(intrin='vqrshrnd_n_s64', inst='SQRSHRN', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(32)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(0), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(64), '36'), Number(0)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(32), '47'), Call('SatQ', [Var('element', '49'), Number(32), Number(0)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='int32_t', ret_is_signed=True, inst_form='SQRSHRN Sd,Dn,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'part': 0, 'round': True, 'unsigned': False}, belongs_to='aarch64_vector_shift_right_narrow_uniform_sisd'),
    'vqrshrnd_n_u64': ARMSema(intrin='vqrshrnd_n_u64', inst='UQRSHRN', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(32)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(0), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(64), '36'), Number(1)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(32), '47'), Call('SatQ', [Var('element', '49'), Number(32), Number(1)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='uint32_t', ret_is_signed=False, inst_form='UQRSHRN Sd,Dn,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'part': 0, 'round': True, 'unsigned': True}, belongs_to='aarch64_vector_shift_right_narrow_uniform_sisd'),
    'vqrshrnh_n_s16': ARMSema(intrin='vqrshrnh_n_s16', inst='SQRSHRN', params=[Parameter(name='a', type='int16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(16)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(8)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(0), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(16), '36'), Number(0)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(8), '47'), Call('SatQ', [Var('element', '49'), Number(8), Number(0)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='int8_t', ret_is_signed=True, inst_form='SQRSHRN Bd,Hn,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'part': 0, 'round': True, 'unsigned': False}, belongs_to='aarch64_vector_shift_right_narrow_uniform_sisd'),
    'vqrshrnh_n_u16': ARMSema(intrin='vqrshrnh_n_u16', inst='UQRSHRN', params=[Parameter(name='a', type='uint16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(16)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(8)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(0), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(16), '36'), Number(1)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(8), '47'), Call('SatQ', [Var('element', '49'), Number(8), Number(1)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='uint8_t', ret_is_signed=False, inst_form='UQRSHRN Bd,Hn,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'part': 0, 'round': True, 'unsigned': True}, belongs_to='aarch64_vector_shift_right_narrow_uniform_sisd'),
    'vqrshrns_n_s32': ARMSema(intrin='vqrshrns_n_s32', inst='SQRSHRN', params=[Parameter(name='a', type='int32_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(32)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(16)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(0), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(32), '36'), Number(0)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(16), '47'), Call('SatQ', [Var('element', '49'), Number(16), Number(0)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='int16_t', ret_is_signed=True, inst_form='SQRSHRN Hd,Sn,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'part': 0, 'round': True, 'unsigned': False}, belongs_to='aarch64_vector_shift_right_narrow_uniform_sisd'),
    'vqrshrns_n_u32': ARMSema(intrin='vqrshrns_n_u32', inst='UQRSHRN', params=[Parameter(name='a', type='uint32_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(32)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(16)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(0), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(32), '36'), Number(1)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(16), '47'), Call('SatQ', [Var('element', '49'), Number(16), Number(1)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='uint16_t', ret_is_signed=False, inst_form='UQRSHRN Hd,Sn,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'part': 0, 'round': True, 'unsigned': True}, belongs_to='aarch64_vector_shift_right_narrow_uniform_sisd'),
    'vqrshrun_high_n_s16': ARMSema(intrin='vqrshrun_high_n_s16', inst='SQRSHRUN2', params=[Parameter(name='r', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '51'), Number(0), Number(7), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(16), '36')], '37'), Var('round_const', '38'), '39'), Var('shift', '40'), '41')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(8), '46'), Call('UnsignedSatQ', [Var('element', '48'), Number(8)], '50'))], 1, '52'), Update(VPartReg(Var('d', '54'), Number(1), '56'), Var('result', '57'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='SQRSHRUN2 Vd.16B,Vn.8H,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_nonuniform_simd'),
    'vqrshrun_high_n_s32': ARMSema(intrin='vqrshrun_high_n_s32', inst='SQRSHRUN2', params=[Parameter(name='r', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '51'), Number(0), Number(3), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(32), '36')], '37'), Var('round_const', '38'), '39'), Var('shift', '40'), '41')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(16), '46'), Call('UnsignedSatQ', [Var('element', '48'), Number(16)], '50'))], 1, '52'), Update(VPartReg(Var('d', '54'), Number(1), '56'), Var('result', '57'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='SQRSHRUN2 Vd.8H,Vn.4S,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_nonuniform_simd'),
    'vqrshrun_high_n_s64': ARMSema(intrin='vqrshrun_high_n_s64', inst='SQRSHRUN2', params=[Parameter(name='r', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '51'), Number(0), Number(1), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(64), '36')], '37'), Var('round_const', '38'), '39'), Var('shift', '40'), '41')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(32), '46'), Call('UnsignedSatQ', [Var('element', '48'), Number(32)], '50'))], 1, '52'), Update(VPartReg(Var('d', '54'), Number(1), '56'), Var('result', '57'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='SQRSHRUN2 Vd.4S,Vn.2D,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_nonuniform_simd'),
    'vqrshrun_n_s16': ARMSema(intrin='vqrshrun_n_s16', inst='SQRSHRUN', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '51'), Number(0), Number(7), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(16), '36')], '37'), Var('round_const', '38'), '39'), Var('shift', '40'), '41')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(8), '46'), Call('UnsignedSatQ', [Var('element', '48'), Number(8)], '50'))], 1, '52'), Update(VPartReg(Var('d', '54'), Number(0), '56'), Var('result', '57'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='SQRSHRUN Vd.8B,Vn.8H,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_nonuniform_simd'),
    'vqrshrun_n_s32': ARMSema(intrin='vqrshrun_n_s32', inst='SQRSHRUN', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '51'), Number(0), Number(3), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(32), '36')], '37'), Var('round_const', '38'), '39'), Var('shift', '40'), '41')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(16), '46'), Call('UnsignedSatQ', [Var('element', '48'), Number(16)], '50'))], 1, '52'), Update(VPartReg(Var('d', '54'), Number(0), '56'), Var('result', '57'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='SQRSHRUN Vd.4H,Vn.4S,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_nonuniform_simd'),
    'vqrshrun_n_s64': ARMSema(intrin='vqrshrun_n_s64', inst='SQRSHRUN', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '51'), Number(0), Number(1), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(64), '36')], '37'), Var('round_const', '38'), '39'), Var('shift', '40'), '41')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(32), '46'), Call('UnsignedSatQ', [Var('element', '48'), Number(32)], '50'))], 1, '52'), Update(VPartReg(Var('d', '54'), Number(0), '56'), Var('result', '57'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='SQRSHRUN Vd.2S,Vn.2D,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_nonuniform_simd'),
    'vqrshrund_n_s64': ARMSema(intrin='vqrshrund_n_s64', inst='SQRSHRUN', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(32)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '51'), Number(0), Number(0), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(64), '36')], '37'), Var('round_const', '38'), '39'), Var('shift', '40'), '41')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(32), '46'), Call('UnsignedSatQ', [Var('element', '48'), Number(32)], '50'))], 1, '52'), Update(VPartReg(Var('d', '54'), Number(0), '56'), Var('result', '57'))], rettype='uint32_t', ret_is_signed=False, inst_form='SQRSHRUN Sd,Dn,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'part': 0, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_nonuniform_sisd'),
    'vqrshrunh_n_s16': ARMSema(intrin='vqrshrunh_n_s16', inst='SQRSHRUN', params=[Parameter(name='a', type='int16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(16)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(8)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '51'), Number(0), Number(0), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(16), '36')], '37'), Var('round_const', '38'), '39'), Var('shift', '40'), '41')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(8), '46'), Call('UnsignedSatQ', [Var('element', '48'), Number(8)], '50'))], 1, '52'), Update(VPartReg(Var('d', '54'), Number(0), '56'), Var('result', '57'))], rettype='uint8_t', ret_is_signed=False, inst_form='SQRSHRUN Bd,Hn,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'part': 0, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_nonuniform_sisd'),
    'vqrshruns_n_s32': ARMSema(intrin='vqrshruns_n_s32', inst='SQRSHRUN', params=[Parameter(name='a', type='int32_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(32)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(16)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '51'), Number(0), Number(0), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(32), '36')], '37'), Var('round_const', '38'), '39'), Var('shift', '40'), '41')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(16), '46'), Call('UnsignedSatQ', [Var('element', '48'), Number(16)], '50'))], 1, '52'), Update(VPartReg(Var('d', '54'), Number(0), '56'), Var('result', '57'))], rettype='uint16_t', ret_is_signed=False, inst_form='SQRSHRUN Hd,Sn,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'part': 0, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_nonuniform_sisd'),
    'vqshl_s16': ARMSema(intrin='vqshl_s16', inst='SQSHL', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(32)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(32)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(3), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(32)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(16), '62'), Number(0), Number(32)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(16), '76'), Call('SatQ', [Var('element', '78'), Number(16), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SQSHL Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqshl_s32': ARMSema(intrin='vqshl_s32', inst='SQSHL', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(1), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(64)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(32), '62'), Number(0), Number(64)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(32), '76'), Call('SatQ', [Var('element', '78'), Number(32), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SQSHL Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqshl_s64': ARMSema(intrin='vqshl_s64', inst='SQSHL', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(0), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(64), '76'), Call('SatQ', [Var('element', '78'), Number(64), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int64x1_t', ret_is_signed=True, inst_form='SQSHL Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vqshl_s8': ARMSema(intrin='vqshl_s8', inst='SQSHL', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(16)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(16)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(7), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(16)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(8), '62'), Number(0), Number(16)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(8), '76'), Call('SatQ', [Var('element', '78'), Number(8), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SQSHL Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqshl_u16': ARMSema(intrin='vqshl_u16', inst='UQSHL', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(32)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(32)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(3), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(32)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(16), '62'), Number(1), Number(32)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(16), '76'), Call('SatQ', [Var('element', '78'), Number(16), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='UQSHL Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqshl_u32': ARMSema(intrin='vqshl_u32', inst='UQSHL', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(1), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(64)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(32), '62'), Number(1), Number(64)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(32), '76'), Call('SatQ', [Var('element', '78'), Number(32), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='UQSHL Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqshl_u64': ARMSema(intrin='vqshl_u64', inst='UQSHL', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(1), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(64), '76'), Call('SatQ', [Var('element', '78'), Number(64), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='UQSHL Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vqshl_u8': ARMSema(intrin='vqshl_u8', inst='UQSHL', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(16)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(16)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(7), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(16)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(8), '62'), Number(1), Number(16)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(8), '76'), Call('SatQ', [Var('element', '78'), Number(8), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='UQSHL Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqshlb_n_s8': ARMSema(intrin='vqshlb_n_s8', inst='SQSHL', params=[Parameter(name='a', type='int8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(8)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('sat', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '41'), Number(0), Number(0), [Update(Var('element', '20'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26'), Number(0)], '28'), Var('shift', '29'), '30')), Update(ElemSlice(Var('result', '32'), Var('e', '33'), Number(8), '35'), Call('SatQ', [Var('element', '37'), Number(8), Number(0)], '40'))], 1, '42'), Update(VReg(Var('d', '44'), '45'), Var('result', '46'))], rettype='int8_t', ret_is_signed=True, inst_form='SQSHL Bd,Bn,#n', extensions=None, imm_width=(0, 7), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'src_unsigned': False, 'dst_unsigned': False}, belongs_to='aarch64_vector_shift_left_sat_sisd'),
    'vqshlb_n_u8': ARMSema(intrin='vqshlb_n_u8', inst='UQSHL', params=[Parameter(name='a', type='uint8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(8)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('sat', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '41'), Number(0), Number(0), [Update(Var('element', '20'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26'), Number(1)], '28'), Var('shift', '29'), '30')), Update(ElemSlice(Var('result', '32'), Var('e', '33'), Number(8), '35'), Call('SatQ', [Var('element', '37'), Number(8), Number(1)], '40'))], 1, '42'), Update(VReg(Var('d', '44'), '45'), Var('result', '46'))], rettype='uint8_t', ret_is_signed=False, inst_form='UQSHL Bd,Bn,#n', extensions=None, imm_width=(0, 7), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'src_unsigned': True, 'dst_unsigned': True}, belongs_to='aarch64_vector_shift_left_sat_sisd'),
    'vqshlb_s8': ARMSema(intrin='vqshlb_s8', inst='SQSHL', params=[Parameter(name='a', type='int8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(8)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(8)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(16)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(16)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(16)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(8), '62'), Number(0), Number(16)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(8), '76'), Call('SatQ', [Var('element', '78'), Number(8), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int8_t', ret_is_signed=True, inst_form='SQSHL Bd,Bn,Bm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'unsigned': False, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vqshlb_u8': ARMSema(intrin='vqshlb_u8', inst='UQSHL', params=[Parameter(name='a', type='uint8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(8)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(8)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(16)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(16)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(16)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(8), '62'), Number(1), Number(16)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(8), '76'), Call('SatQ', [Var('element', '78'), Number(8), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint8_t', ret_is_signed=False, inst_form='UQSHL Bd,Bn,Bm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'unsigned': True, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vqshld_s64': ARMSema(intrin='vqshld_s64', inst='SQSHL', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(0), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(64), '76'), Call('SatQ', [Var('element', '78'), Number(64), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int64_t', ret_is_signed=True, inst_form='SQSHL Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vqshld_u64': ARMSema(intrin='vqshld_u64', inst='UQSHL', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(1), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(64), '76'), Call('SatQ', [Var('element', '78'), Number(64), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint64_t', ret_is_signed=False, inst_form='UQSHL Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vqshlh_n_s16': ARMSema(intrin='vqshlh_n_s16', inst='SQSHL', params=[Parameter(name='a', type='int16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(16)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('sat', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '41'), Number(0), Number(0), [Update(Var('element', '20'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26'), Number(0)], '28'), Var('shift', '29'), '30')), Update(ElemSlice(Var('result', '32'), Var('e', '33'), Number(16), '35'), Call('SatQ', [Var('element', '37'), Number(16), Number(0)], '40'))], 1, '42'), Update(VReg(Var('d', '44'), '45'), Var('result', '46'))], rettype='int16_t', ret_is_signed=True, inst_form='SQSHL Hd,Hn,#n', extensions=None, imm_width=(0, 15), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'src_unsigned': False, 'dst_unsigned': False}, belongs_to='aarch64_vector_shift_left_sat_sisd'),
    'vqshlh_n_u16': ARMSema(intrin='vqshlh_n_u16', inst='UQSHL', params=[Parameter(name='a', type='uint16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(16)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('sat', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '41'), Number(0), Number(0), [Update(Var('element', '20'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26'), Number(1)], '28'), Var('shift', '29'), '30')), Update(ElemSlice(Var('result', '32'), Var('e', '33'), Number(16), '35'), Call('SatQ', [Var('element', '37'), Number(16), Number(1)], '40'))], 1, '42'), Update(VReg(Var('d', '44'), '45'), Var('result', '46'))], rettype='uint16_t', ret_is_signed=False, inst_form='UQSHL Hd,Hn,#n', extensions=None, imm_width=(0, 15), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'src_unsigned': True, 'dst_unsigned': True}, belongs_to='aarch64_vector_shift_left_sat_sisd'),
    'vqshlh_s16': ARMSema(intrin='vqshlh_s16', inst='SQSHL', params=[Parameter(name='a', type='int16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(16)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(16)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(32)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(32)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(32)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(16), '62'), Number(0), Number(32)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(16), '76'), Call('SatQ', [Var('element', '78'), Number(16), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int16_t', ret_is_signed=True, inst_form='SQSHL Hd,Hn,Hm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'unsigned': False, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vqshlh_u16': ARMSema(intrin='vqshlh_u16', inst='UQSHL', params=[Parameter(name='a', type='uint16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(16)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(16)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(32)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(32)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(32)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(16), '62'), Number(1), Number(32)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(16), '76'), Call('SatQ', [Var('element', '78'), Number(16), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint16_t', ret_is_signed=False, inst_form='UQSHL Hd,Hn,Hm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'unsigned': True, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vqshlq_s16': ARMSema(intrin='vqshlq_s16', inst='SQSHL', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(32)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(32)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(7), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(32)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(16), '62'), Number(0), Number(32)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(16), '76'), Call('SatQ', [Var('element', '78'), Number(16), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SQSHL Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqshlq_s32': ARMSema(intrin='vqshlq_s32', inst='SQSHL', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(3), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(64)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(32), '62'), Number(0), Number(64)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(32), '76'), Call('SatQ', [Var('element', '78'), Number(32), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQSHL Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqshlq_s64': ARMSema(intrin='vqshlq_s64', inst='SQSHL', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(1), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(0), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(64), '76'), Call('SatQ', [Var('element', '78'), Number(64), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SQSHL Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': False, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqshlq_s8': ARMSema(intrin='vqshlq_s8', inst='SQSHL', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(16)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(16)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(15), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(16)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(8), '62'), Number(0), Number(16)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(8), '76'), Call('SatQ', [Var('element', '78'), Number(8), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SQSHL Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqshlq_u16': ARMSema(intrin='vqshlq_u16', inst='UQSHL', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(32)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(32)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(7), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(32)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(16), '62'), Number(1), Number(32)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(16), '76'), Call('SatQ', [Var('element', '78'), Number(16), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UQSHL Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqshlq_u32': ARMSema(intrin='vqshlq_u32', inst='UQSHL', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(3), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(64)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(32), '62'), Number(1), Number(64)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(32), '76'), Call('SatQ', [Var('element', '78'), Number(32), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UQSHL Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqshlq_u64': ARMSema(intrin='vqshlq_u64', inst='UQSHL', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(1), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(1), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(64), '76'), Call('SatQ', [Var('element', '78'), Number(64), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UQSHL Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': True, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqshlq_u8': ARMSema(intrin='vqshlq_u8', inst='UQSHL', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(16)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(16)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(15), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(16)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(8), '62'), Number(1), Number(16)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(8), '76'), Call('SatQ', [Var('element', '78'), Number(8), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='UQSHL Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vqshls_n_s32': ARMSema(intrin='vqshls_n_s32', inst='SQSHL', params=[Parameter(name='a', type='int32_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(32)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('sat', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '41'), Number(0), Number(0), [Update(Var('element', '20'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26'), Number(0)], '28'), Var('shift', '29'), '30')), Update(ElemSlice(Var('result', '32'), Var('e', '33'), Number(32), '35'), Call('SatQ', [Var('element', '37'), Number(32), Number(0)], '40'))], 1, '42'), Update(VReg(Var('d', '44'), '45'), Var('result', '46'))], rettype='int32_t', ret_is_signed=True, inst_form='SQSHL Sd,Sn,#n', extensions=None, imm_width=(0, 31), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'src_unsigned': False, 'dst_unsigned': False}, belongs_to='aarch64_vector_shift_left_sat_sisd'),
    'vqshls_n_u32': ARMSema(intrin='vqshls_n_u32', inst='UQSHL', params=[Parameter(name='a', type='uint32_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(32)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('sat', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '41'), Number(0), Number(0), [Update(Var('element', '20'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26'), Number(1)], '28'), Var('shift', '29'), '30')), Update(ElemSlice(Var('result', '32'), Var('e', '33'), Number(32), '35'), Call('SatQ', [Var('element', '37'), Number(32), Number(1)], '40'))], 1, '42'), Update(VReg(Var('d', '44'), '45'), Var('result', '46'))], rettype='uint32_t', ret_is_signed=False, inst_form='UQSHL Sd,Sn,#n', extensions=None, imm_width=(0, 31), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'src_unsigned': True, 'dst_unsigned': True}, belongs_to='aarch64_vector_shift_left_sat_sisd'),
    'vqshls_s32': ARMSema(intrin='vqshls_s32', inst='SQSHL', params=[Parameter(name='a', type='int32_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(32)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(32)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(64)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(32), '62'), Number(0), Number(64)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(32), '76'), Call('SatQ', [Var('element', '78'), Number(32), Number(0)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int32_t', ret_is_signed=True, inst_form='SQSHL Sd,Sn,Sm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'unsigned': False, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vqshls_u32': ARMSema(intrin='vqshls_u32', inst='UQSHL', params=[Parameter(name='a', type='uint32_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(32)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(32)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(64)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(32), '62'), Number(1), Number(64)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '73'), Var('e', '74'), Number(32), '76'), Call('SatQ', [Var('element', '78'), Number(32), Number(1)], '81'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint32_t', ret_is_signed=False, inst_form='UQSHL Sd,Sn,Sm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'unsigned': True, 'rounding': False, 'saturating': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vqshlu_n_s16': ARMSema(intrin='vqshlu_n_s16', inst='SQSHLU', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('sat', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '41'), Number(0), Number(3), [Update(Var('element', '20'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26'), Number(0)], '28'), Var('shift', '29'), '30')), Update(ElemSlice(Var('result', '32'), Var('e', '33'), Number(16), '35'), Call('SatQ', [Var('element', '37'), Number(16), Number(1)], '40'))], 1, '42'), Update(VReg(Var('d', '44'), '45'), Var('result', '46'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='SQSHLU Vd.4H,Vn.4H,#n', extensions=None, imm_width=(0, 15), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'src_unsigned': False, 'dst_unsigned': True}, belongs_to='aarch64_vector_shift_left_sat_simd'),
    'vqshlu_n_s32': ARMSema(intrin='vqshlu_n_s32', inst='SQSHLU', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('sat', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '41'), Number(0), Number(1), [Update(Var('element', '20'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26'), Number(0)], '28'), Var('shift', '29'), '30')), Update(ElemSlice(Var('result', '32'), Var('e', '33'), Number(32), '35'), Call('SatQ', [Var('element', '37'), Number(32), Number(1)], '40'))], 1, '42'), Update(VReg(Var('d', '44'), '45'), Var('result', '46'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='SQSHLU Vd.2S,Vn.2S,#n', extensions=None, imm_width=(0, 31), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'src_unsigned': False, 'dst_unsigned': True}, belongs_to='aarch64_vector_shift_left_sat_simd'),
    'vqshlu_n_s64': ARMSema(intrin='vqshlu_n_s64', inst='SQSHLU', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('sat', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '41'), Number(0), Number(0), [Update(Var('element', '20'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26'), Number(0)], '28'), Var('shift', '29'), '30')), Update(ElemSlice(Var('result', '32'), Var('e', '33'), Number(64), '35'), Call('SatQ', [Var('element', '37'), Number(64), Number(1)], '40'))], 1, '42'), Update(VReg(Var('d', '44'), '45'), Var('result', '46'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='SQSHLU Dd,Dn,#n', extensions=None, imm_width=(0, 63), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'src_unsigned': False, 'dst_unsigned': True}, belongs_to='aarch64_vector_shift_left_sat_sisd'),
    'vqshlu_n_s8': ARMSema(intrin='vqshlu_n_s8', inst='SQSHLU', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('sat', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '41'), Number(0), Number(7), [Update(Var('element', '20'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26'), Number(0)], '28'), Var('shift', '29'), '30')), Update(ElemSlice(Var('result', '32'), Var('e', '33'), Number(8), '35'), Call('SatQ', [Var('element', '37'), Number(8), Number(1)], '40'))], 1, '42'), Update(VReg(Var('d', '44'), '45'), Var('result', '46'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='SQSHLU Vd.8B,Vn.8B,#n', extensions=None, imm_width=(0, 7), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'src_unsigned': False, 'dst_unsigned': True}, belongs_to='aarch64_vector_shift_left_sat_simd'),
    'vqshlub_n_s8': ARMSema(intrin='vqshlub_n_s8', inst='SQSHLU', params=[Parameter(name='a', type='int8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(8)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('sat', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '41'), Number(0), Number(0), [Update(Var('element', '20'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26'), Number(0)], '28'), Var('shift', '29'), '30')), Update(ElemSlice(Var('result', '32'), Var('e', '33'), Number(8), '35'), Call('SatQ', [Var('element', '37'), Number(8), Number(1)], '40'))], 1, '42'), Update(VReg(Var('d', '44'), '45'), Var('result', '46'))], rettype='uint8_t', ret_is_signed=False, inst_form='SQSHLU Bd,Bn,#n', extensions=None, imm_width=(0, 7), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'src_unsigned': False, 'dst_unsigned': True}, belongs_to='aarch64_vector_shift_left_sat_sisd'),
    'vqshlud_n_s64': ARMSema(intrin='vqshlud_n_s64', inst='SQSHLU', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('sat', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '41'), Number(0), Number(0), [Update(Var('element', '20'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26'), Number(0)], '28'), Var('shift', '29'), '30')), Update(ElemSlice(Var('result', '32'), Var('e', '33'), Number(64), '35'), Call('SatQ', [Var('element', '37'), Number(64), Number(1)], '40'))], 1, '42'), Update(VReg(Var('d', '44'), '45'), Var('result', '46'))], rettype='uint64_t', ret_is_signed=False, inst_form='SQSHLU Dd,Dn,#n', extensions=None, imm_width=(0, 63), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'src_unsigned': False, 'dst_unsigned': True}, belongs_to='aarch64_vector_shift_left_sat_sisd'),
    'vqshluh_n_s16': ARMSema(intrin='vqshluh_n_s16', inst='SQSHLU', params=[Parameter(name='a', type='int16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(16)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('sat', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '41'), Number(0), Number(0), [Update(Var('element', '20'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26'), Number(0)], '28'), Var('shift', '29'), '30')), Update(ElemSlice(Var('result', '32'), Var('e', '33'), Number(16), '35'), Call('SatQ', [Var('element', '37'), Number(16), Number(1)], '40'))], 1, '42'), Update(VReg(Var('d', '44'), '45'), Var('result', '46'))], rettype='uint16_t', ret_is_signed=False, inst_form='SQSHLU Hd,Hn,#n', extensions=None, imm_width=(0, 15), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'src_unsigned': False, 'dst_unsigned': True}, belongs_to='aarch64_vector_shift_left_sat_sisd'),
    'vqshluq_n_s16': ARMSema(intrin='vqshluq_n_s16', inst='SQSHLU', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('sat', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '41'), Number(0), Number(7), [Update(Var('element', '20'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(16), '26'), Number(0)], '28'), Var('shift', '29'), '30')), Update(ElemSlice(Var('result', '32'), Var('e', '33'), Number(16), '35'), Call('SatQ', [Var('element', '37'), Number(16), Number(1)], '40'))], 1, '42'), Update(VReg(Var('d', '44'), '45'), Var('result', '46'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='SQSHLU Vd.8H,Vn.8H,#n', extensions=None, imm_width=(0, 15), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'src_unsigned': False, 'dst_unsigned': True}, belongs_to='aarch64_vector_shift_left_sat_simd'),
    'vqshluq_n_s32': ARMSema(intrin='vqshluq_n_s32', inst='SQSHLU', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('sat', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '41'), Number(0), Number(3), [Update(Var('element', '20'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26'), Number(0)], '28'), Var('shift', '29'), '30')), Update(ElemSlice(Var('result', '32'), Var('e', '33'), Number(32), '35'), Call('SatQ', [Var('element', '37'), Number(32), Number(1)], '40'))], 1, '42'), Update(VReg(Var('d', '44'), '45'), Var('result', '46'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='SQSHLU Vd.4S,Vn.4S,#n', extensions=None, imm_width=(0, 31), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'src_unsigned': False, 'dst_unsigned': True}, belongs_to='aarch64_vector_shift_left_sat_simd'),
    'vqshluq_n_s64': ARMSema(intrin='vqshluq_n_s64', inst='SQSHLU', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('sat', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '41'), Number(0), Number(1), [Update(Var('element', '20'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(64), '26'), Number(0)], '28'), Var('shift', '29'), '30')), Update(ElemSlice(Var('result', '32'), Var('e', '33'), Number(64), '35'), Call('SatQ', [Var('element', '37'), Number(64), Number(1)], '40'))], 1, '42'), Update(VReg(Var('d', '44'), '45'), Var('result', '46'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='SQSHLU Vd.2D,Vn.2D,#n', extensions=None, imm_width=(0, 63), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'src_unsigned': False, 'dst_unsigned': True}, belongs_to='aarch64_vector_shift_left_sat_simd'),
    'vqshluq_n_s8': ARMSema(intrin='vqshluq_n_s8', inst='SQSHLU', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('sat', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '41'), Number(0), Number(15), [Update(Var('element', '20'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(8), '26'), Number(0)], '28'), Var('shift', '29'), '30')), Update(ElemSlice(Var('result', '32'), Var('e', '33'), Number(8), '35'), Call('SatQ', [Var('element', '37'), Number(8), Number(1)], '40'))], 1, '42'), Update(VReg(Var('d', '44'), '45'), Var('result', '46'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='SQSHLU Vd.16B,Vn.16B,#n', extensions=None, imm_width=(0, 7), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'src_unsigned': False, 'dst_unsigned': True}, belongs_to='aarch64_vector_shift_left_sat_simd'),
    'vqshlus_n_s32': ARMSema(intrin='vqshlus_n_s32', inst='SQSHLU', params=[Parameter(name='a', type='int32_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(32)), '11'), VarsDecl([VarDeclUndef(Var('element', '12'), '13')], ('integer', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('sat', '15'), '16')], ('boolean', Number(1)), '17'), For(Var('e', '41'), Number(0), Number(0), [Update(Var('element', '20'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '23'), Var('e', '24'), Number(32), '26'), Number(0)], '28'), Var('shift', '29'), '30')), Update(ElemSlice(Var('result', '32'), Var('e', '33'), Number(32), '35'), Call('SatQ', [Var('element', '37'), Number(32), Number(1)], '40'))], 1, '42'), Update(VReg(Var('d', '44'), '45'), Var('result', '46'))], rettype='uint32_t', ret_is_signed=False, inst_form='SQSHLU Sd,Sn,#n', extensions=None, imm_width=(0, 31), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'src_unsigned': False, 'dst_unsigned': True}, belongs_to='aarch64_vector_shift_left_sat_sisd'),
    'vqshrn_high_n_s16': ARMSema(intrin='vqshrn_high_n_s16', inst='SQSHRN2', params=[Parameter(name='r', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(7), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(16), '36'), Number(0)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(8), '47'), Call('SatQ', [Var('element', '49'), Number(8), Number(0)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(1), '58'), Var('result', '59'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SQSHRN2 Vd.16B,Vn.8H,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'round': False, 'unsigned': False}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqshrn_high_n_s32': ARMSema(intrin='vqshrn_high_n_s32', inst='SQSHRN2', params=[Parameter(name='r', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(3), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(32), '36'), Number(0)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(16), '47'), Call('SatQ', [Var('element', '49'), Number(16), Number(0)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(1), '58'), Var('result', '59'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SQSHRN2 Vd.8H,Vn.4S,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'round': False, 'unsigned': False}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqshrn_high_n_s64': ARMSema(intrin='vqshrn_high_n_s64', inst='SQSHRN2', params=[Parameter(name='r', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(1), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(64), '36'), Number(0)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(32), '47'), Call('SatQ', [Var('element', '49'), Number(32), Number(0)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(1), '58'), Var('result', '59'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQSHRN2 Vd.4S,Vn.2D,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'round': False, 'unsigned': False}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqshrn_high_n_u16': ARMSema(intrin='vqshrn_high_n_u16', inst='UQSHRN2', params=[Parameter(name='r', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(7), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(16), '36'), Number(1)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(8), '47'), Call('SatQ', [Var('element', '49'), Number(8), Number(1)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(1), '58'), Var('result', '59'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='UQSHRN2 Vd.16B,Vn.8H,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'round': False, 'unsigned': True}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqshrn_high_n_u32': ARMSema(intrin='vqshrn_high_n_u32', inst='UQSHRN2', params=[Parameter(name='r', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(3), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(32), '36'), Number(1)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(16), '47'), Call('SatQ', [Var('element', '49'), Number(16), Number(1)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(1), '58'), Var('result', '59'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UQSHRN2 Vd.8H,Vn.4S,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'round': False, 'unsigned': True}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqshrn_high_n_u64': ARMSema(intrin='vqshrn_high_n_u64', inst='UQSHRN2', params=[Parameter(name='r', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(1), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(64), '36'), Number(1)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(32), '47'), Call('SatQ', [Var('element', '49'), Number(32), Number(1)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(1), '58'), Var('result', '59'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UQSHRN2 Vd.4S,Vn.2D,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'round': False, 'unsigned': True}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqshrn_n_s16': ARMSema(intrin='vqshrn_n_s16', inst='SQSHRN', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(7), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(16), '36'), Number(0)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(8), '47'), Call('SatQ', [Var('element', '49'), Number(8), Number(0)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SQSHRN Vd.8B,Vn.8H,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'round': False, 'unsigned': False}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqshrn_n_s32': ARMSema(intrin='vqshrn_n_s32', inst='SQSHRN', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(3), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(32), '36'), Number(0)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(16), '47'), Call('SatQ', [Var('element', '49'), Number(16), Number(0)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SQSHRN Vd.4H,Vn.4S,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'round': False, 'unsigned': False}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqshrn_n_s64': ARMSema(intrin='vqshrn_n_s64', inst='SQSHRN', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(1), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(64), '36'), Number(0)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(32), '47'), Call('SatQ', [Var('element', '49'), Number(32), Number(0)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SQSHRN Vd.2S,Vn.2D,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'round': False, 'unsigned': False}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqshrn_n_u16': ARMSema(intrin='vqshrn_n_u16', inst='UQSHRN', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(7), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(16), '36'), Number(1)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(8), '47'), Call('SatQ', [Var('element', '49'), Number(8), Number(1)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='UQSHRN Vd.8B,Vn.8H,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'round': False, 'unsigned': True}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqshrn_n_u32': ARMSema(intrin='vqshrn_n_u32', inst='UQSHRN', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(3), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(32), '36'), Number(1)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(16), '47'), Call('SatQ', [Var('element', '49'), Number(16), Number(1)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='UQSHRN Vd.4H,Vn.4S,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'round': False, 'unsigned': True}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqshrn_n_u64': ARMSema(intrin='vqshrn_n_u64', inst='UQSHRN', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(1), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(64), '36'), Number(1)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(32), '47'), Call('SatQ', [Var('element', '49'), Number(32), Number(1)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='UQSHRN Vd.2S,Vn.2D,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'round': False, 'unsigned': True}, belongs_to='aarch64_vector_shift_right_narrow_uniform_simd'),
    'vqshrnd_n_s64': ARMSema(intrin='vqshrnd_n_s64', inst='SQSHRN', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(32)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(0), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(64), '36'), Number(0)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(32), '47'), Call('SatQ', [Var('element', '49'), Number(32), Number(0)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='int32_t', ret_is_signed=True, inst_form='SQSHRN Sd,Dn,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'part': 0, 'round': False, 'unsigned': False}, belongs_to='aarch64_vector_shift_right_narrow_uniform_sisd'),
    'vqshrnd_n_u64': ARMSema(intrin='vqshrnd_n_u64', inst='UQSHRN', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(32)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(0), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(64), '36'), Number(1)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(32), '47'), Call('SatQ', [Var('element', '49'), Number(32), Number(1)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='uint32_t', ret_is_signed=False, inst_form='UQSHRN Sd,Dn,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'part': 0, 'round': False, 'unsigned': True}, belongs_to='aarch64_vector_shift_right_narrow_uniform_sisd'),
    'vqshrnh_n_s16': ARMSema(intrin='vqshrnh_n_s16', inst='SQSHRN', params=[Parameter(name='a', type='int16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(16)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(8)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(0), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(16), '36'), Number(0)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(8), '47'), Call('SatQ', [Var('element', '49'), Number(8), Number(0)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='int8_t', ret_is_signed=True, inst_form='SQSHRN Bd,Hn,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'part': 0, 'round': False, 'unsigned': False}, belongs_to='aarch64_vector_shift_right_narrow_uniform_sisd'),
    'vqshrnh_n_u16': ARMSema(intrin='vqshrnh_n_u16', inst='UQSHRN', params=[Parameter(name='a', type='uint16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(16)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(8)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(0), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(16), '36'), Number(1)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(8), '47'), Call('SatQ', [Var('element', '49'), Number(8), Number(1)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='uint8_t', ret_is_signed=False, inst_form='UQSHRN Bd,Hn,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'part': 0, 'round': False, 'unsigned': True}, belongs_to='aarch64_vector_shift_right_narrow_uniform_sisd'),
    'vqshrns_n_s32': ARMSema(intrin='vqshrns_n_s32', inst='SQSHRN', params=[Parameter(name='a', type='int32_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(32)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(16)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(0), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(32), '36'), Number(0)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(16), '47'), Call('SatQ', [Var('element', '49'), Number(16), Number(0)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='int16_t', ret_is_signed=True, inst_form='SQSHRN Hd,Sn,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'part': 0, 'round': False, 'unsigned': False}, belongs_to='aarch64_vector_shift_right_narrow_uniform_sisd'),
    'vqshrns_n_u32': ARMSema(intrin='vqshrns_n_u32', inst='UQSHRN', params=[Parameter(name='a', type='uint32_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(32)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(16)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '53'), Number(0), Number(0), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(32), '36'), Number(1)], '38'), Var('round_const', '39'), '40'), Var('shift', '41'), '42')), Update(ElemSlice(Var('result', '44'), Var('e', '45'), Number(16), '47'), Call('SatQ', [Var('element', '49'), Number(16), Number(1)], '52'))], 1, '54'), Update(VPartReg(Var('d', '56'), Number(0), '58'), Var('result', '59'))], rettype='uint16_t', ret_is_signed=False, inst_form='UQSHRN Hd,Sn,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'part': 0, 'round': False, 'unsigned': True}, belongs_to='aarch64_vector_shift_right_narrow_uniform_sisd'),
    'vqshrun_high_n_s16': ARMSema(intrin='vqshrun_high_n_s16', inst='SQSHRUN2', params=[Parameter(name='r', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '51'), Number(0), Number(7), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(16), '36')], '37'), Var('round_const', '38'), '39'), Var('shift', '40'), '41')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(8), '46'), Call('UnsignedSatQ', [Var('element', '48'), Number(8)], '50'))], 1, '52'), Update(VPartReg(Var('d', '54'), Number(1), '56'), Var('result', '57'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='SQSHRUN2 Vd.16B,Vn.8H,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_nonuniform_simd'),
    'vqshrun_high_n_s32': ARMSema(intrin='vqshrun_high_n_s32', inst='SQSHRUN2', params=[Parameter(name='r', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '51'), Number(0), Number(3), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(32), '36')], '37'), Var('round_const', '38'), '39'), Var('shift', '40'), '41')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(16), '46'), Call('UnsignedSatQ', [Var('element', '48'), Number(16)], '50'))], 1, '52'), Update(VPartReg(Var('d', '54'), Number(1), '56'), Var('result', '57'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='SQSHRUN2 Vd.8H,Vn.4S,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_nonuniform_simd'),
    'vqshrun_high_n_s64': ARMSema(intrin='vqshrun_high_n_s64', inst='SQSHRUN2', params=[Parameter(name='r', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '51'), Number(0), Number(1), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(64), '36')], '37'), Var('round_const', '38'), '39'), Var('shift', '40'), '41')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(32), '46'), Call('UnsignedSatQ', [Var('element', '48'), Number(32)], '50'))], 1, '52'), Update(VPartReg(Var('d', '54'), Number(1), '56'), Var('result', '57'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='SQSHRUN2 Vd.4S,Vn.2D,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_nonuniform_simd'),
    'vqshrun_n_s16': ARMSema(intrin='vqshrun_n_s16', inst='SQSHRUN', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '51'), Number(0), Number(7), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(16), '36')], '37'), Var('round_const', '38'), '39'), Var('shift', '40'), '41')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(8), '46'), Call('UnsignedSatQ', [Var('element', '48'), Number(8)], '50'))], 1, '52'), Update(VPartReg(Var('d', '54'), Number(0), '56'), Var('result', '57'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='SQSHRUN Vd.8B,Vn.8H,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_nonuniform_simd'),
    'vqshrun_n_s32': ARMSema(intrin='vqshrun_n_s32', inst='SQSHRUN', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '51'), Number(0), Number(3), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(32), '36')], '37'), Var('round_const', '38'), '39'), Var('shift', '40'), '41')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(16), '46'), Call('UnsignedSatQ', [Var('element', '48'), Number(16)], '50'))], 1, '52'), Update(VPartReg(Var('d', '54'), Number(0), '56'), Var('result', '57'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='SQSHRUN Vd.4H,Vn.4S,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_nonuniform_simd'),
    'vqshrun_n_s64': ARMSema(intrin='vqshrun_n_s64', inst='SQSHRUN', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '51'), Number(0), Number(1), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(64), '36')], '37'), Var('round_const', '38'), '39'), Var('shift', '40'), '41')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(32), '46'), Call('UnsignedSatQ', [Var('element', '48'), Number(32)], '50'))], 1, '52'), Update(VPartReg(Var('d', '54'), Number(0), '56'), Var('result', '57'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='SQSHRUN Vd.2S,Vn.2D,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_nonuniform_simd'),
    'vqshrund_n_s64': ARMSema(intrin='vqshrund_n_s64', inst='SQSHRUN', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(32)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '51'), Number(0), Number(0), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(64), '36')], '37'), Var('round_const', '38'), '39'), Var('shift', '40'), '41')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(32), '46'), Call('UnsignedSatQ', [Var('element', '48'), Number(32)], '50'))], 1, '52'), Update(VPartReg(Var('d', '54'), Number(0), '56'), Var('result', '57'))], rettype='uint32_t', ret_is_signed=False, inst_form='SQSHRUN Sd,Dn,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'part': 0, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_nonuniform_sisd'),
    'vqshrunh_n_s16': ARMSema(intrin='vqshrunh_n_s16', inst='SQSHRUN', params=[Parameter(name='a', type='int16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(16)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(8)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '51'), Number(0), Number(0), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(16), '36')], '37'), Var('round_const', '38'), '39'), Var('shift', '40'), '41')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(8), '46'), Call('UnsignedSatQ', [Var('element', '48'), Number(8)], '50'))], 1, '52'), Update(VPartReg(Var('d', '54'), Number(0), '56'), Var('result', '57'))], rettype='uint8_t', ret_is_signed=False, inst_form='SQSHRUN Bd,Hn,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'part': 0, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_nonuniform_sisd'),
    'vqshruns_n_s32': ARMSema(intrin='vqshruns_n_s32', inst='SQSHRUN', params=[Parameter(name='a', type='int32_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(32)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(16)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('sat', '24'), '25')], ('boolean', Number(1)), '26'), For(Var('e', '51'), Number(0), Number(0), [Update(Var('element', '29'), BinaryExpr('>>', BinaryExpr('+', Call('SInt', [ElemSlice(Var('operand', '32'), Var('e', '33'), Number(32), '36')], '37'), Var('round_const', '38'), '39'), Var('shift', '40'), '41')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(16), '46'), Call('UnsignedSatQ', [Var('element', '48'), Number(16)], '50'))], 1, '52'), Update(VPartReg(Var('d', '54'), Number(0), '56'), Var('result', '57'))], rettype='uint16_t', ret_is_signed=False, inst_form='SQSHRUN Hd,Sn,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'part': 0, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_nonuniform_sisd'),
    'vqsub_s16': ARMSema(intrin='vqsub_s16', inst='SQSUB', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(16), '48'), Number(0)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(16), '59'), Call('SatQ', [Var('diff', '61'), Number(16), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SQSUB Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_simd'),
    'vqsub_s32': ARMSema(intrin='vqsub_s32', inst='SQSUB', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(32), '48'), Number(0)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(32), '59'), Call('SatQ', [Var('diff', '61'), Number(32), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SQSUB Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_simd'),
    'vqsub_s64': ARMSema(intrin='vqsub_s64', inst='SQSUB', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(0), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(64), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(64), '48'), Number(0)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(64), '59'), Call('SatQ', [Var('diff', '61'), Number(64), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int64x1_t', ret_is_signed=True, inst_form='SQSUB Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_sisd'),
    'vqsub_s8': ARMSema(intrin='vqsub_s8', inst='SQSUB', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(8), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(8), '48'), Number(0)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(8), '59'), Call('SatQ', [Var('diff', '61'), Number(8), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SQSUB Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_simd'),
    'vqsub_u16': ARMSema(intrin='vqsub_u16', inst='UQSUB', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(16), '48'), Number(1)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(16), '59'), Call('SatQ', [Var('diff', '61'), Number(16), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='UQSUB Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_simd'),
    'vqsub_u32': ARMSema(intrin='vqsub_u32', inst='UQSUB', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(32), '48'), Number(1)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(32), '59'), Call('SatQ', [Var('diff', '61'), Number(32), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='UQSUB Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_simd'),
    'vqsub_u64': ARMSema(intrin='vqsub_u64', inst='UQSUB', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(0), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(64), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(64), '48'), Number(1)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(64), '59'), Call('SatQ', [Var('diff', '61'), Number(64), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='UQSUB Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_sisd'),
    'vqsub_u8': ARMSema(intrin='vqsub_u8', inst='UQSUB', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(8), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(8), '48'), Number(1)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(8), '59'), Call('SatQ', [Var('diff', '61'), Number(8), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='UQSUB Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_simd'),
    'vqsubb_s8': ARMSema(intrin='vqsubb_s8', inst='SQSUB', params=[Parameter(name='a', type='int8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(8)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(8)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(0), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(8), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(8), '48'), Number(0)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(8), '59'), Call('SatQ', [Var('diff', '61'), Number(8), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int8_t', ret_is_signed=True, inst_form='SQSUB Bd,Bn,Bm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_sisd'),
    'vqsubb_u8': ARMSema(intrin='vqsubb_u8', inst='UQSUB', params=[Parameter(name='a', type='uint8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(8)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(8)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(0), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(8), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(8), '48'), Number(1)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(8), '59'), Call('SatQ', [Var('diff', '61'), Number(8), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint8_t', ret_is_signed=False, inst_form='UQSUB Bd,Bn,Bm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_sisd'),
    'vqsubd_s64': ARMSema(intrin='vqsubd_s64', inst='SQSUB', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(0), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(64), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(64), '48'), Number(0)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(64), '59'), Call('SatQ', [Var('diff', '61'), Number(64), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int64_t', ret_is_signed=True, inst_form='SQSUB Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_sisd'),
    'vqsubd_u64': ARMSema(intrin='vqsubd_u64', inst='UQSUB', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(0), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(64), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(64), '48'), Number(1)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(64), '59'), Call('SatQ', [Var('diff', '61'), Number(64), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint64_t', ret_is_signed=False, inst_form='UQSUB Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_sisd'),
    'vqsubh_s16': ARMSema(intrin='vqsubh_s16', inst='SQSUB', params=[Parameter(name='a', type='int16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(16)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(16)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(0), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(16), '48'), Number(0)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(16), '59'), Call('SatQ', [Var('diff', '61'), Number(16), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int16_t', ret_is_signed=True, inst_form='SQSUB Hd,Hn,Hm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_sisd'),
    'vqsubh_u16': ARMSema(intrin='vqsubh_u16', inst='UQSUB', params=[Parameter(name='a', type='uint16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(16)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(16)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(0), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(16), '48'), Number(1)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(16), '59'), Call('SatQ', [Var('diff', '61'), Number(16), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint16_t', ret_is_signed=False, inst_form='UQSUB Hd,Hn,Hm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_sisd'),
    'vqsubq_s16': ARMSema(intrin='vqsubq_s16', inst='SQSUB', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(16), '48'), Number(0)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(16), '59'), Call('SatQ', [Var('diff', '61'), Number(16), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SQSUB Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_simd'),
    'vqsubq_s32': ARMSema(intrin='vqsubq_s32', inst='SQSUB', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(32), '48'), Number(0)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(32), '59'), Call('SatQ', [Var('diff', '61'), Number(32), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SQSUB Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_simd'),
    'vqsubq_s64': ARMSema(intrin='vqsubq_s64', inst='SQSUB', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(64), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(64), '48'), Number(0)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(64), '59'), Call('SatQ', [Var('diff', '61'), Number(64), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SQSUB Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_simd'),
    'vqsubq_s8': ARMSema(intrin='vqsubq_s8', inst='SQSUB', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(15), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(8), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(8), '48'), Number(0)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(8), '59'), Call('SatQ', [Var('diff', '61'), Number(8), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SQSUB Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_simd'),
    'vqsubq_u16': ARMSema(intrin='vqsubq_u16', inst='UQSUB', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(16), '48'), Number(1)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(16), '59'), Call('SatQ', [Var('diff', '61'), Number(16), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UQSUB Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_simd'),
    'vqsubq_u32': ARMSema(intrin='vqsubq_u32', inst='UQSUB', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(32), '48'), Number(1)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(32), '59'), Call('SatQ', [Var('diff', '61'), Number(32), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UQSUB Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_simd'),
    'vqsubq_u64': ARMSema(intrin='vqsubq_u64', inst='UQSUB', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(64), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(64), '48'), Number(1)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(64), '59'), Call('SatQ', [Var('diff', '61'), Number(64), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UQSUB Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_simd'),
    'vqsubq_u8': ARMSema(intrin='vqsubq_u8', inst='UQSUB', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(15), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(8), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(8), '48'), Number(1)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(8), '59'), Call('SatQ', [Var('diff', '61'), Number(8), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='UQSUB Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_simd'),
    'vqsubs_s32': ARMSema(intrin='vqsubs_s32', inst='SQSUB', params=[Parameter(name='a', type='int32_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(32)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(32)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(0), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(32), '48'), Number(0)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(32), '59'), Call('SatQ', [Var('diff', '61'), Number(32), Number(0)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='int32_t', ret_is_signed=True, inst_form='SQSUB Sd,Sn,Sm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_sisd'),
    'vqsubs_u32': ARMSema(intrin='vqsubs_u32', inst='UQSUB', params=[Parameter(name='a', type='uint32_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(32)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(32)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('diff', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sat', '28'), '29')], ('boolean', Number(1)), '30'), For(Var('e', '65'), Number(0), Number(0), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(32), '48'), Number(1)], '50')), Update(Var('diff', '51'), BinaryExpr('-', Var('element1', '52'), Var('element2', '53'), '54')), Update(ElemSlice(Var('result', '56'), Var('e', '57'), Number(32), '59'), Call('SatQ', [Var('diff', '61'), Number(32), Number(1)], '64'))], 1, '66'), Update(VReg(Var('d', '68'), '69'), Var('result', '70'))], rettype='uint32_t', ret_is_signed=False, inst_form='UQSUB Sd,Sn,Sm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_sub_saturating_sisd'),
    'vraddhn_high_s16': ARMSema(intrin='vraddhn_high_s16', inst='RADDHN2', params=[Parameter(name='r', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(128), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(16)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(16)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(16)), '48'), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(16), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(8), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(15), Number(8), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='int8x16_t', ret_is_signed=True, inst_form='RADDHN2 Vd.16B,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'sub_op': False, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vraddhn_high_s32': ARMSema(intrin='vraddhn_high_s32', inst='RADDHN2', params=[Parameter(name='r', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(32768), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(32)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(32)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(32)), '48'), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(32), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(16), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(31), Number(16), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='int16x8_t', ret_is_signed=True, inst_form='RADDHN2 Vd.8H,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': False, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vraddhn_high_s64': ARMSema(intrin='vraddhn_high_s64', inst='RADDHN2', params=[Parameter(name='r', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(2147483648), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(64)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(64)), '48'), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(64), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(64), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(32), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(63), Number(32), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='int32x4_t', ret_is_signed=True, inst_form='RADDHN2 Vd.4S,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': False, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vraddhn_high_u16': ARMSema(intrin='vraddhn_high_u16', inst='RADDHN2', params=[Parameter(name='r', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(128), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(16)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(16)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(16)), '48'), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(16), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(8), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(15), Number(8), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='RADDHN2 Vd.16B,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'sub_op': False, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vraddhn_high_u32': ARMSema(intrin='vraddhn_high_u32', inst='RADDHN2', params=[Parameter(name='r', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(32768), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(32)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(32)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(32)), '48'), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(32), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(16), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(31), Number(16), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='RADDHN2 Vd.8H,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': False, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vraddhn_high_u64': ARMSema(intrin='vraddhn_high_u64', inst='RADDHN2', params=[Parameter(name='r', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(2147483648), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(64)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(64)), '48'), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(64), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(64), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(32), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(63), Number(32), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='RADDHN2 Vd.4S,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': False, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vraddhn_s16': ARMSema(intrin='vraddhn_s16', inst='RADDHN', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(128), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(16)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(16)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(16)), '48'), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(16), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(8), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(15), Number(8), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='int8x8_t', ret_is_signed=True, inst_form='RADDHN Vd.8B,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'sub_op': False, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vraddhn_s32': ARMSema(intrin='vraddhn_s32', inst='RADDHN', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(32768), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(32)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(32)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(32)), '48'), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(32), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(16), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(31), Number(16), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='int16x4_t', ret_is_signed=True, inst_form='RADDHN Vd.4H,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': False, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vraddhn_s64': ARMSema(intrin='vraddhn_s64', inst='RADDHN', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(2147483648), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(64)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(64)), '48'), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(64), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(64), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(32), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(63), Number(32), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='int32x2_t', ret_is_signed=True, inst_form='RADDHN Vd.2S,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': False, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vraddhn_u16': ARMSema(intrin='vraddhn_u16', inst='RADDHN', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(128), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(16)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(16)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(16)), '48'), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(16), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(8), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(15), Number(8), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='RADDHN Vd.8B,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'sub_op': False, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vraddhn_u32': ARMSema(intrin='vraddhn_u32', inst='RADDHN', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(32768), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(32)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(32)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(32)), '48'), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(32), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(16), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(31), Number(16), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='RADDHN Vd.4H,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': False, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vraddhn_u64': ARMSema(intrin='vraddhn_u64', inst='RADDHN', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(2147483648), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(64)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(64)), '48'), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(64), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(64), '64')), Update(Var('sum', '70'), BinaryExpr('+', Var('element1', '71'), Var('element2', '72'), '73')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(32), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(63), Number(32), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='RADDHN Vd.2S,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': False, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vrhadd_s16': ARMSema(intrin='vrhadd_s16', inst='SRHADD', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), For(Var('e', '57'), Number(0), Number(3), [Update(Var('element1', '27'), Call('Int', [ElemSlice(Var('operand1', '30'), Var('e', '31'), Number(16), '33'), Number(0)], '35')), Update(Var('element2', '36'), Call('Int', [ElemSlice(Var('operand2', '39'), Var('e', '40'), Number(16), '42'), Number(0)], '44')), Update(ElemSlice(Var('result', '46'), Var('e', '47'), Number(16), '49'), ArrayIndex(BinaryExpr('+', BinaryExpr('+', Var('element1', '50'), Var('element2', '51'), '52'), Number(1), '53'), [SliceRange(Number(16), Number(1), '55')], '56'))], 1, '58'), Update(VReg(Var('d', '60'), '61'), Var('result', '62'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SRHADD Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_rounding'),
    'vrhadd_s32': ARMSema(intrin='vrhadd_s32', inst='SRHADD', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), For(Var('e', '57'), Number(0), Number(1), [Update(Var('element1', '27'), Call('Int', [ElemSlice(Var('operand1', '30'), Var('e', '31'), Number(32), '33'), Number(0)], '35')), Update(Var('element2', '36'), Call('Int', [ElemSlice(Var('operand2', '39'), Var('e', '40'), Number(32), '42'), Number(0)], '44')), Update(ElemSlice(Var('result', '46'), Var('e', '47'), Number(32), '49'), ArrayIndex(BinaryExpr('+', BinaryExpr('+', Var('element1', '50'), Var('element2', '51'), '52'), Number(1), '53'), [SliceRange(Number(32), Number(1), '55')], '56'))], 1, '58'), Update(VReg(Var('d', '60'), '61'), Var('result', '62'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SRHADD Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_rounding'),
    'vrhadd_s8': ARMSema(intrin='vrhadd_s8', inst='SRHADD', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), For(Var('e', '57'), Number(0), Number(7), [Update(Var('element1', '27'), Call('Int', [ElemSlice(Var('operand1', '30'), Var('e', '31'), Number(8), '33'), Number(0)], '35')), Update(Var('element2', '36'), Call('Int', [ElemSlice(Var('operand2', '39'), Var('e', '40'), Number(8), '42'), Number(0)], '44')), Update(ElemSlice(Var('result', '46'), Var('e', '47'), Number(8), '49'), ArrayIndex(BinaryExpr('+', BinaryExpr('+', Var('element1', '50'), Var('element2', '51'), '52'), Number(1), '53'), [SliceRange(Number(8), Number(1), '55')], '56'))], 1, '58'), Update(VReg(Var('d', '60'), '61'), Var('result', '62'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SRHADD Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_rounding'),
    'vrhadd_u16': ARMSema(intrin='vrhadd_u16', inst='URHADD', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), For(Var('e', '57'), Number(0), Number(3), [Update(Var('element1', '27'), Call('Int', [ElemSlice(Var('operand1', '30'), Var('e', '31'), Number(16), '33'), Number(1)], '35')), Update(Var('element2', '36'), Call('Int', [ElemSlice(Var('operand2', '39'), Var('e', '40'), Number(16), '42'), Number(1)], '44')), Update(ElemSlice(Var('result', '46'), Var('e', '47'), Number(16), '49'), ArrayIndex(BinaryExpr('+', BinaryExpr('+', Var('element1', '50'), Var('element2', '51'), '52'), Number(1), '53'), [SliceRange(Number(16), Number(1), '55')], '56'))], 1, '58'), Update(VReg(Var('d', '60'), '61'), Var('result', '62'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='URHADD Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_rounding'),
    'vrhadd_u32': ARMSema(intrin='vrhadd_u32', inst='URHADD', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), For(Var('e', '57'), Number(0), Number(1), [Update(Var('element1', '27'), Call('Int', [ElemSlice(Var('operand1', '30'), Var('e', '31'), Number(32), '33'), Number(1)], '35')), Update(Var('element2', '36'), Call('Int', [ElemSlice(Var('operand2', '39'), Var('e', '40'), Number(32), '42'), Number(1)], '44')), Update(ElemSlice(Var('result', '46'), Var('e', '47'), Number(32), '49'), ArrayIndex(BinaryExpr('+', BinaryExpr('+', Var('element1', '50'), Var('element2', '51'), '52'), Number(1), '53'), [SliceRange(Number(32), Number(1), '55')], '56'))], 1, '58'), Update(VReg(Var('d', '60'), '61'), Var('result', '62'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='URHADD Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_rounding'),
    'vrhadd_u8': ARMSema(intrin='vrhadd_u8', inst='URHADD', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), For(Var('e', '57'), Number(0), Number(7), [Update(Var('element1', '27'), Call('Int', [ElemSlice(Var('operand1', '30'), Var('e', '31'), Number(8), '33'), Number(1)], '35')), Update(Var('element2', '36'), Call('Int', [ElemSlice(Var('operand2', '39'), Var('e', '40'), Number(8), '42'), Number(1)], '44')), Update(ElemSlice(Var('result', '46'), Var('e', '47'), Number(8), '49'), ArrayIndex(BinaryExpr('+', BinaryExpr('+', Var('element1', '50'), Var('element2', '51'), '52'), Number(1), '53'), [SliceRange(Number(8), Number(1), '55')], '56'))], 1, '58'), Update(VReg(Var('d', '60'), '61'), Var('result', '62'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='URHADD Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_rounding'),
    'vrhaddq_s16': ARMSema(intrin='vrhaddq_s16', inst='SRHADD', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), For(Var('e', '57'), Number(0), Number(7), [Update(Var('element1', '27'), Call('Int', [ElemSlice(Var('operand1', '30'), Var('e', '31'), Number(16), '33'), Number(0)], '35')), Update(Var('element2', '36'), Call('Int', [ElemSlice(Var('operand2', '39'), Var('e', '40'), Number(16), '42'), Number(0)], '44')), Update(ElemSlice(Var('result', '46'), Var('e', '47'), Number(16), '49'), ArrayIndex(BinaryExpr('+', BinaryExpr('+', Var('element1', '50'), Var('element2', '51'), '52'), Number(1), '53'), [SliceRange(Number(16), Number(1), '55')], '56'))], 1, '58'), Update(VReg(Var('d', '60'), '61'), Var('result', '62'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SRHADD Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_rounding'),
    'vrhaddq_s32': ARMSema(intrin='vrhaddq_s32', inst='SRHADD', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), For(Var('e', '57'), Number(0), Number(3), [Update(Var('element1', '27'), Call('Int', [ElemSlice(Var('operand1', '30'), Var('e', '31'), Number(32), '33'), Number(0)], '35')), Update(Var('element2', '36'), Call('Int', [ElemSlice(Var('operand2', '39'), Var('e', '40'), Number(32), '42'), Number(0)], '44')), Update(ElemSlice(Var('result', '46'), Var('e', '47'), Number(32), '49'), ArrayIndex(BinaryExpr('+', BinaryExpr('+', Var('element1', '50'), Var('element2', '51'), '52'), Number(1), '53'), [SliceRange(Number(32), Number(1), '55')], '56'))], 1, '58'), Update(VReg(Var('d', '60'), '61'), Var('result', '62'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SRHADD Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_rounding'),
    'vrhaddq_s8': ARMSema(intrin='vrhaddq_s8', inst='SRHADD', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), For(Var('e', '57'), Number(0), Number(15), [Update(Var('element1', '27'), Call('Int', [ElemSlice(Var('operand1', '30'), Var('e', '31'), Number(8), '33'), Number(0)], '35')), Update(Var('element2', '36'), Call('Int', [ElemSlice(Var('operand2', '39'), Var('e', '40'), Number(8), '42'), Number(0)], '44')), Update(ElemSlice(Var('result', '46'), Var('e', '47'), Number(8), '49'), ArrayIndex(BinaryExpr('+', BinaryExpr('+', Var('element1', '50'), Var('element2', '51'), '52'), Number(1), '53'), [SliceRange(Number(8), Number(1), '55')], '56'))], 1, '58'), Update(VReg(Var('d', '60'), '61'), Var('result', '62'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SRHADD Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_rounding'),
    'vrhaddq_u16': ARMSema(intrin='vrhaddq_u16', inst='URHADD', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), For(Var('e', '57'), Number(0), Number(7), [Update(Var('element1', '27'), Call('Int', [ElemSlice(Var('operand1', '30'), Var('e', '31'), Number(16), '33'), Number(1)], '35')), Update(Var('element2', '36'), Call('Int', [ElemSlice(Var('operand2', '39'), Var('e', '40'), Number(16), '42'), Number(1)], '44')), Update(ElemSlice(Var('result', '46'), Var('e', '47'), Number(16), '49'), ArrayIndex(BinaryExpr('+', BinaryExpr('+', Var('element1', '50'), Var('element2', '51'), '52'), Number(1), '53'), [SliceRange(Number(16), Number(1), '55')], '56'))], 1, '58'), Update(VReg(Var('d', '60'), '61'), Var('result', '62'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='URHADD Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_rounding'),
    'vrhaddq_u32': ARMSema(intrin='vrhaddq_u32', inst='URHADD', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), For(Var('e', '57'), Number(0), Number(3), [Update(Var('element1', '27'), Call('Int', [ElemSlice(Var('operand1', '30'), Var('e', '31'), Number(32), '33'), Number(1)], '35')), Update(Var('element2', '36'), Call('Int', [ElemSlice(Var('operand2', '39'), Var('e', '40'), Number(32), '42'), Number(1)], '44')), Update(ElemSlice(Var('result', '46'), Var('e', '47'), Number(32), '49'), ArrayIndex(BinaryExpr('+', BinaryExpr('+', Var('element1', '50'), Var('element2', '51'), '52'), Number(1), '53'), [SliceRange(Number(32), Number(1), '55')], '56'))], 1, '58'), Update(VReg(Var('d', '60'), '61'), Var('result', '62'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='URHADD Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_rounding'),
    'vrhaddq_u8': ARMSema(intrin='vrhaddq_u8', inst='URHADD', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('element2', '22'), '23')], ('integer', Number(64)), '24'), For(Var('e', '57'), Number(0), Number(15), [Update(Var('element1', '27'), Call('Int', [ElemSlice(Var('operand1', '30'), Var('e', '31'), Number(8), '33'), Number(1)], '35')), Update(Var('element2', '36'), Call('Int', [ElemSlice(Var('operand2', '39'), Var('e', '40'), Number(8), '42'), Number(1)], '44')), Update(ElemSlice(Var('result', '46'), Var('e', '47'), Number(8), '49'), ArrayIndex(BinaryExpr('+', BinaryExpr('+', Var('element1', '50'), Var('element2', '51'), '52'), Number(1), '53'), [SliceRange(Number(8), Number(1), '55')], '56'))], 1, '58'), Update(VReg(Var('d', '60'), '61'), Var('result', '62'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='URHADD Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_halving_rounding'),
    'vrshl_s16': ARMSema(intrin='vrshl_s16', inst='SRSHL', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(32)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(32)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(3), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(32)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(16), '62'), Number(0), Number(32)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(16), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(15), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SRSHL Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False, 'rounding': True, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vrshl_s32': ARMSema(intrin='vrshl_s32', inst='SRSHL', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(1), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(64)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(32), '62'), Number(0), Number(64)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(32), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(31), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SRSHL Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False, 'rounding': True, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vrshl_s64': ARMSema(intrin='vrshl_s64', inst='SRSHL', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(0), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(64), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(63), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int64x1_t', ret_is_signed=True, inst_form='SRSHL Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'rounding': True, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vrshl_s8': ARMSema(intrin='vrshl_s8', inst='SRSHL', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(16)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(16)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(7), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(16)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(8), '62'), Number(0), Number(16)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(8), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(7), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SRSHL Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False, 'rounding': True, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vrshl_u16': ARMSema(intrin='vrshl_u16', inst='URSHL', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(32)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(32)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(3), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(32)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(16), '62'), Number(1), Number(32)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(16), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(15), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='URSHL Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True, 'rounding': True, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vrshl_u32': ARMSema(intrin='vrshl_u32', inst='URSHL', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(1), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(64)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(32), '62'), Number(1), Number(64)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(32), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(31), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='URSHL Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True, 'rounding': True, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vrshl_u64': ARMSema(intrin='vrshl_u64', inst='URSHL', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(1), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(64), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(63), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='URSHL Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'rounding': True, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vrshl_u8': ARMSema(intrin='vrshl_u8', inst='URSHL', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(16)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(16)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(7), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(16)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(8), '62'), Number(1), Number(16)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(8), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(7), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='URSHL Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True, 'rounding': True, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vrshld_s64': ARMSema(intrin='vrshld_s64', inst='SRSHL', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(0), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(64), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(63), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int64_t', ret_is_signed=True, inst_form='SRSHL Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'rounding': True, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vrshld_u64': ARMSema(intrin='vrshld_u64', inst='URSHL', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(1), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(64), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(63), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint64_t', ret_is_signed=False, inst_form='URSHL Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'rounding': True, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vrshlq_s16': ARMSema(intrin='vrshlq_s16', inst='SRSHL', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(32)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(32)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(7), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(32)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(16), '62'), Number(0), Number(32)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(16), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(15), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SRSHL Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False, 'rounding': True, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vrshlq_s32': ARMSema(intrin='vrshlq_s32', inst='SRSHL', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(3), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(64)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(32), '62'), Number(0), Number(64)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(32), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(31), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SRSHL Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False, 'rounding': True, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vrshlq_s64': ARMSema(intrin='vrshlq_s64', inst='SRSHL', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(1), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(0), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(64), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(63), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SRSHL Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': False, 'rounding': True, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vrshlq_s8': ARMSema(intrin='vrshlq_s8', inst='SRSHL', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(16)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(16)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(15), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(16)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(8), '62'), Number(0), Number(16)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(8), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(7), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SRSHL Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False, 'rounding': True, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vrshlq_u16': ARMSema(intrin='vrshlq_u16', inst='URSHL', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(32)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(32)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(7), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(32)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(16), '62'), Number(1), Number(32)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(16), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(15), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='URSHL Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True, 'rounding': True, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vrshlq_u32': ARMSema(intrin='vrshlq_u32', inst='URSHL', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(3), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(64)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(32), '62'), Number(1), Number(64)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(32), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(31), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='URSHL Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True, 'rounding': True, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vrshlq_u64': ARMSema(intrin='vrshlq_u64', inst='URSHL', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(1), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(1), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(64), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(63), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='URSHL Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': True, 'rounding': True, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vrshlq_u8': ARMSema(intrin='vrshlq_u8', inst='URSHL', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(16)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(16)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(15), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(16)], '48')), Update(Var('round_const', '50'), BinaryExpr('<<', Number(1), BinaryExpr('-', UnaryExpr('-', Var('shift', '51'), '52'), Number(1), '53'), '54')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(8), '62'), Number(1), Number(16)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(8), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(7), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='URSHL Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True, 'rounding': True, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vrshr_n_s16': ARMSema(intrin='vrshr_n_s16', inst='SRSHR', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(3), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(16), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(16), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(15), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SRSHR Vd.4H,Vn.4H,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False, 'round': True, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrshr_n_s32': ARMSema(intrin='vrshr_n_s32', inst='SRSHR', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(1), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(32), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(32), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(31), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SRSHR Vd.2S,Vn.2S,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False, 'round': True, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrshr_n_s64': ARMSema(intrin='vrshr_n_s64', inst='SRSHR', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(0), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int64x1_t', ret_is_signed=True, inst_form='SRSHR Dd,Dn,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'round': True, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_sisd'),
    'vrshr_n_s8': ARMSema(intrin='vrshr_n_s8', inst='SRSHR', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(7), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(8), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(8), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(7), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SRSHR Vd.8B,Vn.8B,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False, 'round': True, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrshr_n_u16': ARMSema(intrin='vrshr_n_u16', inst='URSHR', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(3), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(16), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(16), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(15), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='URSHR Vd.4H,Vn.4H,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True, 'round': True, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrshr_n_u32': ARMSema(intrin='vrshr_n_u32', inst='URSHR', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(1), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(32), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(32), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(31), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='URSHR Vd.2S,Vn.2S,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True, 'round': True, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrshr_n_u64': ARMSema(intrin='vrshr_n_u64', inst='URSHR', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(0), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='URSHR Dd,Dn,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'round': True, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_sisd'),
    'vrshr_n_u8': ARMSema(intrin='vrshr_n_u8', inst='URSHR', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(7), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(8), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(8), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(7), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='URSHR Vd.8B,Vn.8B,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True, 'round': True, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrshrd_n_s64': ARMSema(intrin='vrshrd_n_s64', inst='SRSHR', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(0), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int64_t', ret_is_signed=True, inst_form='SRSHR Dd,Dn,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'round': True, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_sisd'),
    'vrshrd_n_u64': ARMSema(intrin='vrshrd_n_u64', inst='URSHR', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(0), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint64_t', ret_is_signed=False, inst_form='URSHR Dd,Dn,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'round': True, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_sisd'),
    'vrshrn_high_n_s16': ARMSema(intrin='vrshrn_high_n_s16', inst='RSHRN2', params=[Parameter(name='r', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(7), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(16), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(8), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(7), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(1), '54'), Var('result', '55'))], rettype='int8x16_t', ret_is_signed=True, inst_form='RSHRN2 Vd.16B,Vn.8H,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vrshrn_high_n_s32': ARMSema(intrin='vrshrn_high_n_s32', inst='RSHRN2', params=[Parameter(name='r', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(3), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(32), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(16), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(15), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(1), '54'), Var('result', '55'))], rettype='int16x8_t', ret_is_signed=True, inst_form='RSHRN2 Vd.8H,Vn.4S,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vrshrn_high_n_s64': ARMSema(intrin='vrshrn_high_n_s64', inst='RSHRN2', params=[Parameter(name='r', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(1), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(64), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(32), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(31), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(1), '54'), Var('result', '55'))], rettype='int32x4_t', ret_is_signed=True, inst_form='RSHRN2 Vd.4S,Vn.2D,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vrshrn_high_n_u16': ARMSema(intrin='vrshrn_high_n_u16', inst='RSHRN2', params=[Parameter(name='r', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(7), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(16), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(8), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(7), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(1), '54'), Var('result', '55'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='RSHRN2 Vd.16B,Vn.8H,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vrshrn_high_n_u32': ARMSema(intrin='vrshrn_high_n_u32', inst='RSHRN2', params=[Parameter(name='r', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(3), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(32), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(16), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(15), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(1), '54'), Var('result', '55'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='RSHRN2 Vd.8H,Vn.4S,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vrshrn_high_n_u64': ARMSema(intrin='vrshrn_high_n_u64', inst='RSHRN2', params=[Parameter(name='r', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(1), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(64), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(32), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(31), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(1), '54'), Var('result', '55'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='RSHRN2 Vd.4S,Vn.2D,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vrshrn_n_s16': ARMSema(intrin='vrshrn_n_s16', inst='RSHRN', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(7), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(16), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(8), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(7), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(0), '54'), Var('result', '55'))], rettype='int8x8_t', ret_is_signed=True, inst_form='RSHRN Vd.8B,Vn.8H,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vrshrn_n_s32': ARMSema(intrin='vrshrn_n_s32', inst='RSHRN', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(3), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(32), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(16), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(15), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(0), '54'), Var('result', '55'))], rettype='int16x4_t', ret_is_signed=True, inst_form='RSHRN Vd.4H,Vn.4S,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vrshrn_n_s64': ARMSema(intrin='vrshrn_n_s64', inst='RSHRN', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(1), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(64), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(32), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(31), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(0), '54'), Var('result', '55'))], rettype='int32x2_t', ret_is_signed=True, inst_form='RSHRN Vd.2S,Vn.2D,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vrshrn_n_u16': ARMSema(intrin='vrshrn_n_u16', inst='RSHRN', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(7), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(16), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(8), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(7), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(0), '54'), Var('result', '55'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='RSHRN Vd.8B,Vn.8H,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vrshrn_n_u32': ARMSema(intrin='vrshrn_n_u32', inst='RSHRN', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(3), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(32), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(16), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(15), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(0), '54'), Var('result', '55'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='RSHRN Vd.4H,Vn.4S,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vrshrn_n_u64': ARMSema(intrin='vrshrn_n_u64', inst='RSHRN', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '13'), Number(1), '14'), '15'), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(1), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(64), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(32), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(31), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(0), '54'), Var('result', '55'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='RSHRN Vd.2S,Vn.2D,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'round': True}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vrshrq_n_s16': ARMSema(intrin='vrshrq_n_s16', inst='SRSHR', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(7), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(16), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(16), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(15), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SRSHR Vd.8H,Vn.8H,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False, 'round': True, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrshrq_n_s32': ARMSema(intrin='vrshrq_n_s32', inst='SRSHR', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(3), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(32), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(32), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(31), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SRSHR Vd.4S,Vn.4S,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False, 'round': True, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrshrq_n_s64': ARMSema(intrin='vrshrq_n_s64', inst='SRSHR', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(1), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SRSHR Vd.2D,Vn.2D,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': False, 'round': True, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrshrq_n_s8': ARMSema(intrin='vrshrq_n_s8', inst='SRSHR', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(15), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(8), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(8), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(7), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SRSHR Vd.16B,Vn.16B,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False, 'round': True, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrshrq_n_u16': ARMSema(intrin='vrshrq_n_u16', inst='URSHR', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(7), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(16), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(16), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(15), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='URSHR Vd.8H,Vn.8H,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True, 'round': True, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrshrq_n_u32': ARMSema(intrin='vrshrq_n_u32', inst='URSHR', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(3), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(32), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(32), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(31), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='URSHR Vd.4S,Vn.4S,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True, 'round': True, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrshrq_n_u64': ARMSema(intrin='vrshrq_n_u64', inst='URSHR', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(1), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='URSHR Vd.2D,Vn.2D,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': True, 'round': True, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrshrq_n_u8': ARMSema(intrin='vrshrq_n_u8', inst='URSHR', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(15), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(8), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(8), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(7), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='URSHR Vd.16B,Vn.16B,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True, 'round': True, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrsra_n_s16': ARMSema(intrin='vrsra_n_s16', inst='SRSRA', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(3), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(16), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(16), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(15), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SRSRA Vd.4H,Vn.4H,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False, 'round': True, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrsra_n_s32': ARMSema(intrin='vrsra_n_s32', inst='SRSRA', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(1), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(32), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(32), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(31), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SRSRA Vd.2S,Vn.2S,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False, 'round': True, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrsra_n_s64': ARMSema(intrin='vrsra_n_s64', inst='SRSRA', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(0), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int64x1_t', ret_is_signed=True, inst_form='SRSRA Dd,Dn,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'round': True, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_sisd'),
    'vrsra_n_s8': ARMSema(intrin='vrsra_n_s8', inst='SRSRA', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(7), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(8), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(8), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(7), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SRSRA Vd.8B,Vn.8B,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False, 'round': True, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrsra_n_u16': ARMSema(intrin='vrsra_n_u16', inst='URSRA', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(3), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(16), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(16), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(15), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='URSRA Vd.4H,Vn.4H,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True, 'round': True, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrsra_n_u32': ARMSema(intrin='vrsra_n_u32', inst='URSRA', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(1), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(32), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(32), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(31), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='URSRA Vd.2S,Vn.2S,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True, 'round': True, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrsra_n_u64': ARMSema(intrin='vrsra_n_u64', inst='URSRA', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(0), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='URSRA Dd,Dn,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'round': True, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_sisd'),
    'vrsra_n_u8': ARMSema(intrin='vrsra_n_u8', inst='URSRA', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(7), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(8), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(8), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(7), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='URSRA Vd.8B,Vn.8B,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True, 'round': True, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrsrad_n_s64': ARMSema(intrin='vrsrad_n_s64', inst='SRSRA', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(0), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int64_t', ret_is_signed=True, inst_form='SRSRA Dd,Dn,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'round': True, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_sisd'),
    'vrsrad_n_u64': ARMSema(intrin='vrsrad_n_u64', inst='URSRA', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(0), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint64_t', ret_is_signed=False, inst_form='URSRA Dd,Dn,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'round': True, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_sisd'),
    'vrsraq_n_s16': ARMSema(intrin='vrsraq_n_s16', inst='SRSRA', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(7), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(16), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(16), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(15), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SRSRA Vd.8H,Vn.8H,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False, 'round': True, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrsraq_n_s32': ARMSema(intrin='vrsraq_n_s32', inst='SRSRA', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(3), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(32), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(32), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(31), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SRSRA Vd.4S,Vn.4S,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False, 'round': True, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrsraq_n_s64': ARMSema(intrin='vrsraq_n_s64', inst='SRSRA', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(1), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SRSRA Vd.2D,Vn.2D,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': False, 'round': True, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrsraq_n_s8': ARMSema(intrin='vrsraq_n_s8', inst='SRSRA', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(15), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(8), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(8), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(7), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SRSRA Vd.16B,Vn.16B,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False, 'round': True, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrsraq_n_u16': ARMSema(intrin='vrsraq_n_u16', inst='URSRA', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(7), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(16), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(16), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(15), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='URSRA Vd.8H,Vn.8H,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True, 'round': True, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrsraq_n_u32': ARMSema(intrin='vrsraq_n_u32', inst='URSRA', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(3), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(32), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(32), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(31), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='URSRA Vd.4S,Vn.4S,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True, 'round': True, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrsraq_n_u64': ARMSema(intrin='vrsraq_n_u64', inst='URSRA', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(1), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='URSRA Vd.2D,Vn.2D,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': True, 'round': True, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrsraq_n_u8': ARMSema(intrin='vrsraq_n_u8', inst='URSRA', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), BinaryExpr('<<', Number(1), BinaryExpr('-', Var('shift', '16'), Number(1), '17'), '18'), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(15), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(8), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(8), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(7), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='URSRA Vd.16B,Vn.16B,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True, 'round': True, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vrsubhn_high_s16': ARMSema(intrin='vrsubhn_high_s16', inst='RSUBHN2', params=[Parameter(name='r', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(128), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(16)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(16)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(16)), '48'), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(16), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(8), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(15), Number(8), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='int8x16_t', ret_is_signed=True, inst_form='RSUBHN2 Vd.16B,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'sub_op': True, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vrsubhn_high_s32': ARMSema(intrin='vrsubhn_high_s32', inst='RSUBHN2', params=[Parameter(name='r', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(32768), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(32)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(32)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(32)), '48'), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(32), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(16), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(31), Number(16), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='int16x8_t', ret_is_signed=True, inst_form='RSUBHN2 Vd.8H,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': True, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vrsubhn_high_s64': ARMSema(intrin='vrsubhn_high_s64', inst='RSUBHN2', params=[Parameter(name='r', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(2147483648), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(64)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(64)), '48'), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(64), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(64), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(32), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(63), Number(32), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='int32x4_t', ret_is_signed=True, inst_form='RSUBHN2 Vd.4S,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': True, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vrsubhn_high_u16': ARMSema(intrin='vrsubhn_high_u16', inst='RSUBHN2', params=[Parameter(name='r', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(128), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(16)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(16)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(16)), '48'), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(16), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(8), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(15), Number(8), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='RSUBHN2 Vd.16B,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'sub_op': True, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vrsubhn_high_u32': ARMSema(intrin='vrsubhn_high_u32', inst='RSUBHN2', params=[Parameter(name='r', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(32768), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(32)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(32)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(32)), '48'), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(32), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(16), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(31), Number(16), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='RSUBHN2 Vd.8H,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': True, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vrsubhn_high_u64': ARMSema(intrin='vrsubhn_high_u64', inst='RSUBHN2', params=[Parameter(name='r', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(2147483648), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(64)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(64)), '48'), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(64), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(64), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(32), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(63), Number(32), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='RSUBHN2 Vd.4S,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': True, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vrsubhn_s16': ARMSema(intrin='vrsubhn_s16', inst='RSUBHN', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(128), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(16)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(16)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(16)), '48'), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(16), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(8), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(15), Number(8), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='int8x8_t', ret_is_signed=True, inst_form='RSUBHN Vd.8B,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'sub_op': True, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vrsubhn_s32': ARMSema(intrin='vrsubhn_s32', inst='RSUBHN', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(32768), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(32)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(32)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(32)), '48'), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(32), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(16), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(31), Number(16), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='int16x4_t', ret_is_signed=True, inst_form='RSUBHN Vd.4H,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': True, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vrsubhn_s64': ARMSema(intrin='vrsubhn_s64', inst='RSUBHN', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(2147483648), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(64)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(64)), '48'), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(64), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(64), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(32), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(63), Number(32), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='int32x2_t', ret_is_signed=True, inst_form='RSUBHN Vd.2S,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': True, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vrsubhn_u16': ARMSema(intrin='vrsubhn_u16', inst='RSUBHN', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(128), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(16)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(16)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(16)), '48'), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(16), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(8), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(15), Number(8), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='RSUBHN Vd.8B,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'sub_op': True, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vrsubhn_u32': ARMSema(intrin='vrsubhn_u32', inst='RSUBHN', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(32768), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(32)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(32)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(32)), '48'), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(32), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(16), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(31), Number(16), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='RSUBHN Vd.4H,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': True, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vrsubhn_u64': ARMSema(intrin='vrsubhn_u64', inst='RSUBHN', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(2147483648), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(64)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(64)), '48'), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(64), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(64), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(32), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(63), Number(32), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='RSUBHN Vd.2S,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': True, 'round': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vshl_s16': ARMSema(intrin='vshl_s16', inst='SSHL', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(32)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(32)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(3), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(32)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(16), '62'), Number(0), Number(32)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(16), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(15), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SSHL Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False, 'rounding': False, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vshl_s32': ARMSema(intrin='vshl_s32', inst='SSHL', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(1), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(64)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(32), '62'), Number(0), Number(64)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(32), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(31), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SSHL Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False, 'rounding': False, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vshl_s64': ARMSema(intrin='vshl_s64', inst='SSHL', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(0), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(64), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(63), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int64x1_t', ret_is_signed=True, inst_form='SSHL Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'rounding': False, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vshl_s8': ARMSema(intrin='vshl_s8', inst='SSHL', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(16)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(16)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(7), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(16)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(8), '62'), Number(0), Number(16)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(8), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(7), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SSHL Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False, 'rounding': False, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vshl_u16': ARMSema(intrin='vshl_u16', inst='USHL', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(32)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(32)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(3), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(32)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(16), '62'), Number(1), Number(32)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(16), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(15), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='USHL Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True, 'rounding': False, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vshl_u32': ARMSema(intrin='vshl_u32', inst='USHL', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(1), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(64)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(32), '62'), Number(1), Number(64)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(32), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(31), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='USHL Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True, 'rounding': False, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vshl_u64': ARMSema(intrin='vshl_u64', inst='USHL', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(1), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(64), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(63), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='USHL Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'rounding': False, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vshl_u8': ARMSema(intrin='vshl_u8', inst='USHL', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(16)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(16)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(7), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(16)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(8), '62'), Number(1), Number(16)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(8), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(7), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='USHL Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True, 'rounding': False, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vshld_s64': ARMSema(intrin='vshld_s64', inst='SSHL', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(0), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(64), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(63), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int64_t', ret_is_signed=True, inst_form='SSHL Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'rounding': False, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vshld_u64': ARMSema(intrin='vshld_u64', inst='USHL', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(0), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(1), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(64), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(63), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint64_t', ret_is_signed=False, inst_form='USHL Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'rounding': False, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_sisd'),
    'vshll_high_n_s16': ARMSema(intrin='vshll_high_n_s16', inst='SSHLL2', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(3), [Update(Var('element', '19'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(16), '25'), Number(0)], '27'), Var('shift', '28'), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(32), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(31), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SSHLL2 Vd.4S,Vn.8H,#n', extensions=None, imm_width=(0, 15), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'unsigned': False}, belongs_to='aarch64_vector_shift_left_long'),
    'vshll_high_n_s32': ARMSema(intrin='vshll_high_n_s32', inst='SSHLL2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(1), [Update(Var('element', '19'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(32), '25'), Number(0)], '27'), Var('shift', '28'), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(64), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(63), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SSHLL2 Vd.2D,Vn.4S,#n', extensions=None, imm_width=(0, 31), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'unsigned': False}, belongs_to='aarch64_vector_shift_left_long'),
    'vshll_high_n_s8': ARMSema(intrin='vshll_high_n_s8', inst='SSHLL2', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(7), [Update(Var('element', '19'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(8), '25'), Number(0)], '27'), Var('shift', '28'), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(16), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(15), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SSHLL2 Vd.8H,Vn.16B,#n', extensions=None, imm_width=(0, 7), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'unsigned': False}, belongs_to='aarch64_vector_shift_left_long'),
    'vshll_high_n_u16': ARMSema(intrin='vshll_high_n_u16', inst='USHLL2', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(3), [Update(Var('element', '19'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(16), '25'), Number(1)], '27'), Var('shift', '28'), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(32), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(31), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='USHLL2 Vd.4S,Vn.8H,#n', extensions=None, imm_width=(0, 15), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'unsigned': True}, belongs_to='aarch64_vector_shift_left_long'),
    'vshll_high_n_u32': ARMSema(intrin='vshll_high_n_u32', inst='USHLL2', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(1), [Update(Var('element', '19'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(32), '25'), Number(1)], '27'), Var('shift', '28'), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(64), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(63), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='USHLL2 Vd.2D,Vn.4S,#n', extensions=None, imm_width=(0, 31), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'unsigned': True}, belongs_to='aarch64_vector_shift_left_long'),
    'vshll_high_n_u8': ARMSema(intrin='vshll_high_n_u8', inst='USHLL2', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(7), [Update(Var('element', '19'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(8), '25'), Number(1)], '27'), Var('shift', '28'), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(16), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(15), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='USHLL2 Vd.8H,Vn.16B,#n', extensions=None, imm_width=(0, 7), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'unsigned': True}, belongs_to='aarch64_vector_shift_left_long'),
    'vshll_n_s16': ARMSema(intrin='vshll_n_s16', inst='SSHLL', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(3), [Update(Var('element', '19'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(16), '25'), Number(0)], '27'), Var('shift', '28'), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(32), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(31), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SSHLL Vd.4S,Vn.4H,#n', extensions=None, imm_width=(0, 15), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'unsigned': False}, belongs_to='aarch64_vector_shift_left_long'),
    'vshll_n_s32': ARMSema(intrin='vshll_n_s32', inst='SSHLL', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(1), [Update(Var('element', '19'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(32), '25'), Number(0)], '27'), Var('shift', '28'), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(64), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(63), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SSHLL Vd.2D,Vn.2S,#n', extensions=None, imm_width=(0, 31), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'unsigned': False}, belongs_to='aarch64_vector_shift_left_long'),
    'vshll_n_s8': ARMSema(intrin='vshll_n_s8', inst='SSHLL', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(7), [Update(Var('element', '19'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(8), '25'), Number(0)], '27'), Var('shift', '28'), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(16), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(15), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SSHLL Vd.8H,Vn.8B,#n', extensions=None, imm_width=(0, 7), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'unsigned': False}, belongs_to='aarch64_vector_shift_left_long'),
    'vshll_n_u16': ARMSema(intrin='vshll_n_u16', inst='USHLL', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(3), [Update(Var('element', '19'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(16), '25'), Number(1)], '27'), Var('shift', '28'), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(32), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(31), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='USHLL Vd.4S,Vn.4H,#n', extensions=None, imm_width=(0, 15), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'unsigned': True}, belongs_to='aarch64_vector_shift_left_long'),
    'vshll_n_u32': ARMSema(intrin='vshll_n_u32', inst='USHLL', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(1), [Update(Var('element', '19'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(32), '25'), Number(1)], '27'), Var('shift', '28'), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(64), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(63), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='USHLL Vd.2D,Vn.2S,#n', extensions=None, imm_width=(0, 31), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'unsigned': True}, belongs_to='aarch64_vector_shift_left_long'),
    'vshll_n_u8': ARMSema(intrin='vshll_n_u8', inst='USHLL', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclUndef(Var('result', '11'), '12')], ('bits', Number(128)), '13'), VarsDecl([VarDeclUndef(Var('element', '14'), '15')], ('integer', Number(64)), '16'), For(Var('e', '42'), Number(0), Number(7), [Update(Var('element', '19'), BinaryExpr('<<', Call('Int', [ElemSlice(Var('operand', '22'), Var('e', '23'), Number(8), '25'), Number(1)], '27'), Var('shift', '28'), '29')), Update(ElemSlice(Var('result', '31'), Var('e', '32'), Number(16), '35'), ArrayIndex(Var('element', '36'), [SliceRange(Number(15), Number(0), '40')], '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='USHLL Vd.8H,Vn.8B,#n', extensions=None, imm_width=(0, 7), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'unsigned': True}, belongs_to='aarch64_vector_shift_left_long'),
    'vshlq_s16': ARMSema(intrin='vshlq_s16', inst='SSHL', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(32)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(32)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(7), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(32)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(16), '62'), Number(0), Number(32)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(16), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(15), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SSHL Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False, 'rounding': False, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vshlq_s32': ARMSema(intrin='vshlq_s32', inst='SSHL', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(3), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(64)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(32), '62'), Number(0), Number(64)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(32), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(31), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SSHL Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False, 'rounding': False, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vshlq_s64': ARMSema(intrin='vshlq_s64', inst='SSHL', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(1), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(0), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(64), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(63), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SSHL Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': False, 'rounding': False, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vshlq_s8': ARMSema(intrin='vshlq_s8', inst='SSHL', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(16)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(16)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(15), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(16)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(8), '62'), Number(0), Number(16)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(8), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(7), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SSHL Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False, 'rounding': False, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vshlq_u16': ARMSema(intrin='vshlq_u16', inst='USHL', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(32)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(32)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(7), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(16), '45'), Number(32)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(16), '62'), Number(1), Number(32)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(16), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(15), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='USHL Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True, 'rounding': False, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vshlq_u32': ARMSema(intrin='vshlq_u32', inst='USHL', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(3), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(32), '45'), Number(64)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(32), '62'), Number(1), Number(64)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(32), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(31), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='USHL Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True, 'rounding': False, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vshlq_u64': ARMSema(intrin='vshlq_u64', inst='USHL', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(128)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(128)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(128)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(1), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(64), '45'), Number(128)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(64), '62'), Number(1), Number(128)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(64), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(63), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='USHL Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': True, 'rounding': False, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vshlq_u8': ARMSema(intrin='vshlq_u8', inst='USHL', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('bits', Number(16)), '23'), VarsDecl([VarDeclUndef(Var('shift', '26'), '27')], ('bits', Number(16)), '28'), VarsDecl([VarDeclUndef(Var('element', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('sat', '34'), '35')], ('boolean', Number(1)), '36'), For(Var('e', '93'), Number(0), Number(15), [Update(Var('shift', '39'), Call('SInt', [ElemSlice(Var('operand2', '42'), Var('e', '43'), Number(8), '45'), Number(16)], '48')), Update(Var('element', '56'), BinaryExpr('<<', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand1', '59'), Var('e', '60'), Number(8), '62'), Number(1), Number(16)], '66'), Var('round_const', '67'), '68'), Var('shift', '69'), '70')), Update(ElemSlice(Var('result', '83'), Var('e', '84'), Number(8), '86'), ArrayIndex(Var('element', '87'), [SliceRange(Number(7), Number(0), '90')], '91'))], 1, '94'), Update(VReg(Var('d', '96'), '97'), Var('result', '98'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='USHL Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True, 'rounding': False, 'saturating': False}, belongs_to='aarch64_vector_arithmetic_binary_uniform_shift_simd'),
    'vshr_n_s16': ARMSema(intrin='vshr_n_s16', inst='SSHR', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(3), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(16), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(16), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(15), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SSHR Vd.4H,Vn.4H,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False, 'round': False, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vshr_n_s32': ARMSema(intrin='vshr_n_s32', inst='SSHR', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(1), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(32), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(32), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(31), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SSHR Vd.2S,Vn.2S,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False, 'round': False, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vshr_n_s64': ARMSema(intrin='vshr_n_s64', inst='SSHR', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(0), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int64x1_t', ret_is_signed=True, inst_form='SSHR Dd,Dn,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'round': False, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_sisd'),
    'vshr_n_s8': ARMSema(intrin='vshr_n_s8', inst='SSHR', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(7), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(8), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(8), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(7), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SSHR Vd.8B,Vn.8B,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False, 'round': False, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vshr_n_u16': ARMSema(intrin='vshr_n_u16', inst='USHR', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(3), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(16), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(16), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(15), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='USHR Vd.4H,Vn.4H,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True, 'round': False, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vshr_n_u32': ARMSema(intrin='vshr_n_u32', inst='USHR', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(1), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(32), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(32), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(31), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='USHR Vd.2S,Vn.2S,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True, 'round': False, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vshr_n_u64': ARMSema(intrin='vshr_n_u64', inst='USHR', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(0), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='USHR Dd,Dn,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'round': False, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_sisd'),
    'vshr_n_u8': ARMSema(intrin='vshr_n_u8', inst='USHR', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(7), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(8), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(8), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(7), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='USHR Vd.8B,Vn.8B,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True, 'round': False, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vshrd_n_s64': ARMSema(intrin='vshrd_n_s64', inst='SSHR', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(0), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int64_t', ret_is_signed=True, inst_form='SSHR Dd,Dn,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'round': False, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_sisd'),
    'vshrd_n_u64': ARMSema(intrin='vshrd_n_u64', inst='USHR', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(0), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint64_t', ret_is_signed=False, inst_form='USHR Dd,Dn,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'round': False, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_sisd'),
    'vshrn_high_n_s16': ARMSema(intrin='vshrn_high_n_s16', inst='SHRN2', params=[Parameter(name='r', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(7), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(16), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(8), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(7), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(1), '54'), Var('result', '55'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SHRN2 Vd.16B,Vn.8H,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vshrn_high_n_s32': ARMSema(intrin='vshrn_high_n_s32', inst='SHRN2', params=[Parameter(name='r', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(3), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(32), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(16), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(15), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(1), '54'), Var('result', '55'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SHRN2 Vd.8H,Vn.4S,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vshrn_high_n_s64': ARMSema(intrin='vshrn_high_n_s64', inst='SHRN2', params=[Parameter(name='r', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(1), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(64), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(32), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(31), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(1), '54'), Var('result', '55'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SHRN2 Vd.4S,Vn.2D,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vshrn_high_n_u16': ARMSema(intrin='vshrn_high_n_u16', inst='SHRN2', params=[Parameter(name='r', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(7), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(16), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(8), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(7), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(1), '54'), Var('result', '55'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='SHRN2 Vd.16B,Vn.8H,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vshrn_high_n_u32': ARMSema(intrin='vshrn_high_n_u32', inst='SHRN2', params=[Parameter(name='r', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(3), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(32), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(16), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(15), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(1), '54'), Var('result', '55'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='SHRN2 Vd.8H,Vn.4S,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vshrn_high_n_u64': ARMSema(intrin='vshrn_high_n_u64', inst='SHRN2', params=[Parameter(name='r', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(1), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(64), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(32), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(31), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(1), '54'), Var('result', '55'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='SHRN2 Vd.4S,Vn.2D,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vshrn_n_s16': ARMSema(intrin='vshrn_n_s16', inst='SHRN', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(7), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(16), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(8), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(7), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(0), '54'), Var('result', '55'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SHRN Vd.8B,Vn.8H,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vshrn_n_s32': ARMSema(intrin='vshrn_n_s32', inst='SHRN', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(3), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(32), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(16), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(15), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(0), '54'), Var('result', '55'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SHRN Vd.4H,Vn.4S,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vshrn_n_s64': ARMSema(intrin='vshrn_n_s64', inst='SHRN', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(1), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(64), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(32), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(31), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(0), '54'), Var('result', '55'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SHRN Vd.2S,Vn.2D,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vshrn_n_u16': ARMSema(intrin='vshrn_n_u16', inst='SHRN', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(7), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(16), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(8), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(7), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(0), '54'), Var('result', '55'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='SHRN Vd.8B,Vn.8H,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vshrn_n_u32': ARMSema(intrin='vshrn_n_u32', inst='SHRN', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(3), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(32), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(16), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(15), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(0), '54'), Var('result', '55'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='SHRN Vd.4H,Vn.4S,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vshrn_n_u64': ARMSema(intrin='vshrn_n_u64', inst='SHRN', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclUndef(Var('result', '10'), '11')], ('bits', Number(64)), '12'), VarsDecl([VarDeclInit(Var('round_const', '18'), Number(0), '19')], ('integer', Number(64)), '20'), VarsDecl([VarDeclUndef(Var('element', '21'), '22')], ('integer', Number(64)), '23'), For(Var('e', '49'), Number(0), Number(1), [Update(Var('element', '26'), BinaryExpr('>>', BinaryExpr('+', Call('UInt', [ElemSlice(Var('operand', '29'), Var('e', '30'), Number(64), '33')], '34'), Var('round_const', '35'), '36'), Var('shift', '37'), '38')), Update(ElemSlice(Var('result', '40'), Var('e', '41'), Number(32), '43'), ArrayIndex(Var('element', '44'), [SliceRange(Number(31), Number(0), '47')], '48'))], 1, '50'), Update(VPartReg(Var('d', '52'), Number(0), '54'), Var('result', '55'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='SHRN Vd.2S,Vn.2D,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'round': False}, belongs_to='aarch64_vector_shift_right_narrow_logical'),
    'vshrq_n_s16': ARMSema(intrin='vshrq_n_s16', inst='SSHR', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(7), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(16), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(16), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(15), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SSHR Vd.8H,Vn.8H,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False, 'round': False, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vshrq_n_s32': ARMSema(intrin='vshrq_n_s32', inst='SSHR', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(3), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(32), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(32), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(31), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SSHR Vd.4S,Vn.4S,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False, 'round': False, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vshrq_n_s64': ARMSema(intrin='vshrq_n_s64', inst='SSHR', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(1), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SSHR Vd.2D,Vn.2D,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': False, 'round': False, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vshrq_n_s8': ARMSema(intrin='vshrq_n_s8', inst='SSHR', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(15), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(8), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(8), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(7), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SSHR Vd.16B,Vn.16B,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False, 'round': False, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vshrq_n_u16': ARMSema(intrin='vshrq_n_u16', inst='USHR', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(7), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(16), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(16), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(15), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='USHR Vd.8H,Vn.8H,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True, 'round': False, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vshrq_n_u32': ARMSema(intrin='vshrq_n_u32', inst='USHR', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(3), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(32), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(32), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(31), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='USHR Vd.4S,Vn.4S,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True, 'round': False, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vshrq_n_u64': ARMSema(intrin='vshrq_n_u64', inst='USHR', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(1), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='USHR Vd.2D,Vn.2D,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': True, 'round': False, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vshrq_n_u8': ARMSema(intrin='vshrq_n_u8', inst='USHR', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), Call('Zeros', [], '33')), For(Var('e', '66'), Number(0), Number(15), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(8), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(8), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(7), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='USHR Vd.16B,Vn.16B,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True, 'round': False, 'accumulate': False}, belongs_to='aarch64_vector_shift_right_simd'),
    'vsqadd_u16': ARMSema(intrin='vsqadd_u16', inst='USQADD', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(16), '46'), Number(1)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(16), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(16), Number(1)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='USQADD Vd.4H,Vn.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_simd'),
    'vsqadd_u32': ARMSema(intrin='vsqadd_u32', inst='USQADD', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(1), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(32), '46'), Number(1)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(32), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(32), Number(1)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='USQADD Vd.2S,Vn.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_simd'),
    'vsqadd_u64': ARMSema(intrin='vsqadd_u64', inst='USQADD', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(64), '36'), Number(0)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(64), '46'), Number(1)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(64), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(64), Number(1)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='USQADD Dd,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_sisd'),
    'vsqadd_u8': ARMSema(intrin='vsqadd_u8', inst='USQADD', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(8), '46'), Number(1)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(8), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(8), Number(1)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='USQADD Vd.8B,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_simd'),
    'vsqaddb_u8': ARMSema(intrin='vsqaddb_u8', inst='USQADD', params=[Parameter(name='a', type='uint8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(8)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(8)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(8), '46'), Number(1)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(8), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(8), Number(1)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint8_t', ret_is_signed=False, inst_form='USQADD Bd,Bn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_sisd'),
    'vsqaddd_u64': ARMSema(intrin='vsqaddd_u64', inst='USQADD', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(64), '36'), Number(0)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(64), '46'), Number(1)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(64), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(64), Number(1)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64_t', ret_is_signed=False, inst_form='USQADD Dd,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_sisd'),
    'vsqaddh_u16': ARMSema(intrin='vsqaddh_u16', inst='USQADD', params=[Parameter(name='a', type='uint16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(16)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(16)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(16), '46'), Number(1)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(16), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(16), Number(1)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16_t', ret_is_signed=False, inst_form='USQADD Hd,Hn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_sisd'),
    'vsqaddq_u16': ARMSema(intrin='vsqaddq_u16', inst='USQADD', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(16), '36'), Number(0)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(16), '46'), Number(1)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(16), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(16), Number(1)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='USQADD Vd.8H,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_simd'),
    'vsqaddq_u32': ARMSema(intrin='vsqaddq_u32', inst='USQADD', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(32), '46'), Number(1)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(32), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(32), Number(1)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='USQADD Vd.4S,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_simd'),
    'vsqaddq_u64': ARMSema(intrin='vsqaddq_u64', inst='USQADD', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(1), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(64), '36'), Number(0)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(64), '46'), Number(1)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(64), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(64), Number(1)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='USQADD Vd.2D,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_simd'),
    'vsqaddq_u8': ARMSema(intrin='vsqaddq_u8', inst='USQADD', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(15), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(8), '36'), Number(0)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(8), '46'), Number(1)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(8), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(8), Number(1)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='USQADD Vd.16B,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_simd'),
    'vsqadds_u32': ARMSema(intrin='vsqadds_u32', inst='USQADD', params=[Parameter(name='a', type='uint32_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='int32_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(32)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(32)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(32), '36'), Number(0)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(32), '46'), Number(1)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(32), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(32), Number(1)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='uint32_t', ret_is_signed=False, inst_form='USQADD Sd,Sn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_sisd'),
    'vsra_n_s16': ARMSema(intrin='vsra_n_s16', inst='SSRA', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(3), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(16), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(16), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(15), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SSRA Vd.4H,Vn.4H,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False, 'round': False, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vsra_n_s32': ARMSema(intrin='vsra_n_s32', inst='SSRA', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(1), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(32), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(32), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(31), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SSRA Vd.2S,Vn.2S,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False, 'round': False, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vsra_n_s64': ARMSema(intrin='vsra_n_s64', inst='SSRA', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(0), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int64x1_t', ret_is_signed=True, inst_form='SSRA Dd,Dn,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'round': False, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_sisd'),
    'vsra_n_s8': ARMSema(intrin='vsra_n_s8', inst='SSRA', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(7), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(8), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(8), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(7), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SSRA Vd.8B,Vn.8B,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False, 'round': False, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vsra_n_u16': ARMSema(intrin='vsra_n_u16', inst='USRA', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(3), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(16), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(16), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(15), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='USRA Vd.4H,Vn.4H,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': True, 'round': False, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vsra_n_u32': ARMSema(intrin='vsra_n_u32', inst='USRA', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(1), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(32), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(32), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(31), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='USRA Vd.2S,Vn.2S,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': True, 'round': False, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vsra_n_u64': ARMSema(intrin='vsra_n_u64', inst='USRA', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(0), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='USRA Dd,Dn,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'round': False, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_sisd'),
    'vsra_n_u8': ARMSema(intrin='vsra_n_u8', inst='USRA', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(7), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(8), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(8), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(7), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='USRA Vd.8B,Vn.8B,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': True, 'round': False, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vsrad_n_s64': ARMSema(intrin='vsrad_n_s64', inst='SSRA', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(0), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int64_t', ret_is_signed=True, inst_form='SSRA Dd,Dn,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False, 'round': False, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_sisd'),
    'vsrad_n_u64': ARMSema(intrin='vsrad_n_u64', inst='USRA', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(64)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(0), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint64_t', ret_is_signed=False, inst_form='USRA Dd,Dn,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': True, 'round': False, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_sisd'),
    'vsraq_n_s16': ARMSema(intrin='vsraq_n_s16', inst='SSRA', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(7), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(16), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(16), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(15), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SSRA Vd.8H,Vn.8H,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False, 'round': False, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vsraq_n_s32': ARMSema(intrin='vsraq_n_s32', inst='SSRA', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(3), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(32), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(32), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(31), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SSRA Vd.4S,Vn.4S,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False, 'round': False, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vsraq_n_s64': ARMSema(intrin='vsraq_n_s64', inst='SSRA', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(1), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SSRA Vd.2D,Vn.2D,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': False, 'round': False, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vsraq_n_s8': ARMSema(intrin='vsraq_n_s8', inst='SSRA', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(15), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(8), '43'), Number(0)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(8), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(7), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SSRA Vd.16B,Vn.16B,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False, 'round': False, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vsraq_n_u16': ARMSema(intrin='vsraq_n_u16', inst='USRA', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(7), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(16), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(16), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(16), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(15), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='USRA Vd.8H,Vn.8H,#n', extensions=None, imm_width=(1, 16), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': True, 'round': False, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vsraq_n_u32': ARMSema(intrin='vsraq_n_u32', inst='USRA', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(3), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(32), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(32), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(32), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(31), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='USRA Vd.4S,Vn.4S,#n', extensions=None, imm_width=(1, 32), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': True, 'round': False, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vsraq_n_u64': ARMSema(intrin='vsraq_n_u64', inst='USRA', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(1), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(64), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(64), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(64), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(63), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='USRA Vd.2D,Vn.2D,#n', extensions=None, imm_width=(1, 64), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': True, 'round': False, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vsraq_n_u8': ARMSema(intrin='vsraq_n_u8', inst='USRA', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='n', type='const int', is_signed=False, is_imm=True, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('operand2', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclUndef(Var('result', '13'), '14')], ('bits', Number(128)), '15'), VarsDecl([VarDeclInit(Var('round_const', '21'), Number(0), '22')], ('integer', Number(64)), '23'), VarsDecl([VarDeclUndef(Var('element', '24'), '25')], ('integer', Number(64)), '26'), Update(Var('operand2', '27'), VReg(Var('d', '29'), '30')), For(Var('e', '66'), Number(0), Number(15), [Update(Var('element', '37'), BinaryExpr('>>', BinaryExpr('+', Call('Int', [ElemSlice(Var('operand', '40'), Var('e', '41'), Number(8), '43'), Number(1)], '45'), Var('round_const', '46'), '47'), Var('shift', '48'), '49')), Update(ElemSlice(Var('result', '51'), Var('e', '52'), Number(8), '54'), BinaryExpr('+', ElemSlice(Var('operand2', '56'), Var('e', '57'), Number(8), '59'), ArrayIndex(Var('element', '60'), [SliceRange(Number(7), Number(0), '63')], '64'), '65'))], 1, '67'), Update(VReg(Var('d', '69'), '70'), Var('result', '71'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='USRA Vd.16B,Vn.16B,#n', extensions=None, imm_width=(1, 8), xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b', 'shift': 'n'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': True, 'round': False, 'accumulate': True}, belongs_to='aarch64_vector_shift_right_simd'),
    'vst1_s16': ARMSema(intrin='vst1_s16', inst='ST1', params=[Parameter(name='ptr', type='int16_t *', is_signed=True, is_imm=False, is_mask=False), Parameter(name='val', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(64)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(2), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(3), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(1), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(16), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(16), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='void', ret_is_signed=True, inst_form='ST1 {Vt.4H},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'n': 'ptr', 't': 'val'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 1, 'datasize': 64, 'esize': 16, 'elements': 4, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vst1_s32': ARMSema(intrin='vst1_s32', inst='ST1', params=[Parameter(name='ptr', type='int32_t *', is_signed=True, is_imm=False, is_mask=False), Parameter(name='val', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(64)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(4), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(1), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(1), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(32), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(32), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='void', ret_is_signed=True, inst_form='ST1 {Vt.2S},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'n': 'ptr', 't': 'val'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 1, 'datasize': 64, 'esize': 32, 'elements': 2, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vst1_s64': ARMSema(intrin='vst1_s64', inst='ST1', params=[Parameter(name='ptr', type='int64_t *', is_signed=True, is_imm=False, is_mask=False), Parameter(name='val', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(64)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(8), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(0), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(1), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(64), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(64), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='void', ret_is_signed=True, inst_form='ST1 {Vt.1D},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'n': 'ptr', 't': 'val'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 1, 'datasize': 64, 'esize': 64, 'elements': 1, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vst1_s8': ARMSema(intrin='vst1_s8', inst='ST1', params=[Parameter(name='ptr', type='int8_t *', is_signed=True, is_imm=False, is_mask=False), Parameter(name='val', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(64)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(1), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(7), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(1), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(8), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(8), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='void', ret_is_signed=True, inst_form='ST1 {Vt.8B},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'n': 'ptr', 't': 'val'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 1, 'datasize': 64, 'esize': 8, 'elements': 8, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vst1_u16': ARMSema(intrin='vst1_u16', inst='ST1', params=[Parameter(name='ptr', type='uint16_t *', is_signed=False, is_imm=False, is_mask=False), Parameter(name='val', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(64)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(2), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(3), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(1), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(16), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(16), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='void', ret_is_signed=True, inst_form='ST1 {Vt.4H},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'n': 'ptr', 't': 'val'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 1, 'datasize': 64, 'esize': 16, 'elements': 4, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vst1_u32': ARMSema(intrin='vst1_u32', inst='ST1', params=[Parameter(name='ptr', type='uint32_t *', is_signed=False, is_imm=False, is_mask=False), Parameter(name='val', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(64)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(4), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(1), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(1), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(32), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(32), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='void', ret_is_signed=True, inst_form='ST1 {Vt.2S},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'n': 'ptr', 't': 'val'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 1, 'datasize': 64, 'esize': 32, 'elements': 2, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vst1_u64': ARMSema(intrin='vst1_u64', inst='ST1', params=[Parameter(name='ptr', type='uint64_t *', is_signed=False, is_imm=False, is_mask=False), Parameter(name='val', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(64)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(8), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(0), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(1), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(64), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(64), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='void', ret_is_signed=True, inst_form='ST1 {Vt.1D},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'n': 'ptr', 't': 'val'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 1, 'datasize': 64, 'esize': 64, 'elements': 1, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vst1_u8': ARMSema(intrin='vst1_u8', inst='ST1', params=[Parameter(name='ptr', type='uint8_t *', is_signed=False, is_imm=False, is_mask=False), Parameter(name='val', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(64)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(1), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(7), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(1), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(8), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(8), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='void', ret_is_signed=True, inst_form='ST1 {Vt.8B},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'n': 'ptr', 't': 'val'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 1, 'datasize': 64, 'esize': 8, 'elements': 8, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vst1q_s16': ARMSema(intrin='vst1q_s16', inst='ST1', params=[Parameter(name='ptr', type='int16_t *', is_signed=True, is_imm=False, is_mask=False), Parameter(name='val', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(128)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(2), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(7), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(1), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(16), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(16), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='void', ret_is_signed=True, inst_form='ST1 {Vt.8H},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'n': 'ptr', 't': 'val'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 1, 'datasize': 128, 'esize': 16, 'elements': 8, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vst1q_s32': ARMSema(intrin='vst1q_s32', inst='ST1', params=[Parameter(name='ptr', type='int32_t *', is_signed=True, is_imm=False, is_mask=False), Parameter(name='val', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(128)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(4), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(3), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(1), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(32), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(32), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='void', ret_is_signed=True, inst_form='ST1 {Vt.4S},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'n': 'ptr', 't': 'val'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 1, 'datasize': 128, 'esize': 32, 'elements': 4, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vst1q_s64': ARMSema(intrin='vst1q_s64', inst='ST1', params=[Parameter(name='ptr', type='int64_t *', is_signed=True, is_imm=False, is_mask=False), Parameter(name='val', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(128)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(8), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(1), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(1), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(64), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(64), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='void', ret_is_signed=True, inst_form='ST1 {Vt.2D},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'n': 'ptr', 't': 'val'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 1, 'datasize': 128, 'esize': 64, 'elements': 2, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vst1q_s8': ARMSema(intrin='vst1q_s8', inst='ST1', params=[Parameter(name='ptr', type='int8_t *', is_signed=True, is_imm=False, is_mask=False), Parameter(name='val', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(128)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(1), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(15), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(1), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(8), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(8), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='void', ret_is_signed=True, inst_form='ST1 {Vt.16B},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'n': 'ptr', 't': 'val'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 1, 'datasize': 128, 'esize': 8, 'elements': 16, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vst1q_u16': ARMSema(intrin='vst1q_u16', inst='ST1', params=[Parameter(name='ptr', type='uint16_t *', is_signed=False, is_imm=False, is_mask=False), Parameter(name='val', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(128)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(2), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(7), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(1), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(16), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(16), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='void', ret_is_signed=True, inst_form='ST1 {Vt.8H},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'n': 'ptr', 't': 'val'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 1, 'datasize': 128, 'esize': 16, 'elements': 8, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vst1q_u32': ARMSema(intrin='vst1q_u32', inst='ST1', params=[Parameter(name='ptr', type='uint32_t *', is_signed=False, is_imm=False, is_mask=False), Parameter(name='val', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(128)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(4), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(3), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(1), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(32), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(32), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='void', ret_is_signed=True, inst_form='ST1 {Vt.4S},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'n': 'ptr', 't': 'val'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 1, 'datasize': 128, 'esize': 32, 'elements': 4, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vst1q_u64': ARMSema(intrin='vst1q_u64', inst='ST1', params=[Parameter(name='ptr', type='uint64_t *', is_signed=False, is_imm=False, is_mask=False), Parameter(name='val', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(128)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(8), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(1), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(1), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(64), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(64), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='void', ret_is_signed=True, inst_form='ST1 {Vt.2D},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'n': 'ptr', 't': 'val'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 1, 'datasize': 128, 'esize': 64, 'elements': 2, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vst1q_u8': ARMSema(intrin='vst1q_u8', inst='ST1', params=[Parameter(name='ptr', type='uint8_t *', is_signed=False, is_imm=False, is_mask=False), Parameter(name='val', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclUndef(Var('address', '1'), '2')], ('bits', Number(64)), '3'), VarsDecl([VarDeclUndef(Var('offs', '4'), '5')], ('bits', Number(64)), '6'), VarsDecl([VarDeclUndef(Var('rval', '8'), '9')], ('bits', Number(128)), '10'), VarsDecl([VarDeclUndef(Var('tt', '11'), '12')], ('integer', Number(64)), '13'), VarsDecl([VarDeclInit(Var('ebytes', '16'), Number(1), '17')], ('integer', Number(64)), '18'), IfStmt(Call('HaveMTEExt', [], '20'), [], '21'), IfElseStmt(BinaryExpr('==', Var('n', '22'), Number(31), '23'), [Update(Var('address', '24'), ArrayIndex(Var('SP', '25'), [], '26'))], [Update(Var('address', '27'), VReg(Var('n', '29'), '30'))], '31'), Update(Var('offs', '32'), Call('Zeros', [], '34')), For(Var('r', '94'), Number(0), Number(0), [For(Var('e', '92'), Number(0), Number(15), [Update(Var('tt', '39'), BinaryExpr('MOD', BinaryExpr('+', Var('t', '40'), Var('r', '41'), '42'), Number(32), '43')), For(Var('s', '90'), Number(0), Number(0), [Update(Var('rval', '46'), VReg(Var('tt', '48'), '49')), IfElseStmt(BinaryExpr('==', Number(1), Var('MemOp_LOAD', '51'), '52'), [Update(ElemSlice(Var('rval', '54'), Var('e', '55'), Number(8), '57'), ArrayIndex(Var('Mem', '58'), [BinaryExpr('+', Var('address', '59'), Var('offs', '60'), '61'), Var('ebytes', '62'), Var('AccType_VEC', '63')], '64')), Update(VReg(Var('tt', '66'), '67'), Var('rval', '68'))], [Update(ArrayIndex(Var('Mem', '69'), [BinaryExpr('+', Var('address', '70'), Var('offs', '71'), '72'), Var('ebytes', '73'), Var('AccType_VEC', '74')], '75'), ElemSlice(Var('rval', '77'), Var('e', '78'), Number(8), '80'))], '81'), Update(Var('offs', '82'), BinaryExpr('+', Var('offs', '83'), Var('ebytes', '84'), '85')), Update(Var('tt', '86'), BinaryExpr('MOD', BinaryExpr('+', Var('tt', '87'), Number(1), '88'), Number(32), '89'))], 1, '91')], 1, '93')], 1, '95')], rettype='void', ret_is_signed=True, inst_form='ST1 {Vt.16B},[Xn]', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'n': 'ptr', 't': 'val'}, resolving={'m': 0, 'wback': False, 'tag_checked': True, 'memop': 1, 'datasize': 128, 'esize': 8, 'elements': 16, 'rpt': 1, 'selem': 1}, belongs_to='aarch64_memory_vector_multiple_no_wb'),
    'vsub_s16': ARMSema(intrin='vsub_s16', inst='SUB', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(16)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(16)), '26'), For(Var('e', '59'), Number(0), Number(3), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(16), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(16), '40')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(16), '46'), BinaryExpr('-', Var('element1', '47'), Var('element2', '48'), '49'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SUB Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vsub_s32': ARMSema(intrin='vsub_s32', inst='SUB', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(32)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(32)), '26'), For(Var('e', '59'), Number(0), Number(1), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(32), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(32), '40')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(32), '46'), BinaryExpr('-', Var('element1', '47'), Var('element2', '48'), '49'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SUB Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vsub_s64': ARMSema(intrin='vsub_s64', inst='SUB', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), For(Var('e', '59'), Number(0), Number(0), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(64), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(64), '40')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(64), '46'), BinaryExpr('-', Var('element1', '47'), Var('element2', '48'), '49'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='int64x1_t', ret_is_signed=True, inst_form='SUB Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_sisd'),
    'vsub_s8': ARMSema(intrin='vsub_s8', inst='SUB', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(8)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(8)), '26'), For(Var('e', '59'), Number(0), Number(7), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(8), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(8), '40')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(8), '46'), BinaryExpr('-', Var('element1', '47'), Var('element2', '48'), '49'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SUB Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vsub_u16': ARMSema(intrin='vsub_u16', inst='SUB', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(16)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(16)), '26'), For(Var('e', '59'), Number(0), Number(3), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(16), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(16), '40')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(16), '46'), BinaryExpr('-', Var('element1', '47'), Var('element2', '48'), '49'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='SUB Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vsub_u32': ARMSema(intrin='vsub_u32', inst='SUB', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(32)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(32)), '26'), For(Var('e', '59'), Number(0), Number(1), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(32), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(32), '40')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(32), '46'), BinaryExpr('-', Var('element1', '47'), Var('element2', '48'), '49'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='SUB Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vsub_u64': ARMSema(intrin='vsub_u64', inst='SUB', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), For(Var('e', '59'), Number(0), Number(0), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(64), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(64), '40')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(64), '46'), BinaryExpr('-', Var('element1', '47'), Var('element2', '48'), '49'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='SUB Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_sisd'),
    'vsub_u8': ARMSema(intrin='vsub_u8', inst='SUB', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(8)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(8)), '26'), For(Var('e', '59'), Number(0), Number(7), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(8), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(8), '40')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(8), '46'), BinaryExpr('-', Var('element1', '47'), Var('element2', '48'), '49'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='SUB Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vsubd_s64': ARMSema(intrin='vsubd_s64', inst='SUB', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), For(Var('e', '59'), Number(0), Number(0), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(64), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(64), '40')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(64), '46'), BinaryExpr('-', Var('element1', '47'), Var('element2', '48'), '49'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='int64_t', ret_is_signed=True, inst_form='SUB Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_sisd'),
    'vsubd_u64': ARMSema(intrin='vsubd_u64', inst='SUB', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), For(Var('e', '59'), Number(0), Number(0), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(64), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(64), '40')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(64), '46'), BinaryExpr('-', Var('element1', '47'), Var('element2', '48'), '49'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='uint64_t', ret_is_signed=False, inst_form='SUB Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_sisd'),
    'vsubhn_high_s16': ARMSema(intrin='vsubhn_high_s16', inst='SUBHN2', params=[Parameter(name='r', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(16)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(16)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(16)), '48'), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(16), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(8), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(15), Number(8), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SUBHN2 Vd.16B,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'sub_op': True, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vsubhn_high_s32': ARMSema(intrin='vsubhn_high_s32', inst='SUBHN2', params=[Parameter(name='r', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(32)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(32)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(32)), '48'), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(32), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(16), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(31), Number(16), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SUBHN2 Vd.8H,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': True, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vsubhn_high_s64': ARMSema(intrin='vsubhn_high_s64', inst='SUBHN2', params=[Parameter(name='r', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(64)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(64)), '48'), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(64), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(64), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(32), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(63), Number(32), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SUBHN2 Vd.4S,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': True, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vsubhn_high_u16': ARMSema(intrin='vsubhn_high_u16', inst='SUBHN2', params=[Parameter(name='r', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(16)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(16)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(16)), '48'), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(16), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(8), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(15), Number(8), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='SUBHN2 Vd.16B,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'sub_op': True, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vsubhn_high_u32': ARMSema(intrin='vsubhn_high_u32', inst='SUBHN2', params=[Parameter(name='r', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(32)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(32)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(32)), '48'), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(32), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(16), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(31), Number(16), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='SUBHN2 Vd.8H,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': True, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vsubhn_high_u64': ARMSema(intrin='vsubhn_high_u64', inst='SUBHN2', params=[Parameter(name='r', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(64)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(64)), '48'), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(64), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(64), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(32), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(63), Number(32), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(1), '96'), Var('result', '97'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='SUBHN2 Vd.4S,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'r', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': True, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vsubhn_s16': ARMSema(intrin='vsubhn_s16', inst='SUBHN', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(16)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(16)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(16)), '48'), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(16), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(8), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(15), Number(8), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SUBHN Vd.8B,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'sub_op': True, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vsubhn_s32': ARMSema(intrin='vsubhn_s32', inst='SUBHN', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(32)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(32)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(32)), '48'), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(32), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(16), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(31), Number(16), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SUBHN Vd.4H,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': True, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vsubhn_s64': ARMSema(intrin='vsubhn_s64', inst='SUBHN', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(64)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(64)), '48'), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(64), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(64), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(32), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(63), Number(32), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SUBHN Vd.2S,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': True, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vsubhn_u16': ARMSema(intrin='vsubhn_u16', inst='SUBHN', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(16)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(16)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(16)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(16)), '48'), For(Var('e', '91'), Number(0), Number(7), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(16), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(16), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(8), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(15), Number(8), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='SUBHN Vd.8B,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'sub_op': True, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vsubhn_u32': ARMSema(intrin='vsubhn_u32', inst='SUBHN', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(32)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(32)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(32)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(32)), '48'), For(Var('e', '91'), Number(0), Number(3), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(32), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(32), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(16), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(31), Number(16), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='SUBHN Vd.4H,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': True, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vsubhn_u64': ARMSema(intrin='vsubhn_u64', inst='SUBHN', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VReg(Var('m', '12'), '13'), '15')], ('bits', Number(128)), '16'), VarsDecl([VarDeclUndef(Var('result', '18'), '19')], ('bits', Number(64)), '20'), VarsDecl([VarDeclInit(Var('round_const', '26'), Number(0), '27')], ('integer', Number(64)), '28'), VarsDecl([VarDeclUndef(Var('element1', '31'), '32')], ('bits', Number(64)), '33'), VarsDecl([VarDeclUndef(Var('element2', '36'), '37')], ('bits', Number(64)), '38'), VarsDecl([VarDeclUndef(Var('sum', '41'), '42')], ('bits', Number(64)), '43'), VarsDecl([VarDeclUndef(Var('sum2', '46'), '47')], ('bits', Number(64)), '48'), For(Var('e', '91'), Number(0), Number(1), [Update(Var('element1', '51'), ElemSlice(Var('operand1', '53'), Var('e', '54'), Number(64), '57')), Update(Var('element2', '58'), ElemSlice(Var('operand2', '60'), Var('e', '61'), Number(64), '64')), Update(Var('sum', '66'), BinaryExpr('-', Var('element1', '67'), Var('element2', '68'), '69')), Update(Var('sum2', '75'), BinaryExpr('+', Var('sum', '76'), Var('round_const', '77'), '78')), Update(ElemSlice(Var('result', '80'), Var('e', '81'), Number(32), '83'), ArrayIndex(Var('sum2', '84'), [SliceRange(Number(63), Number(32), '89')], '90'))], 1, '92'), Update(VPartReg(Var('d', '94'), Number(0), '96'), Var('result', '97'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='SUBHN Vd.2S,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': True, 'round': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_narrow'),
    'vsubl_high_s16': ARMSema(intrin='vsubl_high_s16', inst='SSUBL2', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(16), '48'), Number(0)], '50')), Update(Var('sum', '52'), BinaryExpr('-', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(32), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(31), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SSUBL2 Vd.4S,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vsubl_high_s32': ARMSema(intrin='vsubl_high_s32', inst='SSUBL2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(32), '48'), Number(0)], '50')), Update(Var('sum', '52'), BinaryExpr('-', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(64), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(63), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SSUBL2 Vd.2D,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vsubl_high_s8': ARMSema(intrin='vsubl_high_s8', inst='SSUBL2', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(8), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(8), '48'), Number(0)], '50')), Update(Var('sum', '52'), BinaryExpr('-', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(16), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(15), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SSUBL2 Vd.8H,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'sub_op': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vsubl_high_u16': ARMSema(intrin='vsubl_high_u16', inst='USUBL2', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(16), '48'), Number(1)], '50')), Update(Var('sum', '52'), BinaryExpr('-', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(32), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(31), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='USUBL2 Vd.4S,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vsubl_high_u32': ARMSema(intrin='vsubl_high_u32', inst='USUBL2', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(32), '48'), Number(1)], '50')), Update(Var('sum', '52'), BinaryExpr('-', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(64), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(63), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='USUBL2 Vd.2D,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vsubl_high_u8': ARMSema(intrin='vsubl_high_u8', inst='USUBL2', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(1), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(8), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(8), '48'), Number(1)], '50')), Update(Var('sum', '52'), BinaryExpr('-', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(16), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(15), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='USUBL2 Vd.8H,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'sub_op': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vsubl_s16': ARMSema(intrin='vsubl_s16', inst='SSUBL', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(16), '48'), Number(0)], '50')), Update(Var('sum', '52'), BinaryExpr('-', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(32), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(31), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SSUBL Vd.4S,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vsubl_s32': ARMSema(intrin='vsubl_s32', inst='SSUBL', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(32), '48'), Number(0)], '50')), Update(Var('sum', '52'), BinaryExpr('-', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(64), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(63), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SSUBL Vd.2D,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vsubl_s8': ARMSema(intrin='vsubl_s8', inst='SSUBL', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(8), '39'), Number(0)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(8), '48'), Number(0)], '50')), Update(Var('sum', '52'), BinaryExpr('-', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(16), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(15), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SSUBL Vd.8H,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'sub_op': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vsubl_u16': ARMSema(intrin='vsubl_u16', inst='USUBL', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(16), '48'), Number(1)], '50')), Update(Var('sum', '52'), BinaryExpr('-', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(32), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(31), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='USUBL Vd.4S,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vsubl_u32': ARMSema(intrin='vsubl_u32', inst='USUBL', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(32), '48'), Number(1)], '50')), Update(Var('sum', '52'), BinaryExpr('-', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(64), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(63), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='USUBL Vd.2D,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vsubl_u8': ARMSema(intrin='vsubl_u8', inst='USUBL', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VPartReg(Var('n', '3'), Number(0), '5'), '7')], ('bits', Number(64)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '73'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(8), '39'), Number(1)], '41')), Update(Var('element2', '42'), Call('Int', [ElemSlice(Var('operand2', '45'), Var('e', '46'), Number(8), '48'), Number(1)], '50')), Update(Var('sum', '52'), BinaryExpr('-', Var('element1', '53'), Var('element2', '54'), '55')), Update(ElemSlice(Var('result', '62'), Var('e', '63'), Number(16), '66'), ArrayIndex(Var('sum', '67'), [SliceRange(Number(15), Number(0), '71')], '72'))], 1, '74'), Update(VReg(Var('d', '76'), '77'), Var('result', '78'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='USUBL Vd.8H,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'sub_op': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_long'),
    'vsubq_s16': ARMSema(intrin='vsubq_s16', inst='SUB', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(16)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(16)), '26'), For(Var('e', '59'), Number(0), Number(7), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(16), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(16), '40')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(16), '46'), BinaryExpr('-', Var('element1', '47'), Var('element2', '48'), '49'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SUB Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vsubq_s32': ARMSema(intrin='vsubq_s32', inst='SUB', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(32)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(32)), '26'), For(Var('e', '59'), Number(0), Number(3), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(32), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(32), '40')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(32), '46'), BinaryExpr('-', Var('element1', '47'), Var('element2', '48'), '49'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SUB Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vsubq_s64': ARMSema(intrin='vsubq_s64', inst='SUB', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), For(Var('e', '59'), Number(0), Number(1), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(64), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(64), '40')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(64), '46'), BinaryExpr('-', Var('element1', '47'), Var('element2', '48'), '49'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SUB Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vsubq_s8': ARMSema(intrin='vsubq_s8', inst='SUB', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(8)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(8)), '26'), For(Var('e', '59'), Number(0), Number(15), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(8), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(8), '40')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(8), '46'), BinaryExpr('-', Var('element1', '47'), Var('element2', '48'), '49'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SUB Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vsubq_u16': ARMSema(intrin='vsubq_u16', inst='SUB', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(16)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(16)), '26'), For(Var('e', '59'), Number(0), Number(7), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(16), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(16), '40')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(16), '46'), BinaryExpr('-', Var('element1', '47'), Var('element2', '48'), '49'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='SUB Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vsubq_u32': ARMSema(intrin='vsubq_u32', inst='SUB', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(32)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(32)), '26'), For(Var('e', '59'), Number(0), Number(3), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(32), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(32), '40')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(32), '46'), BinaryExpr('-', Var('element1', '47'), Var('element2', '48'), '49'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='SUB Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vsubq_u64': ARMSema(intrin='vsubq_u64', inst='SUB', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), For(Var('e', '59'), Number(0), Number(1), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(64), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(64), '40')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(64), '46'), BinaryExpr('-', Var('element1', '47'), Var('element2', '48'), '49'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='SUB Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vsubq_u8': ARMSema(intrin='vsubq_u8', inst='SUB', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(8)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(8)), '26'), For(Var('e', '59'), Number(0), Number(15), [Update(Var('element1', '29'), ElemSlice(Var('operand1', '31'), Var('e', '32'), Number(8), '34')), Update(Var('element2', '35'), ElemSlice(Var('operand2', '37'), Var('e', '38'), Number(8), '40')), Update(ElemSlice(Var('result', '43'), Var('e', '44'), Number(8), '46'), BinaryExpr('-', Var('element1', '47'), Var('element2', '48'), '49'))], 1, '60'), Update(VReg(Var('d', '62'), '63'), Var('result', '64'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='SUB Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'sub_op': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd'),
    'vsubw_high_s16': ARMSema(intrin='vsubw_high_s16', inst='SSUBW2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '40'), Number(0)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(16), '49'), Number(0)], '51')), Update(Var('sum', '53'), BinaryExpr('-', Var('element1', '54'), Var('element2', '55'), '56')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(32), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(31), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SSUBW2 Vd.4S,Vn.4S,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vsubw_high_s32': ARMSema(intrin='vsubw_high_s32', inst='SSUBW2', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(64), '40'), Number(0)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(32), '49'), Number(0)], '51')), Update(Var('sum', '53'), BinaryExpr('-', Var('element1', '54'), Var('element2', '55'), '56')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(64), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(63), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SSUBW2 Vd.2D,Vn.2D,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vsubw_high_s8': ARMSema(intrin='vsubw_high_s8', inst='SSUBW2', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '40'), Number(0)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(8), '49'), Number(0)], '51')), Update(Var('sum', '53'), BinaryExpr('-', Var('element1', '54'), Var('element2', '55'), '56')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(16), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(15), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SSUBW2 Vd.8H,Vn.8H,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'sub_op': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vsubw_high_u16': ARMSema(intrin='vsubw_high_u16', inst='USUBW2', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '40'), Number(1)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(16), '49'), Number(1)], '51')), Update(Var('sum', '53'), BinaryExpr('-', Var('element1', '54'), Var('element2', '55'), '56')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(32), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(31), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='USUBW2 Vd.4S,Vn.4S,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 1, 'elements': 4, 'sub_op': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vsubw_high_u32': ARMSema(intrin='vsubw_high_u32', inst='USUBW2', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(64), '40'), Number(1)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(32), '49'), Number(1)], '51')), Update(Var('sum', '53'), BinaryExpr('-', Var('element1', '54'), Var('element2', '55'), '56')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(64), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(63), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='USUBW2 Vd.2D,Vn.2D,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 1, 'elements': 2, 'sub_op': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vsubw_high_u8': ARMSema(intrin='vsubw_high_u8', inst='USUBW2', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(1), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '40'), Number(1)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(8), '49'), Number(1)], '51')), Update(Var('sum', '53'), BinaryExpr('-', Var('element1', '54'), Var('element2', '55'), '56')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(16), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(15), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='USUBW2 Vd.8H,Vn.8H,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 1, 'elements': 8, 'sub_op': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vsubw_s16': ARMSema(intrin='vsubw_s16', inst='SSUBW', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '40'), Number(0)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(16), '49'), Number(0)], '51')), Update(Var('sum', '53'), BinaryExpr('-', Var('element1', '54'), Var('element2', '55'), '56')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(32), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(31), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SSUBW Vd.4S,Vn.4S,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vsubw_s32': ARMSema(intrin='vsubw_s32', inst='SSUBW', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(64), '40'), Number(0)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(32), '49'), Number(0)], '51')), Update(Var('sum', '53'), BinaryExpr('-', Var('element1', '54'), Var('element2', '55'), '56')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(64), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(63), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SSUBW Vd.2D,Vn.2D,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vsubw_s8': ARMSema(intrin='vsubw_s8', inst='SSUBW', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '40'), Number(0)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(8), '49'), Number(0)], '51')), Update(Var('sum', '53'), BinaryExpr('-', Var('element1', '54'), Var('element2', '55'), '56')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(16), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(15), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SSUBW Vd.8H,Vn.8H,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'sub_op': True, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vsubw_u16': ARMSema(intrin='vsubw_u16', inst='USUBW', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(3), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(32), '40'), Number(1)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(16), '49'), Number(1)], '51')), Update(Var('sum', '53'), BinaryExpr('-', Var('element1', '54'), Var('element2', '55'), '56')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(32), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(31), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='USUBW Vd.4S,Vn.4S,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'part': 0, 'elements': 4, 'sub_op': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vsubw_u32': ARMSema(intrin='vsubw_u32', inst='USUBW', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(1), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(64), '40'), Number(1)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(32), '49'), Number(1)], '51')), Update(Var('sum', '53'), BinaryExpr('-', Var('element1', '54'), Var('element2', '55'), '56')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(64), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(63), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='USUBW Vd.2D,Vn.2D,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'part': 0, 'elements': 2, 'sub_op': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vsubw_u8': ARMSema(intrin='vsubw_u8', inst='USUBW', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '6'), VReg(Var('n', '4'), '5'), '7')], ('bits', Number(128)), '8'), VarsDecl([VarDeclInit(Var('operand2', '14'), VPartReg(Var('m', '11'), Number(0), '13'), '15')], ('bits', Number(64)), '16'), VarsDecl([VarDeclUndef(Var('result', '19'), '20')], ('bits', Number(128)), '21'), VarsDecl([VarDeclUndef(Var('element1', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('element2', '25'), '26')], ('integer', Number(64)), '27'), VarsDecl([VarDeclUndef(Var('sum', '28'), '29')], ('integer', Number(64)), '30'), For(Var('e', '74'), Number(0), Number(7), [Update(Var('element1', '33'), Call('Int', [ElemSlice(Var('operand1', '36'), Var('e', '37'), Number(16), '40'), Number(1)], '42')), Update(Var('element2', '43'), Call('Int', [ElemSlice(Var('operand2', '46'), Var('e', '47'), Number(8), '49'), Number(1)], '51')), Update(Var('sum', '53'), BinaryExpr('-', Var('element1', '54'), Var('element2', '55'), '56')), Update(ElemSlice(Var('result', '63'), Var('e', '64'), Number(16), '67'), ArrayIndex(Var('sum', '68'), [SliceRange(Number(15), Number(0), '72')], '73'))], 1, '75'), Update(VReg(Var('d', '77'), '78'), Var('result', '79'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='USUBW Vd.8H,Vn.8H,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'part': 0, 'elements': 8, 'sub_op': True, 'unsigned': True}, belongs_to='aarch64_vector_arithmetic_binary_disparate_add_sub_wide'),
    'vtrn1_s16': ARMSema(intrin='vtrn1_s16', inst='TRN1', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), For(Var('p', '51'), Number(0), Number(1), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(16), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(16), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(16), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(16), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='int16x4_t', ret_is_signed=True, inst_form='TRN1 Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'part': 0, 'pairs': 2}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn1_s32': ARMSema(intrin='vtrn1_s32', inst='TRN1', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), For(Var('p', '51'), Number(0), Number(0), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(32), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(32), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(32), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(32), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='int32x2_t', ret_is_signed=True, inst_form='TRN1 Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'part': 0, 'pairs': 1}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn1_s8': ARMSema(intrin='vtrn1_s8', inst='TRN1', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), For(Var('p', '51'), Number(0), Number(3), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(8), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(8), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(8), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(8), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='int8x8_t', ret_is_signed=True, inst_form='TRN1 Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'part': 0, 'pairs': 4}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn1_u16': ARMSema(intrin='vtrn1_u16', inst='TRN1', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), For(Var('p', '51'), Number(0), Number(1), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(16), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(16), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(16), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(16), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='TRN1 Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'part': 0, 'pairs': 2}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn1_u32': ARMSema(intrin='vtrn1_u32', inst='TRN1', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), For(Var('p', '51'), Number(0), Number(0), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(32), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(32), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(32), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(32), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='TRN1 Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'part': 0, 'pairs': 1}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn1_u8': ARMSema(intrin='vtrn1_u8', inst='TRN1', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), For(Var('p', '51'), Number(0), Number(3), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(8), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(8), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(8), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(8), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='TRN1 Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'part': 0, 'pairs': 4}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn1q_s16': ARMSema(intrin='vtrn1q_s16', inst='TRN1', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), For(Var('p', '51'), Number(0), Number(3), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(16), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(16), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(16), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(16), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='int16x8_t', ret_is_signed=True, inst_form='TRN1 Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'part': 0, 'pairs': 4}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn1q_s32': ARMSema(intrin='vtrn1q_s32', inst='TRN1', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), For(Var('p', '51'), Number(0), Number(1), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(32), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(32), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(32), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(32), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='int32x4_t', ret_is_signed=True, inst_form='TRN1 Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'part': 0, 'pairs': 2}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn1q_s64': ARMSema(intrin='vtrn1q_s64', inst='TRN1', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), For(Var('p', '51'), Number(0), Number(0), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(64), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(64), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(64), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(64), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='int64x2_t', ret_is_signed=True, inst_form='TRN1 Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'part': 0, 'pairs': 1}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn1q_s8': ARMSema(intrin='vtrn1q_s8', inst='TRN1', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), For(Var('p', '51'), Number(0), Number(7), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(8), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(8), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(8), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(8), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='int8x16_t', ret_is_signed=True, inst_form='TRN1 Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'part': 0, 'pairs': 8}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn1q_u16': ARMSema(intrin='vtrn1q_u16', inst='TRN1', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), For(Var('p', '51'), Number(0), Number(3), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(16), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(16), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(16), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(16), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='TRN1 Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'part': 0, 'pairs': 4}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn1q_u32': ARMSema(intrin='vtrn1q_u32', inst='TRN1', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), For(Var('p', '51'), Number(0), Number(1), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(32), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(32), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(32), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(32), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='TRN1 Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'part': 0, 'pairs': 2}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn1q_u64': ARMSema(intrin='vtrn1q_u64', inst='TRN1', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), For(Var('p', '51'), Number(0), Number(0), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(64), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(64), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(64), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(64), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='TRN1 Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'part': 0, 'pairs': 1}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn1q_u8': ARMSema(intrin='vtrn1q_u8', inst='TRN1', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), For(Var('p', '51'), Number(0), Number(7), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(8), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(8), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(8), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(8), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='TRN1 Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'part': 0, 'pairs': 8}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn2_s16': ARMSema(intrin='vtrn2_s16', inst='TRN2', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), For(Var('p', '51'), Number(0), Number(1), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(16), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(1), '33'), Number(16), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(16), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(1), '48'), Number(16), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='int16x4_t', ret_is_signed=True, inst_form='TRN2 Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'part': 1, 'pairs': 2}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn2_s32': ARMSema(intrin='vtrn2_s32', inst='TRN2', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), For(Var('p', '51'), Number(0), Number(0), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(32), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(1), '33'), Number(32), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(32), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(1), '48'), Number(32), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='int32x2_t', ret_is_signed=True, inst_form='TRN2 Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'part': 1, 'pairs': 1}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn2_s8': ARMSema(intrin='vtrn2_s8', inst='TRN2', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), For(Var('p', '51'), Number(0), Number(3), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(8), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(1), '33'), Number(8), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(8), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(1), '48'), Number(8), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='int8x8_t', ret_is_signed=True, inst_form='TRN2 Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'part': 1, 'pairs': 4}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn2_u16': ARMSema(intrin='vtrn2_u16', inst='TRN2', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), For(Var('p', '51'), Number(0), Number(1), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(16), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(1), '33'), Number(16), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(16), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(1), '48'), Number(16), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='TRN2 Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'part': 1, 'pairs': 2}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn2_u32': ARMSema(intrin='vtrn2_u32', inst='TRN2', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), For(Var('p', '51'), Number(0), Number(0), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(32), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(1), '33'), Number(32), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(32), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(1), '48'), Number(32), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='TRN2 Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'part': 1, 'pairs': 1}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn2_u8': ARMSema(intrin='vtrn2_u8', inst='TRN2', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), For(Var('p', '51'), Number(0), Number(3), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(8), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(1), '33'), Number(8), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(8), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(1), '48'), Number(8), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='TRN2 Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'part': 1, 'pairs': 4}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn2q_s16': ARMSema(intrin='vtrn2q_s16', inst='TRN2', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), For(Var('p', '51'), Number(0), Number(3), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(16), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(1), '33'), Number(16), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(16), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(1), '48'), Number(16), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='int16x8_t', ret_is_signed=True, inst_form='TRN2 Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'part': 1, 'pairs': 4}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn2q_s32': ARMSema(intrin='vtrn2q_s32', inst='TRN2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), For(Var('p', '51'), Number(0), Number(1), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(32), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(1), '33'), Number(32), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(32), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(1), '48'), Number(32), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='int32x4_t', ret_is_signed=True, inst_form='TRN2 Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'part': 1, 'pairs': 2}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn2q_s64': ARMSema(intrin='vtrn2q_s64', inst='TRN2', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), For(Var('p', '51'), Number(0), Number(0), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(64), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(1), '33'), Number(64), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(64), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(1), '48'), Number(64), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='int64x2_t', ret_is_signed=True, inst_form='TRN2 Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'part': 1, 'pairs': 1}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn2q_s8': ARMSema(intrin='vtrn2q_s8', inst='TRN2', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), For(Var('p', '51'), Number(0), Number(7), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(8), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(1), '33'), Number(8), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(8), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(1), '48'), Number(8), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='int8x16_t', ret_is_signed=True, inst_form='TRN2 Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'part': 1, 'pairs': 8}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn2q_u16': ARMSema(intrin='vtrn2q_u16', inst='TRN2', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), For(Var('p', '51'), Number(0), Number(3), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(16), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(1), '33'), Number(16), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(16), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(1), '48'), Number(16), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='TRN2 Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'part': 1, 'pairs': 4}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn2q_u32': ARMSema(intrin='vtrn2q_u32', inst='TRN2', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), For(Var('p', '51'), Number(0), Number(1), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(32), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(1), '33'), Number(32), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(32), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(1), '48'), Number(32), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='TRN2 Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'part': 1, 'pairs': 2}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn2q_u64': ARMSema(intrin='vtrn2q_u64', inst='TRN2', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), For(Var('p', '51'), Number(0), Number(0), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(64), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(1), '33'), Number(64), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(64), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(1), '48'), Number(64), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='TRN2 Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'part': 1, 'pairs': 1}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtrn2q_u8': ARMSema(intrin='vtrn2q_u8', inst='TRN2', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), For(Var('p', '51'), Number(0), Number(7), [Update(ElemSlice(Var('result', '22'), BinaryExpr('*', Number(2), Var('p', '23'), '24'), Number(8), '27'), ElemSlice(Var('operand1', '29'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '30'), '31'), Number(1), '33'), Number(8), '35')), Update(ElemSlice(Var('result', '37'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '38'), '39'), Number(1), '40'), Number(8), '42'), ElemSlice(Var('operand2', '44'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '45'), '46'), Number(1), '48'), Number(8), '50'))], 1, '52'), Update(VReg(Var('d', '54'), '55'), Var('result', '56'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='TRN2 Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'part': 1, 'pairs': 8}, belongs_to='aarch64_vector_transfer_vector_permute_transpose'),
    'vtst_s16': ARMSema(intrin='vtst_s16', inst='CMTST', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(16)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(16)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(16), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(16), '43')), Update(Var('test_passed', '45'), UnaryExpr('!', Call('IsZero', [BinaryExpr('AND', Var('element1', '47'), Var('element2', '48'), '49')], '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='CMTST Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'and_test': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vtst_s32': ARMSema(intrin='vtst_s32', inst='CMTST', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(32)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(32)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(32), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(32), '43')), Update(Var('test_passed', '45'), UnaryExpr('!', Call('IsZero', [BinaryExpr('AND', Var('element1', '47'), Var('element2', '48'), '49')], '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='CMTST Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'and_test': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vtst_s64': ARMSema(intrin='vtst_s64', inst='CMTST', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(64), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(64), '43')), Update(Var('test_passed', '45'), UnaryExpr('!', Call('IsZero', [BinaryExpr('AND', Var('element1', '47'), Var('element2', '48'), '49')], '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='CMTST Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'and_test': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_sisd'),
    'vtst_s8': ARMSema(intrin='vtst_s8', inst='CMTST', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(8)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(8)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(8), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(8), '43')), Update(Var('test_passed', '45'), UnaryExpr('!', Call('IsZero', [BinaryExpr('AND', Var('element1', '47'), Var('element2', '48'), '49')], '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='CMTST Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'and_test': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vtst_u16': ARMSema(intrin='vtst_u16', inst='CMTST', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(16)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(16)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(16), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(16), '43')), Update(Var('test_passed', '45'), UnaryExpr('!', Call('IsZero', [BinaryExpr('AND', Var('element1', '47'), Var('element2', '48'), '49')], '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='CMTST Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'and_test': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vtst_u32': ARMSema(intrin='vtst_u32', inst='CMTST', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(32)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(32)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(32), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(32), '43')), Update(Var('test_passed', '45'), UnaryExpr('!', Call('IsZero', [BinaryExpr('AND', Var('element1', '47'), Var('element2', '48'), '49')], '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='CMTST Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'and_test': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vtst_u64': ARMSema(intrin='vtst_u64', inst='CMTST', params=[Parameter(name='a', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(64), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(64), '43')), Update(Var('test_passed', '45'), UnaryExpr('!', Call('IsZero', [BinaryExpr('AND', Var('element1', '47'), Var('element2', '48'), '49')], '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x1_t', ret_is_signed=False, inst_form='CMTST Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'and_test': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_sisd'),
    'vtst_u8': ARMSema(intrin='vtst_u8', inst='CMTST', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(8)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(8)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(8), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(8), '43')), Update(Var('test_passed', '45'), UnaryExpr('!', Call('IsZero', [BinaryExpr('AND', Var('element1', '47'), Var('element2', '48'), '49')], '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='CMTST Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'and_test': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vtstd_s64': ARMSema(intrin='vtstd_s64', inst='CMTST', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(64), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(64), '43')), Update(Var('test_passed', '45'), UnaryExpr('!', Call('IsZero', [BinaryExpr('AND', Var('element1', '47'), Var('element2', '48'), '49')], '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64_t', ret_is_signed=False, inst_form='CMTST Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'and_test': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_sisd'),
    'vtstd_u64': ARMSema(intrin='vtstd_u64', inst='CMTST', params=[Parameter(name='a', type='uint64_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(0), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(64), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(64), '43')), Update(Var('test_passed', '45'), UnaryExpr('!', Call('IsZero', [BinaryExpr('AND', Var('element1', '47'), Var('element2', '48'), '49')], '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64_t', ret_is_signed=False, inst_form='CMTST Dd,Dn,Dm', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'and_test': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_sisd'),
    'vtstq_s16': ARMSema(intrin='vtstq_s16', inst='CMTST', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(16)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(16)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(16), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(16), '43')), Update(Var('test_passed', '45'), UnaryExpr('!', Call('IsZero', [BinaryExpr('AND', Var('element1', '47'), Var('element2', '48'), '49')], '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='CMTST Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'and_test': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vtstq_s32': ARMSema(intrin='vtstq_s32', inst='CMTST', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(32)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(32)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(32), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(32), '43')), Update(Var('test_passed', '45'), UnaryExpr('!', Call('IsZero', [BinaryExpr('AND', Var('element1', '47'), Var('element2', '48'), '49')], '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='CMTST Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'and_test': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vtstq_s64': ARMSema(intrin='vtstq_s64', inst='CMTST', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(64), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(64), '43')), Update(Var('test_passed', '45'), UnaryExpr('!', Call('IsZero', [BinaryExpr('AND', Var('element1', '47'), Var('element2', '48'), '49')], '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='CMTST Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'and_test': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vtstq_s8': ARMSema(intrin='vtstq_s8', inst='CMTST', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(8)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(8)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(15), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(8), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(8), '43')), Update(Var('test_passed', '45'), UnaryExpr('!', Call('IsZero', [BinaryExpr('AND', Var('element1', '47'), Var('element2', '48'), '49')], '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='CMTST Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'and_test': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vtstq_u16': ARMSema(intrin='vtstq_u16', inst='CMTST', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(16)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(16)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(7), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(16), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(16), '43')), Update(Var('test_passed', '45'), UnaryExpr('!', Call('IsZero', [BinaryExpr('AND', Var('element1', '47'), Var('element2', '48'), '49')], '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(16), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='CMTST Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'and_test': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vtstq_u32': ARMSema(intrin='vtstq_u32', inst='CMTST', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(32)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(32)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(3), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(32), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(32), '43')), Update(Var('test_passed', '45'), UnaryExpr('!', Call('IsZero', [BinaryExpr('AND', Var('element1', '47'), Var('element2', '48'), '49')], '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(32), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='CMTST Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'and_test': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vtstq_u64': ARMSema(intrin='vtstq_u64', inst='CMTST', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(64)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(64)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(1), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(64), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(64), '43')), Update(Var('test_passed', '45'), UnaryExpr('!', Call('IsZero', [BinaryExpr('AND', Var('element1', '47'), Var('element2', '48'), '49')], '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(64), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='CMTST Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'and_test': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vtstq_u8': ARMSema(intrin='vtstq_u8', inst='CMTST', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('element1', '20'), '21')], ('bits', Number(8)), '22'), VarsDecl([VarDeclUndef(Var('element2', '24'), '25')], ('bits', Number(8)), '26'), VarsDecl([VarDeclUndef(Var('test_passed', '27'), '28')], ('boolean', Number(1)), '29'), For(Var('e', '68'), Number(0), Number(15), [Update(Var('element1', '32'), ElemSlice(Var('operand1', '34'), Var('e', '35'), Number(8), '37')), Update(Var('element2', '38'), ElemSlice(Var('operand2', '40'), Var('e', '41'), Number(8), '43')), Update(Var('test_passed', '45'), UnaryExpr('!', Call('IsZero', [BinaryExpr('AND', Var('element1', '47'), Var('element2', '48'), '49')], '50'), '51')), Update(ElemSlice(Var('result', '58'), Var('e', '59'), Number(8), '61'), IfElseExpr(Var('test_passed', '64'), Call('Ones', [], '63'), Call('Zeros', [], '66'), '67'))], 1, '69'), Update(VReg(Var('d', '71'), '72'), Var('result', '73'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='CMTST Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'and_test': True}, belongs_to='aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd'),
    'vuqadd_s16': ARMSema(intrin='vuqadd_s16', inst='SUQADD', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(16), '46'), Number(0)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(16), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(16), Number(0)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int16x4_t', ret_is_signed=True, inst_form='SUQADD Vd.4H,Vn.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_simd'),
    'vuqadd_s32': ARMSema(intrin='vuqadd_s32', inst='SUQADD', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(1), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(32), '46'), Number(0)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(32), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(32), Number(0)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int32x2_t', ret_is_signed=True, inst_form='SUQADD Vd.2S,Vn.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_simd'),
    'vuqadd_s64': ARMSema(intrin='vuqadd_s64', inst='SUQADD', params=[Parameter(name='a', type='int64x1_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x1_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(64), '36'), Number(1)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(64), '46'), Number(0)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(64), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(64), Number(0)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int64x1_t', ret_is_signed=True, inst_form='SUQADD Dd,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_sisd'),
    'vuqadd_s8': ARMSema(intrin='vuqadd_s8', inst='SUQADD', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(8), '46'), Number(0)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(8), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(8), Number(0)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int8x8_t', ret_is_signed=True, inst_form='SUQADD Vd.8B,Vn.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_simd'),
    'vuqaddb_s8': ARMSema(intrin='vuqaddb_s8', inst='SUQADD', params=[Parameter(name='a', type='int8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='uint8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(8)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(8)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(8)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(8), '46'), Number(0)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(8), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(8), Number(0)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int8_t', ret_is_signed=True, inst_form='SUQADD Bd,Bn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 8, 'datasize': 8, 'elements': 1, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_sisd'),
    'vuqaddd_s64': ARMSema(intrin='vuqaddd_s64', inst='SUQADD', params=[Parameter(name='a', type='int64_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='uint64_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(64)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(64), '36'), Number(1)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(64), '46'), Number(0)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(64), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(64), Number(0)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int64_t', ret_is_signed=True, inst_form='SUQADD Dd,Dn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 64, 'datasize': 64, 'elements': 1, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_sisd'),
    'vuqaddh_s16': ARMSema(intrin='vuqaddh_s16', inst='SUQADD', params=[Parameter(name='a', type='int16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='uint16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(16)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(16)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(16)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(16), '46'), Number(0)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(16), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(16), Number(0)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int16_t', ret_is_signed=True, inst_form='SUQADD Hd,Hn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 16, 'datasize': 16, 'elements': 1, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_sisd'),
    'vuqaddq_s16': ARMSema(intrin='vuqaddq_s16', inst='SUQADD', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(7), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(16), '36'), Number(1)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(16), '46'), Number(0)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(16), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(16), Number(0)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int16x8_t', ret_is_signed=True, inst_form='SUQADD Vd.8H,Vn.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_simd'),
    'vuqaddq_s32': ARMSema(intrin='vuqaddq_s32', inst='SUQADD', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(3), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(32), '46'), Number(0)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(32), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(32), Number(0)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int32x4_t', ret_is_signed=True, inst_form='SUQADD Vd.4S,Vn.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_simd'),
    'vuqaddq_s64': ARMSema(intrin='vuqaddq_s64', inst='SUQADD', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(1), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(64), '36'), Number(1)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(64), '46'), Number(0)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(64), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(64), Number(0)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int64x2_t', ret_is_signed=True, inst_form='SUQADD Vd.2D,Vn.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_simd'),
    'vuqaddq_s8': ARMSema(intrin='vuqaddq_s8', inst='SUQADD', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(128)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(15), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(8), '36'), Number(1)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(8), '46'), Number(0)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(8), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(8), Number(0)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int8x16_t', ret_is_signed=True, inst_form='SUQADD Vd.16B,Vn.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_simd'),
    'vuqadds_s32': ARMSema(intrin='vuqadds_s32', inst='SUQADD', params=[Parameter(name='a', type='int32_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='uint32_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(32)), '7'), VarsDecl([VarDeclUndef(Var('result', '9'), '10')], ('bits', Number(32)), '11'), VarsDecl([VarDeclInit(Var('operand2', '16'), VReg(Var('d', '14'), '15'), '17')], ('bits', Number(32)), '18'), VarsDecl([VarDeclUndef(Var('op1', '19'), '20')], ('integer', Number(64)), '21'), VarsDecl([VarDeclUndef(Var('op2', '22'), '23')], ('integer', Number(64)), '24'), VarsDecl([VarDeclUndef(Var('sat', '25'), '26')], ('boolean', Number(1)), '27'), For(Var('e', '61'), Number(0), Number(0), [Update(Var('op1', '30'), Call('Int', [ElemSlice(Var('operand', '33'), Var('e', '34'), Number(32), '36'), Number(1)], '39')), Update(Var('op2', '40'), Call('Int', [ElemSlice(Var('operand2', '43'), Var('e', '44'), Number(32), '46'), Number(0)], '48')), Update(ElemSlice(Var('result', '50'), Var('e', '51'), Number(32), '53'), Call('SatQ', [BinaryExpr('+', Var('op1', '55'), Var('op2', '56'), '57'), Number(32), Number(0)], '60'))], 1, '62'), Update(VReg(Var('d', '64'), '65'), Var('result', '66'))], rettype='int32_t', ret_is_signed=True, inst_form='SUQADD Sd,Sn', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'a', 'n': 'b'}, resolving={'esize': 32, 'datasize': 32, 'elements': 1, 'unsigned': False}, belongs_to='aarch64_vector_arithmetic_unary_add_saturating_sisd'),
    'vuzp1_s16': ARMSema(intrin='vuzp1_s16', inst='UZP1', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(128)), '26'), For(Var('e', '42'), Number(0), Number(3), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(16), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(16), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int16x4_t', ret_is_signed=True, inst_form='UZP1 Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'part': 0}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp1_s32': ARMSema(intrin='vuzp1_s32', inst='UZP1', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(128)), '26'), For(Var('e', '42'), Number(0), Number(1), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(32), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(32), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int32x2_t', ret_is_signed=True, inst_form='UZP1 Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'part': 0}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp1_s8': ARMSema(intrin='vuzp1_s8', inst='UZP1', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(128)), '26'), For(Var('e', '42'), Number(0), Number(7), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(8), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(8), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int8x8_t', ret_is_signed=True, inst_form='UZP1 Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'part': 0}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp1_u16': ARMSema(intrin='vuzp1_u16', inst='UZP1', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(128)), '26'), For(Var('e', '42'), Number(0), Number(3), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(16), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(16), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='UZP1 Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'part': 0}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp1_u32': ARMSema(intrin='vuzp1_u32', inst='UZP1', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(128)), '26'), For(Var('e', '42'), Number(0), Number(1), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(32), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(32), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='UZP1 Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'part': 0}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp1_u8': ARMSema(intrin='vuzp1_u8', inst='UZP1', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(128)), '26'), For(Var('e', '42'), Number(0), Number(7), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(8), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(8), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='UZP1 Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'part': 0}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp1q_s16': ARMSema(intrin='vuzp1q_s16', inst='UZP1', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(256)), '26'), For(Var('e', '42'), Number(0), Number(7), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(16), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(16), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int16x8_t', ret_is_signed=True, inst_form='UZP1 Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'part': 0}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp1q_s32': ARMSema(intrin='vuzp1q_s32', inst='UZP1', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(256)), '26'), For(Var('e', '42'), Number(0), Number(3), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(32), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(32), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int32x4_t', ret_is_signed=True, inst_form='UZP1 Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'part': 0}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp1q_s64': ARMSema(intrin='vuzp1q_s64', inst='UZP1', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(256)), '26'), For(Var('e', '42'), Number(0), Number(1), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(64), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(64), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int64x2_t', ret_is_signed=True, inst_form='UZP1 Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'part': 0}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp1q_s8': ARMSema(intrin='vuzp1q_s8', inst='UZP1', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(256)), '26'), For(Var('e', '42'), Number(0), Number(15), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(8), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(8), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int8x16_t', ret_is_signed=True, inst_form='UZP1 Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'part': 0}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp1q_u16': ARMSema(intrin='vuzp1q_u16', inst='UZP1', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(256)), '26'), For(Var('e', '42'), Number(0), Number(7), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(16), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(16), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UZP1 Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'part': 0}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp1q_u32': ARMSema(intrin='vuzp1q_u32', inst='UZP1', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(256)), '26'), For(Var('e', '42'), Number(0), Number(3), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(32), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(32), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UZP1 Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'part': 0}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp1q_u64': ARMSema(intrin='vuzp1q_u64', inst='UZP1', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(256)), '26'), For(Var('e', '42'), Number(0), Number(1), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(64), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(64), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UZP1 Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'part': 0}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp1q_u8': ARMSema(intrin='vuzp1q_u8', inst='UZP1', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(256)), '26'), For(Var('e', '42'), Number(0), Number(15), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(8), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(8), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='UZP1 Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'part': 0}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp2_s16': ARMSema(intrin='vuzp2_s16', inst='UZP2', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(128)), '26'), For(Var('e', '42'), Number(0), Number(3), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(16), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(1), '39'), Number(16), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int16x4_t', ret_is_signed=True, inst_form='UZP2 Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'part': 1}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp2_s32': ARMSema(intrin='vuzp2_s32', inst='UZP2', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(128)), '26'), For(Var('e', '42'), Number(0), Number(1), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(32), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(1), '39'), Number(32), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int32x2_t', ret_is_signed=True, inst_form='UZP2 Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'part': 1}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp2_s8': ARMSema(intrin='vuzp2_s8', inst='UZP2', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(128)), '26'), For(Var('e', '42'), Number(0), Number(7), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(8), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(1), '39'), Number(8), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int8x8_t', ret_is_signed=True, inst_form='UZP2 Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'part': 1}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp2_u16': ARMSema(intrin='vuzp2_u16', inst='UZP2', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(128)), '26'), For(Var('e', '42'), Number(0), Number(3), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(16), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(1), '39'), Number(16), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='UZP2 Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'part': 1}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp2_u32': ARMSema(intrin='vuzp2_u32', inst='UZP2', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(128)), '26'), For(Var('e', '42'), Number(0), Number(1), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(32), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(1), '39'), Number(32), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='UZP2 Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'part': 1}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp2_u8': ARMSema(intrin='vuzp2_u8', inst='UZP2', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(128)), '26'), For(Var('e', '42'), Number(0), Number(7), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(8), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(1), '39'), Number(8), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='UZP2 Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'part': 1}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp2q_s16': ARMSema(intrin='vuzp2q_s16', inst='UZP2', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(256)), '26'), For(Var('e', '42'), Number(0), Number(7), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(16), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(1), '39'), Number(16), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int16x8_t', ret_is_signed=True, inst_form='UZP2 Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'part': 1}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp2q_s32': ARMSema(intrin='vuzp2q_s32', inst='UZP2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(256)), '26'), For(Var('e', '42'), Number(0), Number(3), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(32), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(1), '39'), Number(32), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int32x4_t', ret_is_signed=True, inst_form='UZP2 Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'part': 1}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp2q_s64': ARMSema(intrin='vuzp2q_s64', inst='UZP2', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(256)), '26'), For(Var('e', '42'), Number(0), Number(1), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(64), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(1), '39'), Number(64), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int64x2_t', ret_is_signed=True, inst_form='UZP2 Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'part': 1}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp2q_s8': ARMSema(intrin='vuzp2q_s8', inst='UZP2', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(256)), '26'), For(Var('e', '42'), Number(0), Number(15), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(8), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(1), '39'), Number(8), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='int8x16_t', ret_is_signed=True, inst_form='UZP2 Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'part': 1}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp2q_u16': ARMSema(intrin='vuzp2q_u16', inst='UZP2', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(256)), '26'), For(Var('e', '42'), Number(0), Number(7), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(16), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(1), '39'), Number(16), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='UZP2 Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'part': 1}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp2q_u32': ARMSema(intrin='vuzp2q_u32', inst='UZP2', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(256)), '26'), For(Var('e', '42'), Number(0), Number(3), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(32), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(1), '39'), Number(32), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='UZP2 Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'part': 1}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp2q_u64': ARMSema(intrin='vuzp2q_u64', inst='UZP2', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(256)), '26'), For(Var('e', '42'), Number(0), Number(1), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(64), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(1), '39'), Number(64), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='UZP2 Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'part': 1}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vuzp2q_u8': ARMSema(intrin='vuzp2q_u8', inst='UZP2', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operandl', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operandh', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('zipped', '24'), BinaryExpr(':', Var('operandh', '21'), Var('operandl', '22'), '23'), '25')], ('bits', Number(256)), '26'), For(Var('e', '42'), Number(0), Number(15), [Update(ElemSlice(Var('result', '30'), Var('e', '31'), Number(8), '33'), ElemSlice(Var('zipped', '35'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('e', '36'), '37'), Number(1), '39'), Number(8), '41'))], 1, '43'), Update(VReg(Var('d', '45'), '46'), Var('result', '47'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='UZP2 Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'part': 1}, belongs_to='aarch64_vector_transfer_vector_permute_unzip'),
    'vzip1_s16': ARMSema(intrin='vzip1_s16', inst='ZIP1', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(0), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(1), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(16), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(16), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(16), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(16), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='int16x4_t', ret_is_signed=True, inst_form='ZIP1 Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'part': 0, 'pairs': 2}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip1_s32': ARMSema(intrin='vzip1_s32', inst='ZIP1', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(0), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(0), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(32), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(32), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(32), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(32), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='int32x2_t', ret_is_signed=True, inst_form='ZIP1 Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'part': 0, 'pairs': 1}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip1_s8': ARMSema(intrin='vzip1_s8', inst='ZIP1', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(0), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(3), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(8), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(8), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(8), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(8), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='int8x8_t', ret_is_signed=True, inst_form='ZIP1 Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'part': 0, 'pairs': 4}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip1_u16': ARMSema(intrin='vzip1_u16', inst='ZIP1', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(0), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(1), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(16), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(16), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(16), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(16), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='ZIP1 Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'part': 0, 'pairs': 2}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip1_u32': ARMSema(intrin='vzip1_u32', inst='ZIP1', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(0), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(0), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(32), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(32), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(32), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(32), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='ZIP1 Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'part': 0, 'pairs': 1}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip1_u8': ARMSema(intrin='vzip1_u8', inst='ZIP1', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(0), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(3), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(8), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(8), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(8), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(8), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='ZIP1 Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'part': 0, 'pairs': 4}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip1q_s16': ARMSema(intrin='vzip1q_s16', inst='ZIP1', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(0), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(3), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(16), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(16), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(16), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(16), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='int16x8_t', ret_is_signed=True, inst_form='ZIP1 Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'part': 0, 'pairs': 4}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip1q_s32': ARMSema(intrin='vzip1q_s32', inst='ZIP1', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(0), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(1), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(32), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(32), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(32), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(32), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='int32x4_t', ret_is_signed=True, inst_form='ZIP1 Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'part': 0, 'pairs': 2}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip1q_s64': ARMSema(intrin='vzip1q_s64', inst='ZIP1', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(0), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(0), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(64), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(64), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(64), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(64), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='int64x2_t', ret_is_signed=True, inst_form='ZIP1 Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'part': 0, 'pairs': 1}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip1q_s8': ARMSema(intrin='vzip1q_s8', inst='ZIP1', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(0), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(7), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(8), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(8), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(8), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(8), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='int8x16_t', ret_is_signed=True, inst_form='ZIP1 Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'part': 0, 'pairs': 8}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip1q_u16': ARMSema(intrin='vzip1q_u16', inst='ZIP1', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(0), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(3), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(16), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(16), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(16), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(16), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='ZIP1 Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'part': 0, 'pairs': 4}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip1q_u32': ARMSema(intrin='vzip1q_u32', inst='ZIP1', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(0), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(1), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(32), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(32), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(32), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(32), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='ZIP1 Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'part': 0, 'pairs': 2}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip1q_u64': ARMSema(intrin='vzip1q_u64', inst='ZIP1', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(0), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(0), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(64), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(64), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(64), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(64), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='ZIP1 Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'part': 0, 'pairs': 1}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip1q_u8': ARMSema(intrin='vzip1q_u8', inst='ZIP1', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(0), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(7), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(8), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(8), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(8), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(8), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='ZIP1 Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'part': 0, 'pairs': 8}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip2_s16': ARMSema(intrin='vzip2_s16', inst='ZIP2', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(2), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(1), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(16), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(16), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(16), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(16), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='int16x4_t', ret_is_signed=True, inst_form='ZIP2 Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'part': 1, 'pairs': 2}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip2_s32': ARMSema(intrin='vzip2_s32', inst='ZIP2', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(1), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(0), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(32), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(32), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(32), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(32), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='int32x2_t', ret_is_signed=True, inst_form='ZIP2 Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'part': 1, 'pairs': 1}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip2_s8': ARMSema(intrin='vzip2_s8', inst='ZIP2', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(4), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(3), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(8), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(8), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(8), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(8), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='int8x8_t', ret_is_signed=True, inst_form='ZIP2 Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'part': 1, 'pairs': 4}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip2_u16': ARMSema(intrin='vzip2_u16', inst='ZIP2', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(2), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(1), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(16), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(16), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(16), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(16), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='uint16x4_t', ret_is_signed=False, inst_form='ZIP2 Vd.4H,Vn.4H,Vm.4H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 64, 'elements': 4, 'part': 1, 'pairs': 2}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip2_u32': ARMSema(intrin='vzip2_u32', inst='ZIP2', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(1), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(0), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(32), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(32), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(32), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(32), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='uint32x2_t', ret_is_signed=False, inst_form='ZIP2 Vd.2S,Vn.2S,Vm.2S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 64, 'elements': 2, 'part': 1, 'pairs': 1}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip2_u8': ARMSema(intrin='vzip2_u8', inst='ZIP2', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(64)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(4), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(3), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(8), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(8), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(8), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(8), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='uint8x8_t', ret_is_signed=False, inst_form='ZIP2 Vd.8B,Vn.8B,Vm.8B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 64, 'elements': 8, 'part': 1, 'pairs': 4}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip2q_s16': ARMSema(intrin='vzip2q_s16', inst='ZIP2', params=[Parameter(name='a', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(4), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(3), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(16), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(16), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(16), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(16), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='int16x8_t', ret_is_signed=True, inst_form='ZIP2 Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'part': 1, 'pairs': 4}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip2q_s32': ARMSema(intrin='vzip2q_s32', inst='ZIP2', params=[Parameter(name='a', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(2), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(1), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(32), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(32), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(32), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(32), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='int32x4_t', ret_is_signed=True, inst_form='ZIP2 Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'part': 1, 'pairs': 2}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip2q_s64': ARMSema(intrin='vzip2q_s64', inst='ZIP2', params=[Parameter(name='a', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int64x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(1), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(0), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(64), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(64), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(64), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(64), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='int64x2_t', ret_is_signed=True, inst_form='ZIP2 Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'part': 1, 'pairs': 1}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip2q_s8': ARMSema(intrin='vzip2q_s8', inst='ZIP2', params=[Parameter(name='a', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x16_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(8), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(7), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(8), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(8), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(8), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(8), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='int8x16_t', ret_is_signed=True, inst_form='ZIP2 Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'part': 1, 'pairs': 8}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip2q_u16': ARMSema(intrin='vzip2q_u16', inst='ZIP2', params=[Parameter(name='a', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(4), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(3), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(16), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(16), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(16), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(16), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='uint16x8_t', ret_is_signed=False, inst_form='ZIP2 Vd.8H,Vn.8H,Vm.8H', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 16, 'datasize': 128, 'elements': 8, 'part': 1, 'pairs': 4}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip2q_u32': ARMSema(intrin='vzip2q_u32', inst='ZIP2', params=[Parameter(name='a', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(2), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(1), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(32), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(32), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(32), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(32), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='uint32x4_t', ret_is_signed=False, inst_form='ZIP2 Vd.4S,Vn.4S,Vm.4S', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 32, 'datasize': 128, 'elements': 4, 'part': 1, 'pairs': 2}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip2q_u64': ARMSema(intrin='vzip2q_u64', inst='ZIP2', params=[Parameter(name='a', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint64x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(1), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(0), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(64), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(64), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(64), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(64), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='uint64x2_t', ret_is_signed=False, inst_form='ZIP2 Vd.2D,Vn.2D,Vm.2D', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 64, 'datasize': 128, 'elements': 2, 'part': 1, 'pairs': 1}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip2q_u8': ARMSema(intrin='vzip2q_u8', inst='ZIP2', params=[Parameter(name='a', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x16_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(128)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(128)), '14'), VarsDecl([VarDeclUndef(Var('result', '16'), '17')], ('bits', Number(128)), '18'), VarsDecl([VarDeclInit(Var('base', '22'), Number(8), '23')], ('integer', Number(64)), '24'), For(Var('p', '55'), Number(0), Number(7), [Update(ElemSlice(Var('result', '28'), BinaryExpr('*', Number(2), Var('p', '29'), '30'), Number(8), '33'), ElemSlice(Var('operand1', '35'), BinaryExpr('+', Var('base', '36'), Var('p', '37'), '38'), Number(8), '40')), Update(ElemSlice(Var('result', '42'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '43'), '44'), Number(1), '45'), Number(8), '47'), ElemSlice(Var('operand2', '49'), BinaryExpr('+', Var('base', '50'), Var('p', '51'), '52'), Number(8), '54'))], 1, '56'), Update(VReg(Var('d', '58'), '59'), Var('result', '60'))], rettype='uint8x16_t', ret_is_signed=False, inst_form='ZIP2 Vd.16B,Vn.16B,Vm.16B', extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'esize': 8, 'datasize': 128, 'elements': 16, 'part': 1, 'pairs': 8}, belongs_to='aarch64_vector_transfer_vector_permute_zip'),
    'vzip_s16': ARMSema(intrin='vzip_s16', inst='ZIP1 ZIP2', params=[Parameter(name='a', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int16x4_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '17'), '18')], ('bits', Number(128)), '19'), For(Var('p', '46'), Number(0), Number(3), [Update(ElemSlice(Var('result', '23'), BinaryExpr('*', Number(2), Var('p', '24'), '25'), Number(16), '28'), ElemSlice(Var('operand1', '30'), Var('p', '31'), Number(16), '33')), Update(ElemSlice(Var('result', '35'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '36'), '37'), Number(1), '38'), Number(16), '40'), ElemSlice(Var('operand2', '42'), Var('p', '43'), Number(16), '45'))], 1, '47'), Update(VReg(Var('d', '49'), '50'), Var('result', '51'))], rettype='int16x4x2_t', ret_is_signed=True, inst_form=None, extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'datasize': 64, 'esize': 16, 'pairs': 4}, belongs_to='get_handcrafted'),
    'vzip_s32': ARMSema(intrin='vzip_s32', inst='ZIP1 ZIP2', params=[Parameter(name='a', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int32x2_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '17'), '18')], ('bits', Number(128)), '19'), For(Var('p', '46'), Number(0), Number(1), [Update(ElemSlice(Var('result', '23'), BinaryExpr('*', Number(2), Var('p', '24'), '25'), Number(32), '28'), ElemSlice(Var('operand1', '30'), Var('p', '31'), Number(32), '33')), Update(ElemSlice(Var('result', '35'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '36'), '37'), Number(1), '38'), Number(32), '40'), ElemSlice(Var('operand2', '42'), Var('p', '43'), Number(32), '45'))], 1, '47'), Update(VReg(Var('d', '49'), '50'), Var('result', '51'))], rettype='int32x2x2_t', ret_is_signed=True, inst_form=None, extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'datasize': 64, 'esize': 32, 'pairs': 2}, belongs_to='get_handcrafted'),
    'vzip_s8': ARMSema(intrin='vzip_s8', inst='ZIP1 ZIP2', params=[Parameter(name='a', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False), Parameter(name='b', type='int8x8_t', is_signed=True, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '17'), '18')], ('bits', Number(128)), '19'), For(Var('p', '46'), Number(0), Number(7), [Update(ElemSlice(Var('result', '23'), BinaryExpr('*', Number(2), Var('p', '24'), '25'), Number(8), '28'), ElemSlice(Var('operand1', '30'), Var('p', '31'), Number(8), '33')), Update(ElemSlice(Var('result', '35'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '36'), '37'), Number(1), '38'), Number(8), '40'), ElemSlice(Var('operand2', '42'), Var('p', '43'), Number(8), '45'))], 1, '47'), Update(VReg(Var('d', '49'), '50'), Var('result', '51'))], rettype='int8x8x2_t', ret_is_signed=True, inst_form=None, extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'datasize': 64, 'esize': 8, 'pairs': 8}, belongs_to='get_handcrafted'),
    'vzip_u16': ARMSema(intrin='vzip_u16', inst='ZIP1 ZIP2', params=[Parameter(name='a', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint16x4_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '17'), '18')], ('bits', Number(128)), '19'), For(Var('p', '46'), Number(0), Number(3), [Update(ElemSlice(Var('result', '23'), BinaryExpr('*', Number(2), Var('p', '24'), '25'), Number(16), '28'), ElemSlice(Var('operand1', '30'), Var('p', '31'), Number(16), '33')), Update(ElemSlice(Var('result', '35'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '36'), '37'), Number(1), '38'), Number(16), '40'), ElemSlice(Var('operand2', '42'), Var('p', '43'), Number(16), '45'))], 1, '47'), Update(VReg(Var('d', '49'), '50'), Var('result', '51'))], rettype='uint16x4x2_t', ret_is_signed=False, inst_form=None, extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'datasize': 64, 'esize': 16, 'pairs': 4}, belongs_to='get_handcrafted'),
    'vzip_u32': ARMSema(intrin='vzip_u32', inst='ZIP1 ZIP2', params=[Parameter(name='a', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint32x2_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '17'), '18')], ('bits', Number(128)), '19'), For(Var('p', '46'), Number(0), Number(1), [Update(ElemSlice(Var('result', '23'), BinaryExpr('*', Number(2), Var('p', '24'), '25'), Number(32), '28'), ElemSlice(Var('operand1', '30'), Var('p', '31'), Number(32), '33')), Update(ElemSlice(Var('result', '35'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '36'), '37'), Number(1), '38'), Number(32), '40'), ElemSlice(Var('operand2', '42'), Var('p', '43'), Number(32), '45'))], 1, '47'), Update(VReg(Var('d', '49'), '50'), Var('result', '51'))], rettype='uint32x2x2_t', ret_is_signed=False, inst_form=None, extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'datasize': 64, 'esize': 32, 'pairs': 2}, belongs_to='get_handcrafted'),
    'vzip_u8': ARMSema(intrin='vzip_u8', inst='ZIP1 ZIP2', params=[Parameter(name='a', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False), Parameter(name='b', type='uint8x8_t', is_signed=False, is_imm=False, is_mask=False)], spec=[VarsDecl([VarDeclInit(Var('operand1', '5'), VReg(Var('n', '3'), '4'), '6')], ('bits', Number(64)), '7'), VarsDecl([VarDeclInit(Var('operand2', '12'), VReg(Var('m', '10'), '11'), '13')], ('bits', Number(64)), '14'), VarsDecl([VarDeclUndef(Var('result', '17'), '18')], ('bits', Number(128)), '19'), For(Var('p', '46'), Number(0), Number(7), [Update(ElemSlice(Var('result', '23'), BinaryExpr('*', Number(2), Var('p', '24'), '25'), Number(8), '28'), ElemSlice(Var('operand1', '30'), Var('p', '31'), Number(8), '33')), Update(ElemSlice(Var('result', '35'), BinaryExpr('+', BinaryExpr('*', Number(2), Var('p', '36'), '37'), Number(1), '38'), Number(8), '40'), ElemSlice(Var('operand2', '42'), Var('p', '43'), Number(8), '45'))], 1, '47'), Update(VReg(Var('d', '49'), '50'), Var('result', '51'))], rettype='uint8x8x2_t', ret_is_signed=False, inst_form=None, extensions=None, imm_width=None, xed=None, elem_type=None, preparation={'d': 'returnVal', 'n': 'a', 'm': 'b'}, resolving={'datasize': 64, 'esize': 8, 'pairs': 8}, belongs_to='get_handcrafted')}