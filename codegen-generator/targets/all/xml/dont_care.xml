<intrinsic tech="SSE" name="_MM_GET_EXCEPTION_MASK">
	<CPUID>SSE</CPUID>
	<category>General Support</category>
	<return type="unsigned int" varname="dst" etype="UI32"/>
	<description>Macro: Get the exception mask bits from the MXCSR control and status register. The exception mask may contain any of the following flags: _MM_MASK_INVALID, _MM_MASK_DIV_ZERO, _MM_MASK_DENORM, _MM_MASK_OVERFLOW, _MM_MASK_UNDERFLOW, _MM_MASK_INEXACT</description>
	<operation>dst[31:0] := MXCSR &amp; _MM_MASK_MASK
	</operation>
	<header>xmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE" name="_MM_SET_EXCEPTION_MASK">
	<CPUID>SSE</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="unsigned int" varname="a" etype="UI32"/>
	<description>Macro: Set the exception mask bits of the MXCSR control and status register to the value in unsigned 32-bit integer "a". The exception mask may contain any of the following flags: _MM_MASK_INVALID, _MM_MASK_DIV_ZERO, _MM_MASK_DENORM, _MM_MASK_OVERFLOW, _MM_MASK_UNDERFLOW, _MM_MASK_INEXACT</description>
	<operation>MXCSR := a[31:0] AND ~_MM_MASK_MASK
	</operation>
	<header>xmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE" name="_MM_GET_ROUNDING_MODE">
	<CPUID>SSE</CPUID>
	<category>General Support</category>
	<return type="unsigned int" varname="dst" etype="UI32"/>
	<description>Macro: Get the rounding mode bits from the MXCSR control and status register. The rounding mode may contain any of the following flags: _MM_ROUND_NEAREST, _MM_ROUND_DOWN, _MM_ROUND_UP, _MM_ROUND_TOWARD_ZERO</description>
	<operation>dst[31:0] := MXCSR &amp; _MM_ROUND_MASK
	</operation>
	<header>xmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE" name="_MM_SET_ROUNDING_MODE">
	<CPUID>SSE</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="unsigned int" varname="a" etype="UI32"/>
	<description>Macro: Set the rounding mode bits of the MXCSR control and status register to the value in unsigned 32-bit integer "a". The rounding mode may contain any of the following flags: _MM_ROUND_NEAREST, _MM_ROUND_DOWN, _MM_ROUND_UP, _MM_ROUND_TOWARD_ZERO</description>
	<operation>MXCSR := a[31:0] AND ~_MM_ROUND_MASK
	</operation>
	<header>xmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE" name="_MM_SET_EXCEPTION_STATE">
	<CPUID>SSE</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="unsigned int" varname="a" etype="UI32"/>
	<description>Macro: Set the exception state bits of the MXCSR control and status register to the value in unsigned 32-bit integer "a". The exception state may contain any of the following flags: _MM_EXCEPT_INVALID, _MM_EXCEPT_DIV_ZERO, _MM_EXCEPT_DENORM, _MM_EXCEPT_OVERFLOW, _MM_EXCEPT_UNDERFLOW, _MM_EXCEPT_INEXACT</description>
	<operation>MXCSR := a[31:0] AND ~_MM_EXCEPT_MASK
	</operation>
	<header>xmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE" name="_MM_GET_FLUSH_ZERO_MODE">
	<CPUID>SSE</CPUID>
	<category>General Support</category>
	<return type="unsigned int" varname="dst" etype="UI32"/>
	<description>Macro: Get the flush zero bits from the MXCSR control and status register. The flush zero may contain any of the following flags: _MM_FLUSH_ZERO_ON or _MM_FLUSH_ZERO_OFF</description>
	<operation>dst[31:0] := MXCSR &amp; _MM_FLUSH_MASK
	</operation>
	<header>xmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE" name="_MM_SET_FLUSH_ZERO_MODE">
	<CPUID>SSE</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="unsigned int" varname="a" etype="UI32"/>
	<description>Macro: Set the flush zero bits of the MXCSR control and status register to the value in unsigned 32-bit integer "a". The flush zero may contain any of the following flags: _MM_FLUSH_ZERO_ON or _MM_FLUSH_ZERO_OFF</description>
	<operation>MXCSR := a[31:0] AND ~_MM_FLUSH_MASK
	</operation>
	<header>xmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE" name="_mm_setcsr">
	<CPUID>SSE</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="unsigned int" varname="a" etype="UI32"/>
	<description>Set the MXCSR control and status register with the value in unsigned 32-bit integer "a".</description>
	<operation>
MXCSR := a[31:0]
	</operation>
	<instruction name="LDMXCSR" form="m32" xed="LDMXCSR_MEMd"/>
	<header>xmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE" name="_MM_GET_EXCEPTION_STATE">
	<CPUID>SSE</CPUID>
	<category>General Support</category>
	<return type="unsigned int" varname="dst" etype="UI32"/>
	<description>Macro: Get the exception state bits from the MXCSR control and status register. The exception state may contain any of the following flags: _MM_EXCEPT_INVALID, _MM_EXCEPT_DIV_ZERO, _MM_EXCEPT_DENORM, _MM_EXCEPT_OVERFLOW, _MM_EXCEPT_UNDERFLOW, _MM_EXCEPT_INEXACT</description>
	<operation>dst[31:0] := MXCSR &amp; _MM_EXCEPT_MASK
	</operation>
	<header>xmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE" name="_mm_getcsr">
	<CPUID>SSE</CPUID>
	<category>General Support</category>
	<return type="unsigned int" varname="dst" etype="UI32"/>
	<parameter type="void"/>
	<description>Get the unsigned 32-bit value of the MXCSR control and status register.</description>
	<operation>dst[31:0] := MXCSR
	</operation>
	<instruction name="STMXCSR" form="m32" xed="STMXCSR_MEMd"/>
	<header>xmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE" name="_mm_prefetch">
	<CPUID>SSE</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="char const*" varname="p" etype="UI8"/>
	<parameter type="int" varname="i" etype="IMM" immwidth="2"/>
	<description>Fetch the line of data from memory that contains address "p" to a location in the cache heirarchy specified by the locality hint "i".</description>
	<instruction name="PREFETCHNTA" form="m8" xed="PREFETCHNTA_MEMmprefetch"/>
	<instruction name="PREFETCHT0" form="m8" xed="PREFETCHT0_MEMmprefetch"/>
	<instruction name="PREFETCHT1" form="m8" xed="PREFETCHT1_MEMmprefetch"/>
	<instruction name="PREFETCHT2" form="m8" xed="PREFETCHT2_MEMmprefetch"/>
	<header>xmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE" name="_mm_sfence">
	<CPUID>SSE</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="void"/>
	<description>Perform a serializing operation on all store-to-memory instructions that were issued prior to this instruction. Guarantees that every store instruction that precedes, in program order, is globally visible before any store instruction which follows the fence in program order.</description>
	<instruction name="SFENCE" xed="SFENCE"/>
	<header>xmmintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_xrstors64">
	<CPUID>XSAVE</CPUID>
	<CPUID>XSS</CPUID>
	<category>OS-Targeted</category>
	<return type="void"/>
	<parameter type="const void *" varname="mem_addr"/>
	<parameter type="unsigned __int64" varname="rs_mask" etype="UI64"/>
	<description>Perform a full or partial restore of the enabled processor states using the state information stored in memory at "mem_addr". xrstors differs from xrstor in that it can restore state components corresponding to bits set in the IA32_XSS MSR; xrstors cannot restore from an xsave area in which the extended region is in the standard form. State is restored based on bits [62:0] in "rs_mask", "XCR0", and "mem_addr.HEADER.XSTATE_BV". "mem_addr" must be aligned on a 64-byte boundary.</description>
	<operation>st_mask := mem_addr.HEADER.XSTATE_BV[62:0]
FOR i := 0 to 62
	IF (rs_mask[i] AND XCR0[i])
		IF st_mask[i]
			CASE (i) OF
			0: ProcessorState[x87_FPU] := mem_addr.FPUSSESave_Area[FPU]
			1: ProcessorState[SSE] := mem_addr.FPUSSESaveArea[SSE]
			DEFAULT: ProcessorState[i] := mem_addr.Ext_Save_Area[i]
			ESAC
		ELSE
			// ProcessorExtendedState := Processor Supplied Values
			CASE (i) OF
			1: MXCSR := mem_addr.FPUSSESave_Area[SSE]
			ESAC
		FI
	FI
	i := i + 1
ENDFOR
	</operation>
	<instruction name="XRSTORS64" form="m8" xed="XRSTORS64_MEMmxsave"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_xrstors">
	<CPUID>XSAVE</CPUID>
	<CPUID>XSS</CPUID>
	<category>OS-Targeted</category>
	<return type="void"/>
	<parameter type="const void *" varname="mem_addr"/>
	<parameter type="unsigned __int64" varname="rs_mask" etype="UI64"/>
	<description>Perform a full or partial restore of the enabled processor states using the state information stored in memory at "mem_addr". xrstors differs from xrstor in that it can restore state components corresponding to bits set in the IA32_XSS MSR; xrstors cannot restore from an xsave area in which the extended region is in the standard form. State is restored based on bits [62:0] in "rs_mask", "XCR0", and "mem_addr.HEADER.XSTATE_BV". "mem_addr" must be aligned on a 64-byte boundary.</description>
	<operation>st_mask := mem_addr.HEADER.XSTATE_BV[62:0]
FOR i := 0 to 62
	IF (rs_mask[i] AND XCR0[i])
		IF st_mask[i]
			CASE (i) OF
			0: ProcessorState[x87_FPU] := mem_addr.FPUSSESave_Area[FPU]
			1: ProcessorState[SSE] := mem_addr.FPUSSESaveArea[SSE]
			DEFAULT: ProcessorState[i] := mem_addr.Ext_Save_Area[i]
			ESAC
		ELSE
			// ProcessorExtendedState := Processor Supplied Values
			CASE (i) OF
			1: MXCSR := mem_addr.FPUSSESave_Area[SSE]
			ESAC
		FI
	FI
	i := i + 1
ENDFOR
	</operation>
	<instruction name="XRSTORS" form="m8" xed="XRSTORS_MEMmxsave"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_xsaves64">
	<CPUID>XSAVE</CPUID>
	<CPUID>XSS</CPUID>
	<category>OS-Targeted</category>
	<return type="void"/>
	<parameter type="void *" varname="mem_addr"/>
	<parameter type="unsigned __int64" varname="save_mask" etype="UI64"/>
	<description>Perform a full or partial save of the enabled processor states to memory at "mem_addr"; xsaves differs from xsave in that it can save state components corresponding to bits set in IA32_XSS MSR and that it may use the modified optimization. State is saved based on bits [62:0] in "save_mask" and "XCR0". "mem_addr" must be aligned on a 64-byte boundary.</description>
	<operation>mask[62:0] := save_mask[62:0] AND XCR0[62:0]
FOR i := 0 to 62
	IF mask[i]
		CASE (i) OF
		0: mem_addr.FPUSSESave_Area[FPU] := ProcessorState[x87_FPU]
		1: mem_addr.FPUSSESaveArea[SSE] := ProcessorState[SSE]
		DEFAULT: mem_addr.Ext_Save_Area[i] := ProcessorState[i]
		ESAC
		mem_addr.HEADER.XSTATE_BV[i] := INIT_FUNCTION[i]
	FI
	i := i + 1
ENDFOR
	</operation>
	<instruction name="XSAVEC64" form="m8" xed="XSAVEC64_MEMmxsave"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_xsavec64">
	<CPUID>XSAVE</CPUID>
	<CPUID>XSAVEC</CPUID>
	<category>OS-Targeted</category>
	<return type="void"/>
	<parameter type="void *" varname="mem_addr"/>
	<parameter type="unsigned __int64" varname="save_mask" etype="UI64"/>
	<description>Perform a full or partial save of the enabled processor states to memory at "mem_addr"; xsavec differs from xsave in that it uses compaction and that it may use init optimization. State is saved based on bits [62:0] in "save_mask" and "XCR0". "mem_addr" must be aligned on a 64-byte boundary.</description>
	<operation>mask[62:0] := save_mask[62:0] AND XCR0[62:0]
FOR i := 0 to 62
	IF mask[i]
		CASE (i) OF
		0: mem_addr.FPUSSESave_Area[FPU] := ProcessorState[x87_FPU]
		1: mem_addr.FPUSSESaveArea[SSE] := ProcessorState[SSE]
		DEFAULT: mem_addr.Ext_Save_Area[i] := ProcessorState[i]
		ESAC
		mem_addr.HEADER.XSTATE_BV[i] := INIT_FUNCTION[i]
	FI
	i := i + 1
ENDFOR
	</operation>
	<instruction name="XSAVEC64" form="m8" xed="XSAVEC64_MEMmxsave"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_xsaves">
	<CPUID>XSAVE</CPUID>
	<CPUID>XSS</CPUID>
	<category>OS-Targeted</category>
	<return type="void"/>
	<parameter type="void *" varname="mem_addr"/>
	<parameter type="unsigned __int64" varname="save_mask" etype="UI64"/>
	<description>Perform a full or partial save of the enabled processor states to memory at "mem_addr"; xsaves differs from xsave in that it can save state components corresponding to bits set in IA32_XSS MSR and that it may use the modified optimization. State is saved based on bits [62:0] in "save_mask" and "XCR0". "mem_addr" must be aligned on a 64-byte boundary.</description>
	<operation>mask[62:0] := save_mask[62:0] AND XCR0[62:0]
FOR i := 0 to 62
	IF mask[i]
		CASE (i) OF
		0: mem_addr.FPUSSESave_Area[FPU] := ProcessorState[x87_FPU]
		1: mem_addr.FPUSSESaveArea[SSE] := ProcessorState[SSE]
		DEFAULT: mem_addr.Ext_Save_Area[i] := ProcessorState[i]
		ESAC
		mem_addr.HEADER.XSTATE_BV[i] := INIT_FUNCTION[i]
	FI
	i := i + 1
ENDFOR
	</operation>
	<instruction name="XSAVES" form="m8" xed="XSAVES_MEMmxsave"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_xsavec">
	<CPUID>XSAVE</CPUID>
	<CPUID>XSAVEC</CPUID>
	<category>OS-Targeted</category>
	<return type="void"/>
	<parameter type="void *" varname="mem_addr"/>
	<parameter type="unsigned __int64" varname="save_mask" etype="UI64"/>
	<description>Perform a full or partial save of the enabled processor states to memory at "mem_addr"; xsavec differs from xsave in that it uses compaction and that it may use init optimization. State is saved based on bits [62:0] in "save_mask" and "XCR0". "mem_addr" must be aligned on a 64-byte boundary.</description>
	<operation>mask[62:0] := save_mask[62:0] AND XCR0[62:0]
FOR i := 0 to 62
	IF mask[i]
		CASE (i) OF
		0: mem_addr.FPUSSESave_Area[FPU] := ProcessorState[x87_FPU]
		1: mem_addr.FPUSSESaveArea[SSE] := ProcessorState[SSE]
		DEFAULT: mem_addr.Ext_Save_Area[i] := ProcessorState[i]
		ESAC
		mem_addr.HEADER.XSTATE_BV[i] := INIT_FUNCTION[i]
	FI
	i := i + 1
ENDFOR
	</operation>
	<instruction name="XSAVEC" form="m8" xed="XSAVEC_MEMmxsave"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_xsetbv">
	<CPUID>XSAVE</CPUID>
	<category>OS-Targeted</category>
	<return type="void"/>
	<parameter type="unsigned int" varname="a" etype="UI32"/>
	<parameter type="unsigned __int64" varname="val" etype="UI64"/>
	<description>Copy 64-bits from "val" to the extended control register (XCR) specified by "a". Currently only XFEATURE_ENABLED_MASK XCR is supported.</description>
	<operation>
XCR[a] := val[63:0]
	</operation>
	<instruction name="XSETBV" xed="XSETBV"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_xsaveopt64">
	<CPUID>XSAVE</CPUID>
	<CPUID>XSAVEOPT</CPUID>
	<category>OS-Targeted</category>
	<return type="void"/>
	<parameter type="void *" varname="mem_addr"/>
	<parameter type="unsigned __int64" varname="save_mask" etype="UI64"/>
	<description>Perform a full or partial save of the enabled processor states to memory at "mem_addr". State is saved based on bits [62:0] in "save_mask" and "XCR0". "mem_addr" must be aligned on a 64-byte boundary. The hardware may optimize the manner in which data is saved. The performance of this instruction will be equal to or better than using the XSAVE64 instruction.</description>
	<operation>mask[62:0] := save_mask[62:0] AND XCR0[62:0]
FOR i := 0 to 62
	IF mask[i]
		CASE (i) OF
		0: mem_addr.FPUSSESave_Area[FPU] := ProcessorState[x87_FPU]
		1: mem_addr.FPUSSESaveArea[SSE] := ProcessorState[SSE]
		2: mem_addr.EXT_SAVE_Area2[YMM] := ProcessorState[YMM]
		DEFAULT: mem_addr.Ext_Save_Area[i] := ProcessorState[i]
		ESAC
		mem_addr.HEADER.XSTATE_BV[i] := INIT_FUNCTION[i]
	FI
	i := i + 1
ENDFOR
	</operation>
	<instruction name="XSAVEOPT64" form="m8" xed="XSAVEOPT64_MEMmxsave"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_xsaveopt">
	<CPUID>XSAVE</CPUID>
	<CPUID>XSAVEOPT</CPUID>
	<category>OS-Targeted</category>
	<return type="void"/>
	<parameter type="void *" varname="mem_addr"/>
	<parameter type="unsigned __int64" varname="save_mask" etype="UI64"/>
	<description>Perform a full or partial save of the enabled processor states to memory at "mem_addr". State is saved based on bits [62:0] in "save_mask" and "XCR0". "mem_addr" must be aligned on a 64-byte boundary. The hardware may optimize the manner in which data is saved. The performance of this instruction will be equal to or better than using the XSAVE instruction.</description>
	<operation>mask[62:0] := save_mask[62:0] AND XCR0[62:0]
FOR i := 0 to 62
	IF mask[i]
		CASE (i) OF
		0: mem_addr.FPUSSESave_Area[FPU] := ProcessorState[x87_FPU]
		1: mem_addr.FPUSSESaveArea[SSE] := ProcessorState[SSE]
		2: mem_addr.EXT_SAVE_Area2[YMM] := ProcessorState[YMM]
		DEFAULT: mem_addr.Ext_Save_Area[i] := ProcessorState[i]
		ESAC
		mem_addr.HEADER.XSTATE_BV[i] := INIT_FUNCTION[i]
	FI
	i := i + 1
ENDFOR
	</operation>
	<instruction name="XSAVEOPT" form="m8" xed="XSAVEOPT_MEMmxsave"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_xsave64">
	<CPUID>XSAVE</CPUID>
	<category>OS-Targeted</category>
	<return type="void"/>
	<parameter type="void *" varname="mem_addr"/>
	<parameter type="unsigned __int64" varname="save_mask" etype="UI64"/>
	<description>Perform a full or partial save of the enabled processor states to memory at "mem_addr". State is saved based on bits [62:0] in "save_mask" and "XCR0". "mem_addr" must be aligned on a 64-byte boundary.</description>
	<operation>mask[62:0] := save_mask[62:0] AND XCR0[62:0]
FOR i := 0 to 62
	IF mask[i]
		CASE (i) OF
		0: mem_addr.FPUSSESave_Area[FPU] := ProcessorState[x87_FPU]
		1: mem_addr.FPUSSESaveArea[SSE] := ProcessorState[SSE]
		DEFAULT: mem_addr.Ext_Save_Area[i] := ProcessorState[i]
		ESAC
		mem_addr.HEADER.XSTATE_BV[i] := INIT_FUNCTION[i]
	FI
	i := i + 1
ENDFOR
	</operation>
	<instruction name="XSAVE64" form="m8" xed="XSAVE64_MEMmxsave"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_xsave">
	<CPUID>XSAVE</CPUID>
	<category>OS-Targeted</category>
	<return type="void"/>
	<parameter type="void *" varname="mem_addr"/>
	<parameter type="unsigned __int64" varname="save_mask" etype="UI64"/>
	<description>Perform a full or partial save of the enabled processor states to memory at "mem_addr". State is saved based on bits [62:0] in "save_mask" and "XCR0". "mem_addr" must be aligned on a 64-byte boundary.</description>
	<operation>mask[62:0] := save_mask[62:0] AND XCR0[62:0]
FOR i := 0 to 62
	IF mask[i]
		CASE (i) OF
		0: mem_addr.FPUSSESave_Area[FPU] := ProcessorState[x87_FPU]
		1: mem_addr.FPUSSESaveArea[SSE] := ProcessorState[SSE]
		DEFAULT: mem_addr.Ext_Save_Area[i] := ProcessorState[i]
		ESAC
		mem_addr.HEADER.XSTATE_BV[i] := INIT_FUNCTION[i]
	FI
	i := i + 1
ENDFOR
	</operation>
	<instruction name="XSAVE" form="m8" xed="XSAVE_MEMmxsave"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_xrstor64">
	<CPUID>XSAVE</CPUID>
	<category>OS-Targeted</category>
	<return type="void"/>
	<parameter type="void *" varname="mem_addr"/>
	<parameter type="unsigned __int64" varname="rs_mask" etype="UI64"/>
	<description>Perform a full or partial restore of the enabled processor states using the state information stored in memory at "mem_addr". State is restored based on bits [62:0] in "rs_mask", "XCR0", and "mem_addr.HEADER.XSTATE_BV". "mem_addr" must be aligned on a 64-byte boundary.</description>
	<operation>st_mask := mem_addr.HEADER.XSTATE_BV[62:0]
FOR i := 0 to 62
	IF (rs_mask[i] AND XCR0[i])
		IF st_mask[i]
			CASE (i) OF
			0: ProcessorState[x87_FPU] := mem_addr.FPUSSESave_Area[FPU]
			1: ProcessorState[SSE] := mem_addr.FPUSSESaveArea[SSE]
			DEFAULT: ProcessorState[i] := mem_addr.Ext_Save_Area[i]
			ESAC
		ELSE
			// ProcessorExtendedState := Processor Supplied Values
			CASE (i) OF
			1: MXCSR := mem_addr.FPUSSESave_Area[SSE]
			ESAC
		FI
	FI
	i := i + 1
ENDFOR
	</operation>
	<instruction name="XRSTOR64" form="m8" xed="XRSTOR64_MEMmxsave"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_xrstor">
	<CPUID>XSAVE</CPUID>
	<category>OS-Targeted</category>
	<return type="void"/>
	<parameter type="void *" varname="mem_addr"/>
	<parameter type="unsigned __int64" varname="rs_mask" etype="UI64"/>
	<description>Perform a full or partial restore of the enabled processor states using the state information stored in memory at "mem_addr". State is restored based on bits [62:0] in "rs_mask", "XCR0", and "mem_addr.HEADER.XSTATE_BV". "mem_addr" must be aligned on a 64-byte boundary.</description>
	<operation>st_mask := mem_addr.HEADER.XSTATE_BV[62:0]
FOR i := 0 to 62
	IF (rs_mask[i] AND XCR0[i])
		IF st_mask[i]
			CASE (i) OF
			0: ProcessorState[x87_FPU] := mem_addr.FPUSSESave_Area[FPU]
			1: ProcessorState[SSE] := mem_addr.FPUSSESaveArea[SSE]
			DEFAULT: ProcessorState[i] := mem_addr.Ext_Save_Area[i]
			ESAC
		ELSE
			// ProcessorExtendedState := Processor Supplied Values
			CASE (i) OF
			1: MXCSR := mem_addr.FPUSSESave_Area[SSE]
			ESAC
		FI
	FI
	i := i + 1
ENDFOR
	</operation>
	<instruction name="XRSTOR" form="m8" xed="XRSTOR_MEMmxsave"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_wbnoinvd">
	<CPUID>WBNOINVD</CPUID>
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="void"/>
	<description>Write back and do not flush internal caches.
		Initiate writing-back without flushing of external
		caches.</description>
	<instruction name="WBNOINVD" xed="WBNOINVD"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_xgetbv">
	<CPUID>XSAVE</CPUID>
	<category>OS-Targeted</category>
	<return type="unsigned __int64" varname="dst" etype="UI64"/>
	<parameter type="unsigned int" varname="a" etype="UI32"/>
	<description>Copy up to 64-bits from the value of the extended control register (XCR) specified by "a" into "dst". Currently only XFEATURE_ENABLED_MASK XCR is supported.</description>
	<operation>dst[63:0] := XCR[a]
	</operation>
	<instruction name="XGETBV" xed="XGETBV"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_tpause">
	<type>Flag</type>
	<CPUID>WAITPKG</CPUID>
	<category>Miscellaneous</category>
	<return type="unsigned char" varname="dst" etype="UI8"/>
	<parameter type="unsigned int" varname="ctrl" etype="UI32"/>
	<parameter type="unsigned __int64" varname="counter" etype="UI64"/>
	<description>Directs the processor to enter an implementation-dependent optimized state until the TSC reaches or exceeds the value specified in "counter". Bit 0 of "ctrl" selects between a lower power (cleared) or faster wakeup (set) optimized state. Returns the carry flag (CF).</description>
	<instruction name="TPAUSE" form="r32" xed="TPAUSE_GPR32u32"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_umwait">
	<type>Flag</type>
	<CPUID>WAITPKG</CPUID>
	<category>Miscellaneous</category>
	<return type="unsigned char" varname="dst" etype="UI8"/>
	<parameter type="unsigned int" varname="ctrl" etype="UI32"/>
	<parameter type="unsigned __int64" varname="counter" etype="UI64"/>
	<description>Directs the processor to enter an implementation-dependent optimized state while monitoring a range of addresses. The instruction wakes up when the TSC reaches or exceeds the value specified in "counter" (if the monitoring hardware did not trigger beforehand). Bit 0 of "ctrl" selects between a lower power (cleared) or faster wakeup (set) optimized state. Returns the carry flag (CF).</description>
	<instruction name="UMWAIT" form="r32" xed="UMWAIT_GPR32"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_umonitor">
	<CPUID>WAITPKG</CPUID>
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="void*" varname="a"/>
	<description>Sets up a linear address range to be
		monitored by hardware and activates the
		monitor. The address range should be a writeback
		memory caching type. The address is
		contained in "a".</description>
	<instruction name="UMONITOR" form="r16/r32/r64" xed="UMONITOR_GPRa"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="SSE2" sequence="TRUE" name="_mm_setr_epi8">
	<type>Integer</type>
	<CPUID>SSE2</CPUID>
	<category>Set</category>
	<return type="__m128i" varname="dst" etype="UI8"/>
	<parameter type="char" varname="e15" etype="UI8"/>
	<parameter type="char" varname="e14" etype="UI8"/>
	<parameter type="char" varname="e13" etype="UI8"/>
	<parameter type="char" varname="e12" etype="UI8"/>
	<parameter type="char" varname="e11" etype="UI8"/>
	<parameter type="char" varname="e10" etype="UI8"/>
	<parameter type="char" varname="e9" etype="UI8"/>
	<parameter type="char" varname="e8" etype="UI8"/>
	<parameter type="char" varname="e7" etype="UI8"/>
	<parameter type="char" varname="e6" etype="UI8"/>
	<parameter type="char" varname="e5" etype="UI8"/>
	<parameter type="char" varname="e4" etype="UI8"/>
	<parameter type="char" varname="e3" etype="UI8"/>
	<parameter type="char" varname="e2" etype="UI8"/>
	<parameter type="char" varname="e1" etype="UI8"/>
	<parameter type="char" varname="e0" etype="UI8"/>
	<description>Set packed 8-bit integers in "dst" with the supplied values in reverse order.</description>
	<operation>
dst[7:0] := e15
dst[15:8] := e14
dst[23:16] := e13
dst[31:24] := e12
dst[39:32] := e11
dst[47:40] := e10
dst[55:48] := e9
dst[63:56] := e8
dst[71:64] := e7
dst[79:72] := e6
dst[87:80] := e5
dst[95:88] := e4
dst[103:96] := e3
dst[111:104] := e2
dst[119:112] := e1
dst[127:120] := e0
	</operation>
	<header>emmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE2" sequence="TRUE" name="_mm_setr_epi16">
	<type>Integer</type>
	<CPUID>SSE2</CPUID>
	<category>Set</category>
	<return type="__m128i" varname="dst" etype="UI16"/>
	<parameter type="short" varname="e7" etype="UI16"/>
	<parameter type="short" varname="e6" etype="UI16"/>
	<parameter type="short" varname="e5" etype="UI16"/>
	<parameter type="short" varname="e4" etype="UI16"/>
	<parameter type="short" varname="e3" etype="UI16"/>
	<parameter type="short" varname="e2" etype="UI16"/>
	<parameter type="short" varname="e1" etype="UI16"/>
	<parameter type="short" varname="e0" etype="UI16"/>
	<description>Set packed 16-bit integers in "dst" with the supplied values in reverse order.</description>
	<operation>
dst[15:0] := e7
dst[31:16] := e6
dst[47:32] := e5
dst[63:48] := e4
dst[79:64] := e3
dst[95:80] := e2
dst[111:96] := e1
dst[127:112] := e0
	</operation>
	<header>emmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE2" sequence="TRUE" name="_mm_setr_epi32">
	<type>Integer</type>
	<CPUID>SSE2</CPUID>
	<category>Set</category>
	<return type="__m128i" varname="dst" etype="UI32"/>
	<parameter type="int" varname="e3" etype="UI32"/>
	<parameter type="int" varname="e2" etype="UI32"/>
	<parameter type="int" varname="e1" etype="UI32"/>
	<parameter type="int" varname="e0" etype="UI32"/>
	<description>Set packed 32-bit integers in "dst" with the supplied values in reverse order.</description>
	<operation>
dst[31:0] := e3
dst[63:32] := e2
dst[95:64] := e1
dst[127:96] := e0
	</operation>
	<header>emmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE2" sequence="TRUE" name="_mm_setr_epi64">
	<type>Integer</type>
	<CPUID>SSE2</CPUID>
	<category>Set</category>
	<return type="__m128i" varname="dst" etype="UI64"/>
	<parameter type="__m64" varname="e1" etype="UI64"/>
	<parameter type="__m64" varname="e0" etype="UI64"/>
	<description>Set packed 64-bit integers in "dst" with the supplied values in reverse order.</description>
	<operation>
dst[63:0] := e1
dst[127:64] := e0
	</operation>
	<header>emmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE2" sequence="TRUE" name="_mm_set_epi8">
	<type>Integer</type>
	<CPUID>SSE2</CPUID>
	<category>Set</category>
	<return type="__m128i" varname="dst" etype="UI8"/>
	<parameter type="char" varname="e15" etype="UI8"/>
	<parameter type="char" varname="e14" etype="UI8"/>
	<parameter type="char" varname="e13" etype="UI8"/>
	<parameter type="char" varname="e12" etype="UI8"/>
	<parameter type="char" varname="e11" etype="UI8"/>
	<parameter type="char" varname="e10" etype="UI8"/>
	<parameter type="char" varname="e9" etype="UI8"/>
	<parameter type="char" varname="e8" etype="UI8"/>
	<parameter type="char" varname="e7" etype="UI8"/>
	<parameter type="char" varname="e6" etype="UI8"/>
	<parameter type="char" varname="e5" etype="UI8"/>
	<parameter type="char" varname="e4" etype="UI8"/>
	<parameter type="char" varname="e3" etype="UI8"/>
	<parameter type="char" varname="e2" etype="UI8"/>
	<parameter type="char" varname="e1" etype="UI8"/>
	<parameter type="char" varname="e0" etype="UI8"/>
	<description>Set packed 8-bit integers in "dst" with the supplied values.</description>
	<operation>
dst[7:0] := e0
dst[15:8] := e1
dst[23:16] := e2
dst[31:24] := e3
dst[39:32] := e4
dst[47:40] := e5
dst[55:48] := e6
dst[63:56] := e7
dst[71:64] := e8
dst[79:72] := e9
dst[87:80] := e10
dst[95:88] := e11
dst[103:96] := e12
dst[111:104] := e13
dst[119:112] := e14
dst[127:120] := e15
	</operation>
	<header>emmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE2" sequence="TRUE" name="_mm_set_epi32">
	<type>Integer</type>
	<CPUID>SSE2</CPUID>
	<category>Set</category>
	<return type="__m128i" varname="dst" etype="UI32"/>
	<parameter type="int" varname="e3" etype="UI32"/>
	<parameter type="int" varname="e2" etype="UI32"/>
	<parameter type="int" varname="e1" etype="UI32"/>
	<parameter type="int" varname="e0" etype="UI32"/>
	<description>Set packed 32-bit integers in "dst" with the supplied values.</description>
	<operation>
dst[31:0] := e0
dst[63:32] := e1
dst[95:64] := e2
dst[127:96] := e3
	</operation>
	<header>emmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE2" sequence="TRUE" name="_mm_set_epi16">
	<type>Integer</type>
	<CPUID>SSE2</CPUID>
	<category>Set</category>
	<return type="__m128i" varname="dst" etype="UI16"/>
	<parameter type="short" varname="e7" etype="UI16"/>
	<parameter type="short" varname="e6" etype="UI16"/>
	<parameter type="short" varname="e5" etype="UI16"/>
	<parameter type="short" varname="e4" etype="UI16"/>
	<parameter type="short" varname="e3" etype="UI16"/>
	<parameter type="short" varname="e2" etype="UI16"/>
	<parameter type="short" varname="e1" etype="UI16"/>
	<parameter type="short" varname="e0" etype="UI16"/>
	<description>Set packed 16-bit integers in "dst" with the supplied values.</description>
	<operation>
dst[15:0] := e0
dst[31:16] := e1
dst[47:32] := e2
dst[63:48] := e3
dst[79:64] := e4
dst[95:80] := e5
dst[111:96] := e6
dst[127:112] := e7
	</operation>
	<header>emmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE2" sequence="TRUE" name="_mm_set_epi64">
	<type>Integer</type>
	<CPUID>SSE2</CPUID>
	<category>Set</category>
	<return type="__m128i" varname="dst" etype="UI64"/>
	<parameter type="__m64" varname="e1" etype="UI64"/>
	<parameter type="__m64" varname="e0" etype="UI64"/>
	<description>Set packed 64-bit integers in "dst" with the supplied values.</description>
	<operation>
dst[63:0] := e0
dst[127:64] := e1
	</operation>
	<header>emmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE2" sequence="TRUE" name="_mm_set_epi64x">
	<type>Integer</type>
	<CPUID>SSE2</CPUID>
	<category>Set</category>
	<return type="__m128i" varname="dst" etype="UI64"/>
	<parameter type="__int64" varname="e1" etype="UI64"/>
	<parameter type="__int64" varname="e0" etype="UI64"/>
	<description>Set packed 64-bit integers in "dst" with the supplied values.</description>
	<operation>
dst[63:0] := e0
dst[127:64] := e1
	</operation>
	<header>emmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE2" name="_mm_lfence">
	<CPUID>SSE2</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="void"/>
	<description>Perform a serializing operation on all load-from-memory instructions that were issued prior to this instruction. Guarantees that every load instruction that precedes, in program order, is globally visible before any load instruction which follows the fence in program order.</description>
	<instruction name="LFENCE" xed="LFENCE"/>
	<header>emmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE2" name="_mm_mfence">
	<CPUID>SSE2</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="void"/>
	<description>Perform a serializing operation on all load-from-memory and store-to-memory instructions that were issued prior to this instruction. Guarantees that every memory access that precedes, in program order, the memory fence instruction is globally visible before any memory instruction which follows the fence in program order.</description>
	<instruction name="MFENCE" xed="MFENCE"/>
	<header>emmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE2" name="_mm_pause">
	<CPUID>SSE2</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="void"/>
	<description>Provide a hint to the processor that the code sequence is a spin-wait loop. This can help improve the performance and power consumption of spin-wait loops.</description>
	<instruction name="PAUSE" xed="PAUSE"/>
	<header>emmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE2" name="_mm_clflush">
	<CPUID>SSE2</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="void const*" varname="p"/>
	<description>Invalidate and flush the cache line that contains "p" from all levels of the cache hierarchy.</description>
	<instruction name="CLFLUSH" form="m8" xed="CLFLUSH_MEMmprefetch"/>
	<header>emmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE" name="_mm_malloc">
	<CPUID>SSE</CPUID>
	<category>General Support</category>
	<return type="void*"/>
	<parameter type="size_t" varname="size" etype="UI64"/>
	<parameter type="size_t" varname="align" etype="UI64"/>
	<description>Allocate "size" bytes of memory, aligned to the alignment specified in "align", and return a pointer to the allocated memory. "_mm_free" should be used to free memory that is allocated with "_mm_malloc".</description>
	<header>xmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE" name="_mm_free">
	<CPUID>SSE</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="void *" varname="mem_addr"/>
	<description>Free aligned memory that was allocated with "_mm_malloc".</description>
	<header>xmmintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_xtest">
	<CPUID>RTM</CPUID>
	<category>General Support</category>
	<return type="unsigned char" varname="dst" etype="UI8"/>
	<parameter type="void"/>
	<description>Query the transactional execution status, return 1 if inside a transactionally executing RTM or HLE region, and return 0 otherwise.</description>
	<operation>IF (RTM_ACTIVE == 1 OR HLE_ACTIVE == 1)
	dst := 1
ELSE
	dst := 0
FI
	</operation>
	<instruction name="XTEST" xed="XTEST"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_serialize">
	<CPUID>SERIALIZE</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<description>Serialize instruction execution, ensuring all modifications to flags, registers, and memory by previous instructions are completed before the next instruction is fetched.</description>
	<instruction name="SERIALIZE" xed="SERIALIZE"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_xend">
	<CPUID>RTM</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="void"/>
	<description>Specify the end of an RTM code region.
	If this corresponds to the outermost scope, the logical processor will attempt to commit the logical processor state atomically. 
	If the commit fails, the logical processor will perform an RTM abort.</description>
	<operation>IF RTM_ACTIVE == 1
	RTM_NEST_COUNT := RTM_NEST_COUNT - 1
	IF RTM_NEST_COUNT == 0
		// try to commit transaction
		IF FAIL_TO_COMMIT_TRANSACTION
			// RTM abort (see _xabort)
		ELSE
			RTM_ACTIVE := 0
		FI
	FI
FI
	</operation>
	<instruction name="XEND" xed="XEND"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_xbegin">
	<CPUID>RTM</CPUID>
	<category>General Support</category>
	<return type="unsigned int" varname="k" etype="UI32"/>
	<parameter type="void"/>
	<description>Specify the start of an RTM code region. 
	If the logical processor was not already in transactional execution, then this call causes the logical processor to transition into transactional execution. 
	On an RTM abort, the logical processor discards all architectural register and memory updates performed during the RTM execution, restores architectural state, and starts execution beginning at the fallback address computed from the outermost XBEGIN instruction. Return status of ~0 (0xFFFF) if continuing inside transaction; all other codes are aborts.</description>
	<operation>IF RTM_NEST_COUNT &lt; MAX_RTM_NEST_COUNT
	RTM_NEST_COUNT := RTM_NEST_COUNT + 1
	IF RTM_NEST_COUNT == 1
		IF _64_BIT_MODE
			fallbackRIP := RIP
		ELSE IF _32_BIT_MODE
			fallbackEIP := EIP
		FI
		
		RTM_ACTIVE := 1
		// enter RTM execution, record register state, start tracking memory state
	FI
ELSE
	// RTM abort (see _xabort)
FI
	</operation>
	<instruction name="XBEGIN" form="r32" xed="XBEGIN_RELBRz"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="__rdtscp">
	<CPUID>RDTSCP</CPUID>
	<category>General Support</category>
	<return type="unsigned __int64" varname="dst" etype="UI64"/>
	<parameter type="unsigned int *" varname="mem_addr" etype="UI32" memwidth="32"/>
	<description>Copy the current 64-bit value of the processor's time-stamp counter into "dst", and store the IA32_TSC_AUX MSR (signature value) into memory at "mem_addr".</description>
	<operation>dst[63:0] := TimeStampCounter
MEM[mem_addr+31:mem_addr] := IA32_TSC_AUX[31:0]
	</operation>
	<instruction name="RDTSCP" xed="RDTSCP"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_xabort">
	<CPUID>RTM</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="const unsigned int" varname="imm8" etype="IMM" immwidth="8"/>
	<description>Force an RTM abort. The EAX register is updated to reflect an XABORT instruction caused the abort, and the "imm8" parameter will be provided in bits [31:24] of EAX.
	Following an RTM abort, the logical processor resumes execution at the fallback address computed through the outermost XBEGIN instruction.</description>
	<operation>IF RTM_ACTIVE == 0
	// nop
ELSE
	// restore architectural register state
	// discard memory updates performed in transaction
	// update EAX with status and imm8 value
	eax[31:24] := imm8[7:0]
	RTM_NEST_COUNT := 0
	RTM_ACTIVE := 0
	IF _64_BIT_MODE
		RIP := fallbackRIP
	ELSE
		EIP := fallbackEIP
	FI
FI
	</operation>
	<instruction name="XABORT" form="imm8" xed="XABORT_IMMb"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_rdseed32_step">
	<type>Flag</type>
	<CPUID>RDSEED</CPUID>
	<category>Random</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="unsigned int *" varname="val" etype="UI32"/>
	<description>Read a 32-bit NIST SP800-90B and SP800-90C compliant random value and store in "val". Return 1 if a random value was generated, and 0 otherwise.</description>
	<operation>IF HW_NRND_GEN.ready == 1
	val[31:0] := HW_NRND_GEN.data
	dst := 1
ELSE
	val[31:0] := 0
	dst := 0
FI
	</operation>
	<instruction name="RDSEED" form="r32" xed="RDSEED_GPRv"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_rdseed64_step">
	<type>Flag</type>
	<CPUID>RDSEED</CPUID>
	<category>Random</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="unsigned __int64 *" varname="val" etype="UI64"/>
	<description>Read a 64-bit NIST SP800-90B and SP800-90C compliant random value and store in "val". Return 1 if a random value was generated, and 0 otherwise.</description>
	<operation>IF HW_NRND_GEN.ready == 1
	val[63:0] := HW_NRND_GEN.data
	dst := 1
ELSE
	val[63:0] := 0
	dst := 0
FI
	</operation>
	<instruction name="RDSEED" form="r64" xed="RDSEED_GPRv"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_rdrand64_step">
	<type>Integer</type>
	<type>Flag</type>
	<CPUID>RDRAND</CPUID>
	<category>Random</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="unsigned __int64*" varname="val" etype="UI64" memwidth="64"/>
	<description>Read a hardware generated 64-bit random value and store the result in "val". Return 1 if a random value was generated, and 0 otherwise.</description>
	<operation>IF HW_RND_GEN.ready == 1
	val[63:0] := HW_RND_GEN.data
	dst := 1
ELSE
	val[63:0] := 0
	dst := 0
FI
	</operation>
	<instruction name="RDRAND" form="r64" xed="RDRAND_GPRv"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_rdseed16_step">
	<type>Flag</type>
	<CPUID>RDSEED</CPUID>
	<category>Random</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="unsigned short *" varname="val" etype="UI16"/>
	<description>Read a 16-bit NIST SP800-90B and SP800-90C compliant random value and store in "val". Return 1 if a random value was generated, and 0 otherwise.</description>
	<operation>IF HW_NRND_GEN.ready == 1
	val[15:0] := HW_NRND_GEN.data
	dst := 1
ELSE
	val[15:0] := 0
	dst := 0
FI
	</operation>
	<instruction name="RDSEED" form="r16" xed="RDSEED_GPRv"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_rdrand16_step">
	<type>Integer</type>
	<type>Flag</type>
	<CPUID>RDRAND</CPUID>
	<category>Random</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="unsigned short*" varname="val" etype="UI16" memwidth="16"/>
	<description>Read a hardware generated 16-bit random value and store the result in "val". Return 1 if a random value was generated, and 0 otherwise.</description>
	<operation>IF HW_RND_GEN.ready == 1
	val[15:0] := HW_RND_GEN.data
	dst := 1
ELSE
	val[15:0] := 0
	dst := 0
FI
	</operation>
	<instruction name="RDRAND" form="r16" xed="RDRAND_GPRv"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_rdrand32_step">
	<type>Integer</type>
	<type>Flag</type>
	<CPUID>RDRAND</CPUID>
	<category>Random</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="unsigned int*" varname="val" etype="UI32" memwidth="32"/>
	<description>Read a hardware generated 32-bit random value and store the result in "val". Return 1 if a random value was generated, and 0 otherwise.</description>
	<operation>IF HW_RND_GEN.ready == 1
	val[31:0] := HW_RND_GEN.data
	dst := 1
ELSE
	val[31:0] := 0
	dst := 0
FI
	</operation>
	<instruction name="RDRAND" form="r32" xed="RDRAND_GPRv"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_prefetch">
	<CPUID>PREFETCHWT1</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="char const*" varname="p" etype="UI8"/>
	<parameter type="int" varname="i" etype="IMM" immwidth="2"/>
	<description>Fetch the line of data from memory that contains address "p" to a location in the cache heirarchy specified by the locality hint "i".</description>
	<instruction name="PREFETCHWT1" form="m8" xed="PREFETCHWT1_MEMu8"/>
	<header>xmmintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_rdpid_u32">
	<CPUID>RDPID</CPUID>
	<category>General Support</category>
	<return type="unsigned int" varname="dst" etype="UI32"/>
	<parameter type="void"/>
	<description>Copy the IA32_TSC_AUX MSR (signature value) into "dst".</description>
	<operation>dst[31:0] := IA32_TSC_AUX[31:0]
	</operation>
	<instruction name="RDPID" form="r32" xed="RDPID_GPR32u32"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_pconfig_u32">
	<CPUID>PCONFIG</CPUID>
	<category>Miscellaneous</category>
	<return type="unsigned int" varname="dst" etype="UI32"/>
	<parameter type="const int" varname="a" etype="UI32"/>
	<parameter type="size_t*" varname="__data" etype="UI64"/>
	<description>Invoke the PCONFIG leaf function specified by "a". The "__data" array contains 3 32-bit elements that may act as input, output, or be unused, depending on the semantics of the specified leaf function; these correspond to rbx, rcx, and rdx. May return the value in eax, depending on the semantics of the specified leaf function.</description>
	<instruction name="PCONFIG" xed="PCONFIG"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_enclv_u32">
	<category>Miscellaneous</category>
	<return type="unsigned int" varname="dst" etype="UI32"/>
	<parameter type="const int" varname="a" etype="UI32"/>
	<parameter type="size_t*" varname="__data" etype="UI64"/>
	<description>Invoke the Intel SGX enclave virtualized (VMM) leaf function specified by "a", and return the error code. The "__data" array contains 3 32-bit elements that may act as input, output, or be unused, depending on the semantics of the specified leaf function; these correspond to ebx, ecx, and edx.</description>
	<instruction name="ENCLV" xed="ENCLV"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_wbinvd">
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="void"/>
	<description>Write back and flush internal caches.
		Initiate writing-back and flushing of external
		caches.</description>
	<instruction name="WBINVD" xed="WBINVD"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_ptwrite32">
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="unsigned int" varname="a" etype="UI32"/>
	<description>Insert the 32-bit data from "a" into a Processor Trace stream via a PTW packet. The PTW packet will be inserted if tracing is currently enabled and ptwrite is currently enabled. The current IP will also be inserted via a FUP packet if FUPonPTW is enabled.</description>
	<instruction name="PTWRITE" form="r32" xed="PTWRITE_GPRy"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_ptwrite64">
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="unsigned __int64" varname="a" etype="UI64"/>
	<description>Insert the 64-bit data from "a" into a Processor Trace stream via a PTW packet. The PTW packet will be inserted if tracing is currently enabled and ptwrite is currently enabled. The current IP will also be inserted via a FUP packet if FUPonPTW is enabled.</description>
	<instruction name="PTWRITE" form="r64" xed="PTWRITE_GPRy"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_enclu_u32">
	<category>Miscellaneous</category>
	<return type="unsigned int" varname="dst" etype="UI32"/>
	<parameter type="const int" varname="a" etype="UI32"/>
	<parameter type="size_t*" varname="__data" etype="UI64"/>
	<description>Invoke the Intel SGX enclave user (non-privilege) leaf function specified by "a", and return the error code. The "__data" array contains 3 32-bit elements that may act as input, output, or be unused, depending on the semantics of the specified leaf function; these correspond to ebx, ecx, and edx.</description>
	<instruction name="ENCLU" xed="ENCLU"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_encls_u32">
	<category>Miscellaneous</category>
	<return type="unsigned int" varname="dst" etype="UI32"/>
	<parameter type="const int" varname="a" etype="UI32"/>
	<parameter type="size_t*" varname="__data" etype="UI64"/>
	<description>Invoke the Intel SGX enclave system (privileged) leaf function specified by "a", and return the error code. The "__data" array contains 3 32-bit elements that may act as input, output, or be unused, depending on the semantics of the specified leaf function; these correspond to ebx, ecx, and edx.</description>
	<instruction name="ENCLS" xed="ENCLS"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_rdpmc">
	<category>General Support</category>
	<return type="__int64" varname="dst" etype="UI64"/>
	<parameter type="int" varname="a" etype="UI32"/>
	<description>Read the Performance Monitor Counter (PMC) specified by "a", and store up to 64-bits in "dst". The width of performance counters is implementation specific.</description>
	<operation>dst[63:0] := ReadPMC(a)
	</operation>
	<instruction name="RDPMC" xed="RDPMC"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" sequence="TRUE" name="_may_i_use_cpu_feature">
	<category>General Support</category>
	<return type="int" varname="k" etype="UI32"/>
	<parameter type="unsigned __int64" varname="a" etype="IMM" immwidth="8"/>
	<description>Dynamically query the processor to determine if the processor-specific feature(s) specified in "a" are available, and return true or false (1 or 0) if the set of features is available. Multiple features may be OR'd together. This intrinsic does not check the processor vendor. See the valid feature flags below:</description>
	<operation>
_FEATURE_GENERIC_IA32
_FEATURE_FPU
_FEATURE_CMOV
_FEATURE_MMX
_FEATURE_FXSAVE
_FEATURE_SSE
_FEATURE_SSE2
_FEATURE_SSE3
_FEATURE_SSSE3
_FEATURE_SSE4_1
_FEATURE_SSE4_2
_FEATURE_MOVBE
_FEATURE_POPCNT
_FEATURE_PCLMULQDQ
_FEATURE_AES
_FEATURE_F16C
_FEATURE_AVX
_FEATURE_RDRND
_FEATURE_FMA
_FEATURE_BMI
_FEATURE_LZCNT
_FEATURE_HLE
_FEATURE_RTM
_FEATURE_AVX2
_FEATURE_KNCNI
_FEATURE_AVX512F
_FEATURE_ADX
_FEATURE_RDSEED
_FEATURE_AVX512ER
_FEATURE_AVX512PF
_FEATURE_AVX512CD
_FEATURE_SHA
_FEATURE_MPX
_FEATURE_AVX512BW
_FEATURE_AVX512VL
_FEATURE_AVX512VBMI
_FEATURE_AVX512_4FMAPS
_FEATURE_AVX512_4VNNIW
_FEATURE_AVX512_VPOPCNTDQ
_FEATURE_AVX512_BITALG
_FEATURE_AVX512_VBMI2
_FEATURE_GFNI
_FEATURE_VAES
_FEATURE_VPCLMULQDQ
_FEATURE_AVX512_VNNI
_FEATURE_CLWB
_FEATURE_RDPID
_FEATURE_IBT
_FEATURE_SHSTK
_FEATURE_SGX
_FEATURE_WBNOINVD
_FEATURE_PCONFIG
_FEATURE_AXV512_4VNNIB
_FEATURE_AXV512_4FMAPH
_FEATURE_AXV512_BITALG2
_FEATURE_AXV512_VP2INTERSECT
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" sequence="TRUE" name="_allow_cpu_features">
	<category>General Support</category>
	<return type="void"/>
	<parameter type="unsigned __int64" varname="a" etype="IMM" immwidth="8"/>
	<description>Treat the processor-specific feature(s) specified in "a" as available. Multiple features may be OR'd together. See the valid feature flags below:</description>
	<operation>
_FEATURE_GENERIC_IA32
_FEATURE_FPU
_FEATURE_CMOV
_FEATURE_MMX
_FEATURE_FXSAVE
_FEATURE_SSE
_FEATURE_SSE2
_FEATURE_SSE3
_FEATURE_SSSE3
_FEATURE_SSE4_1
_FEATURE_SSE4_2
_FEATURE_MOVBE
_FEATURE_POPCNT
_FEATURE_PCLMULQDQ
_FEATURE_AES
_FEATURE_F16C
_FEATURE_AVX
_FEATURE_RDRND
_FEATURE_FMA
_FEATURE_BMI
_FEATURE_LZCNT
_FEATURE_HLE
_FEATURE_RTM
_FEATURE_AVX2
_FEATURE_KNCNI
_FEATURE_AVX512F
_FEATURE_ADX
_FEATURE_RDSEED
_FEATURE_AVX512ER
_FEATURE_AVX512PF
_FEATURE_AVX512CD
_FEATURE_SHA
_FEATURE_MPX
_FEATURE_AVX512BW
_FEATURE_AVX512VL
_FEATURE_AVX512VBMI
_FEATURE_AVX512_4FMAPS
_FEATURE_AVX512_4VNNIW
_FEATURE_AVX512_VPOPCNTDQ
_FEATURE_AVX512_BITALG
_FEATURE_AVX512_VBMI2
_FEATURE_GFNI
_FEATURE_VAES
_FEATURE_VPCLMULQDQ
_FEATURE_AVX512_VNNI
_FEATURE_CLWB
_FEATURE_RDPID
_FEATURE_IBT
_FEATURE_SHSTK
_FEATURE_SGX
_FEATURE_WBNOINVD
_FEATURE_PCONFIG
_FEATURE_AXV512_4VNNIB
_FEATURE_AXV512_4FMAPH
_FEATURE_AXV512_BITALG2
_FEATURE_AXV512_VP2INTERSECT
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" sequence="TRUE" name="_bnd_get_ptr_lbound">
	<CPUID>MPX</CPUID>
	<category>Miscellaneous</category>
	<return type="const void *"/>
	<parameter type="const void *" varname="q"/>
	<description>Return the lower bound of "q".</description>
	<operation>dst := q.LB
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" sequence="TRUE" name="_bnd_get_ptr_ubound">
	<CPUID>MPX</CPUID>
	<category>Miscellaneous</category>
	<return type="const void *"/>
	<parameter type="const void *" varname="q"/>
	<description>Return the upper bound of "q".</description>
	<operation>dst := q.UB
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_bnd_chk_ptr_ubounds">
	<CPUID>MPX</CPUID>
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="const void *" varname="q"/>
	<description>Checks if "q" is within its upper bound, and throws a #BR if not.</description>
	<operation>IF q &gt; q.UB
	#BR
FI
	</operation>
	<instruction name="BNDCU" form="bnd, m64" xed="BNDCU_BND_AGEN"/>
	<instruction name="BNDCN" form="bnd, m64" xed="BNDCN_BND_AGEN"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_bnd_chk_ptr_bounds">
	<CPUID>MPX</CPUID>
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="const void *" varname="q"/>
	<parameter type="size_t" varname="size" etype="UI64"/>
	<description>Checks if ["q", "q" + "size" - 1] is within the lower and upper bounds of "q" and throws a #BR if not.</description>
	<operation>IF (q + size - 1) &lt; q.LB OR (q + size - 1) &gt; q.UB
	#BR
FI
	</operation>
	<instruction name="BNDCU" form="bnd, m32" xed="BNDCU_BND_AGEN"/>
	<instruction name="BNDCN" form="bnd, m32" xed="BNDCN_BND_AGEN"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_bnd_store_ptr_bounds">
	<CPUID>MPX</CPUID>
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="const void **" varname="ptr_addr"/>
	<parameter type="const void *" varname="ptr_val"/>
	<description>Stores the bounds of "ptr_val" pointer in memory at address "ptr_addr".</description>
	<operation>MEM[ptr_addr].LB := ptr_val.LB
MEM[ptr_addr].UB := ptr_val.UB
	</operation>
	<instruction name="BNDSTX" form="mib, bnd" xed="BNDSTX_MEMbnd64_BND"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_bnd_chk_ptr_lbounds">
	<CPUID>MPX</CPUID>
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="const void *" varname="q"/>
	<description>Checks if "q" is within its lower bound, and throws a #BR if not.</description>
	<operation>IF q &lt; q.LB
	#BR
FI
	</operation>
	<instruction name="BNDCL" form="bnd, m64" xed="BNDCL_BND_AGEN"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" sequence="TRUE" name="_bnd_copy_ptr_bounds">
	<CPUID>MPX</CPUID>
	<category>Miscellaneous</category>
	<return type="void *"/>
	<parameter type="const void *" varname="q"/>
	<parameter type="const void *" varname="r"/>
	<description>Make a pointer with the value of "q" and bounds set to the bounds of "r" (e.g. copy the bounds of "r" to pointer "q"), and store the result in "dst".</description>
	<operation>dst := q
dst.LB := r.LB
dst.UB := r.UB
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" sequence="TRUE" name="_bnd_init_ptr_bounds">
	<CPUID>MPX</CPUID>
	<category>Miscellaneous</category>
	<return type="void *"/>
	<parameter type="const void *" varname="q"/>
	<description>Make a pointer with the value of "q" and open bounds, which allow the pointer to access the entire virtual address space, and store the result in "dst".</description>
	<operation>dst := q
dst.LB := 0
dst.UB := 0
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" sequence="TRUE" name="_bnd_narrow_ptr_bounds">
	<CPUID>MPX</CPUID>
	<category>Miscellaneous</category>
	<return type="void *"/>
	<parameter type="const void *" varname="q"/>
	<parameter type="const void *" varname="r"/>
	<parameter type="size_t" varname="size" etype="UI64"/>
	<description>Narrow the bounds for pointer "q" to the intersection of the bounds of "r" and the bounds ["q", "q" + "size" - 1], and store the result in "dst".</description>
	<operation>dst := q
IF r.LB &gt; (q + size - 1) OR r.UB &lt; q
	dst.LB := 1
	dst.UB := 0
ELSE
	dst.LB := MAX(r.LB, q)
	dst.UB := MIN(r.UB, (q + size - 1))
FI
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_monitor">
	<CPUID>MONITOR</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="void const*" varname="p"/>
	<parameter type="unsigned" varname="extensions" etype="UI32"/>
	<parameter type="unsigned" varname="hints" etype="UI32"/>
	<description>Arm address monitoring hardware using the address specified in "p". A store to an address within the specified address range triggers the monitoring hardware. Specify optional extensions in "extensions", and optional hints in "hints".</description>
	<instruction name="MONITOR" xed="MONITOR"/>
	<header>pmmintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_mwait">
	<CPUID>MONITOR</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="unsigned" varname="extensions" etype="UI32"/>
	<parameter type="unsigned" varname="hints" etype="UI32"/>
	<description>Hint to the processor that it can enter an implementation-dependent-optimized state while waiting for an event or store operation to the address range specified by MONITOR.</description>
	<instruction name="MWAIT" xed="MWAIT"/>
	<header>pmmintrin.h</header>
</intrinsic>
<intrinsic tech="MMX" sequence="TRUE" name="_mm_setr_pi8">
	<type>Integer</type>
	<CPUID>MMX</CPUID>
	<category>Set</category>
	<return type="__m64" varname="dst" etype="FP32"/>
	<parameter type="char" varname="e7" etype="UI8"/>
	<parameter type="char" varname="e6" etype="UI8"/>
	<parameter type="char" varname="e5" etype="UI8"/>
	<parameter type="char" varname="e4" etype="UI8"/>
	<parameter type="char" varname="e3" etype="UI8"/>
	<parameter type="char" varname="e2" etype="UI8"/>
	<parameter type="char" varname="e1" etype="UI8"/>
	<parameter type="char" varname="e0" etype="UI8"/>
	<description>Set packed 8-bit integers in "dst" with the supplied values in reverse order.</description>
	<operation>
dst[7:0] := e7
dst[15:8] := e6
dst[23:16] := e5
dst[31:24] := e4
dst[39:32] := e3
dst[47:40] := e2
dst[55:48] := e1
dst[63:56] := e0
	</operation>
	<header>mmintrin.h</header>
</intrinsic>
<intrinsic tech="MMX" sequence="TRUE" name="_mm_setr_pi32">
	<type>Integer</type>
	<CPUID>MMX</CPUID>
	<category>Set</category>
	<return type="__m64" varname="dst" etype="FP32"/>
	<parameter type="int" varname="e1" etype="UI32"/>
	<parameter type="int" varname="e0" etype="UI32"/>
	<description>Set packed 32-bit integers in "dst" with the supplied values in reverse order.</description>
	<operation>
dst[31:0] := e1
dst[63:32] := e0
	</operation>
	<header>mmintrin.h</header>
</intrinsic>
<intrinsic tech="MMX" sequence="TRUE" name="_mm_setr_pi16">
	<type>Integer</type>
	<CPUID>MMX</CPUID>
	<category>Set</category>
	<return type="__m64" varname="dst" etype="FP32"/>
	<parameter type="short" varname="e3" etype="UI16"/>
	<parameter type="short" varname="e2" etype="UI16"/>
	<parameter type="short" varname="e1" etype="UI16"/>
	<parameter type="short" varname="e0" etype="UI16"/>
	<description>Set packed 16-bit integers in "dst" with the supplied values in reverse order.</description>
	<operation>
dst[15:0] := e3
dst[31:16] := e2
dst[47:32] := e1
dst[63:48] := e0
	</operation>
	<header>mmintrin.h</header>
</intrinsic>
<intrinsic tech="MMX" sequence="TRUE" name="_mm_set_pi8">
	<type>Integer</type>
	<CPUID>MMX</CPUID>
	<category>Set</category>
	<return type="__m64" varname="dst" etype="FP32"/>
	<parameter type="char" varname="e7" etype="UI8"/>
	<parameter type="char" varname="e6" etype="UI8"/>
	<parameter type="char" varname="e5" etype="UI8"/>
	<parameter type="char" varname="e4" etype="UI8"/>
	<parameter type="char" varname="e3" etype="UI8"/>
	<parameter type="char" varname="e2" etype="UI8"/>
	<parameter type="char" varname="e1" etype="UI8"/>
	<parameter type="char" varname="e0" etype="UI8"/>
	<description>Set packed 8-bit integers in "dst" with the supplied values.</description>
	<operation>
dst[7:0] := e0
dst[15:8] := e1
dst[23:16] := e2
dst[31:24] := e3
dst[39:32] := e4
dst[47:40] := e5
dst[55:48] := e6
dst[63:56] := e7
	</operation>
	<header>mmintrin.h</header>
</intrinsic>
<intrinsic tech="MMX" sequence="TRUE" name="_mm_set_pi32">
	<type>Integer</type>
	<CPUID>MMX</CPUID>
	<category>Set</category>
	<return type="__m64" varname="dst" etype="FP32"/>
	<parameter type="int" varname="e1" etype="UI32"/>
	<parameter type="int" varname="e0" etype="UI32"/>
	<description>Set packed 32-bit integers in "dst" with the supplied values.</description>
	<operation>
dst[31:0] := e0
dst[63:32] := e1
	</operation>
	<header>mmintrin.h</header>
</intrinsic>
<intrinsic tech="MMX" sequence="TRUE" name="_mm_set_pi16">
	<type>Integer</type>
	<CPUID>MMX</CPUID>
	<category>Set</category>
	<return type="__m64" varname="dst" etype="FP32"/>
	<parameter type="short" varname="e3" etype="UI16"/>
	<parameter type="short" varname="e2" etype="UI16"/>
	<parameter type="short" varname="e1" etype="UI16"/>
	<parameter type="short" varname="e0" etype="UI16"/>
	<description>Set packed 16-bit integers in "dst" with the supplied values.</description>
	<operation>
dst[15:0] := e0
dst[31:16] := e1
dst[47:32] := e2
dst[63:48] := e3
	</operation>
	<header>mmintrin.h</header>
</intrinsic>
<intrinsic tech="MMX" name="_mm_empty">
	<CPUID>MMX</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="void"/>
	<description>Empty the MMX state, which marks the x87 FPU registers as available for use by x87 instructions. This instruction must be used at the end of all MMX technology procedures.</description>
	<instruction name="EMMS" xed="EMMS"/>
	<header>mmintrin.h</header>
</intrinsic>
<intrinsic tech="MMX" name="_m_empty">
	<CPUID>MMX</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="void"/>
	<description>Empty the MMX state, which marks the x87 FPU registers as available for use by x87 instructions. This instruction must be used at the end of all MMX technology procedures.</description>
	<instruction name="EMMS" xed="EMMS"/>
	<header>mmintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm_spflt_64">
	<CPUID>KNCNI</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="unsigned __int64" varname="r1" etype="UI64"/>
	<description>Set performance monitoring filtering mask to 64-bit unsigned integer "r1".</description>
	<operation>SetPerfMonMask(r1[63:0])
	</operation>
	<instruction name="SPFLT" form="r64"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm_clevict">
	<CPUID>KNCNI</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="const void *" varname="ptr"/>
	<parameter type="int" varname="level" etype="UI32"/>
	<description>Evicts the cache line containing the address "ptr" from cache level "level" (can be either 0 or 1).</description>
	<operation>CacheLineEvict(ptr, level)
	</operation>
	<instruction name="CLEVICT0" form="m8"/>
	<instruction name="CLEVICT1" form="m8"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm_delay_32">
	<CPUID>KNCNI</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="unsigned int" varname="r1" etype="UI32"/>
	<description>Stalls a thread without blocking other threads for 32-bit unsigned integer "r1" clock cycles.</description>
	<operation>BlockThread(r1)
	</operation>
	<instruction name="DELAY" form="r32"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm_delay_64">
	<CPUID>KNCNI</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="unsigned __int64" varname="r1" etype="UI64"/>
	<description>Stalls a thread without blocking other threads for 64-bit unsigned integer "r1" clock cycles.</description>
	<operation>BlockThread(r1)
	</operation>
	<instruction name="DELAY" form="r64"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm_spflt_32">
	<CPUID>KNCNI</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="unsigned int" varname="r1" etype="UI32"/>
	<description>Set performance monitoring filtering mask to 32-bit unsigned integer "r1".</description>
	<operation>SetPerfMonMask(r1[31:0])
	</operation>
	<instruction name="SPFLT" form="r32"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm_countbits_32">
	<CPUID>KNCNI</CPUID>
	<category>Bit Manipulation</category>
	<return type="unsigned int" varname="dst" etype="UI32"/>
	<parameter type="unsigned int" varname="r1" etype="UI32"/>
	<description>Counts the number of set bits in 32-bit unsigned integer "r1", returning the results in "dst".</description>
	<operation>dst[31:0] := PopCount(r1[31:0])
	</operation>
	<instruction name="POPCNT" form="r32, r32" xed="POPCNT_GPRv_GPRv"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm_countbits_64">
	<CPUID>KNCNI</CPUID>
	<category>Bit Manipulation</category>
	<return type="unsigned __int64" varname="dst" etype="UI64"/>
	<parameter type="unsigned __int64" varname="r1" etype="UI64"/>
	<description>Counts the number of set bits in 64-bit unsigned integer "r1", returning the results in "dst".</description>
	<operation>dst[63:0] := PopCount(r1[63:0])
	</operation>
	<instruction name="POPCNT" form="r64, r64" xed="POPCNT_GPRv_GPRv"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_mask_extpackstorelo_epi64">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Store</category>
	<return type="void"/>
	<parameter type="void *" varname="mt" etype="UI64"/>
	<parameter type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__m512i" varname="v1" etype="UI64"/>
	<parameter type="_MM_DOWNCONV_EPI64_ENUM" varname="conv" etype="IMM" immtype="_MM_DOWNCONV_EPI64"/>
	<parameter type="int" varname="hint" etype="UI32" hint="TRUE"/>
	<description>Down-converts and stores packed 64-bit integer elements of "v1" into a quadword stream according to "conv" at a logically mapped starting address "mt", storing the low-64-byte elements of that stream (those elements of the stream that map before the first 64-byte-aligned address follwing "mt"). "hint" indicates to the processor whether the data is non-temporal. Elements are stored to memory according to element selector "k" (elements are skipped whent he corresponding mask bit is not set).</description>
	<operation>
DEFINE DOWNCONVERT(element, convertTo) {
	CASE convertTo OF
	_MM_UPCONV_EPI64_NONE:
		RETURN element[63:0]
	ESAC
}
DEFINE DOWNCONVERTSIZE(convertTo) {
	CASE convertTo OF
	_MM_UPCONV_EPI64_NONE:
		RETURN 8
	ESAC
}
storeOffset := 0
downSize := DOWNCONVERTSIZE(conv)
addr := mt
FOR j := 0 to 7
	IF k[j]
		i := j*63
		tmp := DOWNCONVERT(v1[i+63:i], conv)
		storeAddr := addr + storeOffset * downSize
		CASE downSize OF
		8: MEM[storeAddr] := tmp[63:0]
		ESAC
		storeOffset := storeOffset + 1
		IF ((addr + storeOffset * downSize) % 64) == 0
			BREAK
		FI
	FI
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VPACKSTORELQ" form="m512 {k}, zmm"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_extpackstorelo_epi64">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Store</category>
	<return type="void"/>
	<parameter type="void *" varname="mt" etype="UI64"/>
	<parameter type="__m512i" varname="v1" etype="UI64"/>
	<parameter type="_MM_DOWNCONV_EPI64_ENUM" varname="conv" etype="IMM" immtype="_MM_DOWNCONV_EPI64"/>
	<parameter type="int" varname="hint" etype="UI32" hint="TRUE"/>
	<description>Down-converts and stores packed 64-bit integer elements of "v1" into a quadword stream according to "conv" at a logically mapped starting address "mt", storing the low-64-byte elements of that stream (those elements of the stream that map before the first 64-byte-aligned address follwing "mt"). "hint" indicates to the processor whether the data is non-temporal.</description>
	<operation>
DEFINE DOWNCONVERT(element, convertTo) {
	CASE convertTo OF
	_MM_UPCONV_EPI64_NONE:
		RETURN element[63:0]
	ESAC
}
DEFINE DOWNCONVERTSIZE(convertTo) {
	CASE convertTo OF
	_MM_UPCONV_EPI64_NONE:
		RETURN 8
	ESAC
}
storeOffset := 0
downSize := DOWNCONVERTSIZE(conv)
addr := mt
FOR j := 0 to 7
	i := j*63
	tmp := DOWNCONVERT(v1[i+63:i], conv)
	storeAddr := addr + storeOffset * downSize
	CASE downSize OF
	8: MEM[storeAddr] := tmp[63:0]
	ESAC
	storeOffset := storeOffset + 1
	IF ((addr + storeOffset * downSize) % 64) == 0
		BREAK
	FI
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VPACKSTORELQ" form="m512, zmm"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_mask_extpackstorehi_epi64">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Store</category>
	<return type="void"/>
	<parameter type="void *" varname="mt" etype="UI64"/>
	<parameter type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__m512i" varname="v1" etype="UI64"/>
	<parameter type="_MM_DOWNCONV_EPI64_ENUM" varname="conv" etype="IMM" immtype="_MM_DOWNCONV_EPI64"/>
	<parameter type="int" varname="hint" etype="UI32" hint="TRUE"/>
	<description>Down-converts and stores packed 64-bit integer elements of "v1" into a quadword stream according to "conv" at a logically mapped starting address (mt-64), storing the high-64-byte elements of that stream (those elemetns of the stream that map at or after the first 64-byte-aligned address following (mt-64)). "hint" indicates to the processor whether the data is non-temporal. Elements are stored to memory according to element selector "k" (elements are skipped when the corresonding mask bit is not set).</description>
	<operation>DEFINE DOWNCONVERT(element, convertTo) {
	CASE convertTo OF
	_MM_UPCONV_EPI64_NONE:
		RETURN element[63:0]
	ESAC
}
DEFINE DOWNCONVERTSIZE(convertTo) {
	CASE convertTo OF
	_MM_UPCONV_EPI64_NONE:
		RETURN 8
	ESAC
}
storeOffset := 0
foundNext64BytesBoundary := false
downSize := DOWNCONVERTSIZE(conv)
addr := mt-64
FOR j := 0 to 7
	IF k[j]
		IF foundNext64BytesBoundary == false
			IF ((addr + (storeOffset + 1)*downSize) % 64) == 0
				foundNext64BytesBoundary := true
			FI
		ELSE
			i := j*64
			tmp := DOWNCONVERT(v1[i+63:i], conv)
			storeAddr := addr + storeOffset * downSize
			CASE downSize OF
			8: MEM[storeAddr] := tmp[63:0]
			ESAC
		FI
		storeOffset := storeOffset + 1
	FI
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VPACKSTOREHQ" form="m512 {k}, zmm"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_extpackstorehi_epi64">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Store</category>
	<return type="void"/>
	<parameter type="void *" varname="mt" etype="UI64"/>
	<parameter type="__m512i" varname="v1" etype="UI64"/>
	<parameter type="_MM_DOWNCONV_EPI64_ENUM" varname="conv" etype="IMM" immtype="_MM_DOWNCONV_EPI64"/>
	<parameter type="int" varname="hint" etype="UI32" hint="TRUE"/>
	<description>Down-converts and stores packed 64-bit integer elements of "v1" into a quadword stream according to "conv" at a logically mapped starting address (mt-64), storing the high-64-byte elements of that stream (those elemetns of the stream that map at or after the first 64-byte-aligned address following (m5-64)). "hint" indicates to the processor whether the data is non-temporal.</description>
	<operation>DEFINE DOWNCONVERT(element, convertTo) {
	CASE convertTo OF
	_MM_UPCONV_EPI64_NONE:
		RETURN element[63:0]
	ESAC
}
DEFINE DOWNCONVERTSIZE(convertTo) {
	CASE convertTo OF
	_MM_UPCONV_EPI64_NONE:
		RETURN 8
	ESAC
}
storeOffset := 0
foundNext64BytesBoundary := false
downSize := DOWNCONVERTSIZE(conv)
addr := mt-64
FOR j := 0 to 7
	IF foundNext64BytesBoundary == false
		IF ((addr + (storeOffset + 1)*downSize) % 64) == 0
			foundNext64BytesBoundary := true
		FI
	ELSE
		i := j*64
		tmp := DOWNCONVERT(v1[i+63:i], conv)
		storeAddr := addr + storeOffset * downSize
		CASE downSize OF
		8: MEM[storeAddr] := tmp[63:0]
		ESAC
	FI
	storeOffset := storeOffset + 1
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VPACKSTOREHQ" form="m512, zmm"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_mask_extpackstorelo_epi32">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Store</category>
	<return type="void"/>
	<parameter type="void *" varname="mt" etype="UI32"/>
	<parameter type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__m512i" varname="v1" etype="UI32"/>
	<parameter type="_MM_DOWNCONV_EPI32_ENUM" varname="conv" etype="IMM" immtype="_MM_DOWNCONV_EPI32"/>
	<parameter type="int" varname="hint" etype="UI32" hint="TRUE"/>
	<description>Down-converts and stores packed 32-bit integer elements of "v1" into a byte/word/doubleword stream according to "conv" at a logically mapped starting address "mt", storing the low-64-byte elements of that stream (those elements of the stream that map before the first 64-byte-aligned address follwing "mt"). "hint" indicates to the processor whether the data is non-temporal. Elements are written to memory according to element selector "k" (elements are skipped when the corresponding mask bit is not set).</description>
	<operation>
DEFINE DOWNCONVERT(element, convertTo) {
	CASE convertTo OF
	_MM_DOWNCONV_EPI32_NONE:
		RETURN element[31:0]
	_MM_DOWNCONV_EPI32_UINT8:
		RETURN Truncate8(element[31:0])
	_MM_DOWNCONV_EPI32_SINT8:
		RETURN Saturate8(element[31:0])
	_MM_DOWNCONV_EPI32_UINT16:
		RETURN Truncate16(element[31:0])
	_MM_DOWNCONV_EPI32_SINT16:
		RETURN Saturate16(element[31:0])
	ESAC
}
DEFINE DOWNCONVERTSIZE(convertTo) {
	CASE convertTo OF
	_MM_DOWNCONV_EPI32_NONE:
		RETURN 4
	_MM_DOWNCONV_EPI32_UINT8:
		RETURN 1
	_MM_DOWNCONV_EPI32_SINT8:
		RETURN 1
	_MM_DOWNCONV_EPI32_UINT16:
		RETURN 2
	_MM_DOWNCONV_EPI32_SINT16:
		RETURN 2
	ESAC
}
storeOffset := 0
downSize := DOWNCONVERTSIZE(conv)
addr := mt
FOR j := 0 to 15
	IF k[j]
		i := j*32
		tmp := DOWNCONVERT(v1[i+31:i], conv)
		storeAddr := addr + storeOffset * downSize
		CASE downSize OF
		4: MEM[storeAddr] := tmp[31:0]
		2: MEM[storeAddr] := tmp[15:0]
		1: MEM[storeAddr] := tmp[7:0]
		ESAC
		storeOffset := storeOffset + 1
		IF ((addr + storeOffset * downSize) % 64) == 0
			BREAK
		FI
	FI
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VPACKSTORELD" form="m512 {k}, zmm"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_extpackstorelo_epi32">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Store</category>
	<return type="void"/>
	<parameter type="void *" varname="mt" etype="UI32"/>
	<parameter type="__m512i" varname="v1" etype="UI32"/>
	<parameter type="_MM_DOWNCONV_EPI32_ENUM" varname="conv" etype="IMM" immtype="_MM_DOWNCONV_EPI32"/>
	<parameter type="int" varname="hint" etype="UI32" hint="TRUE"/>
	<description>Down-converts and stores packed 32-bit integer elements of "v1" into a byte/word/doubleword stream according to "conv" at a logically mapped starting address "mt", storing the low-64-byte elements of that stream (those elements of the stream that map before the first 64-byte-aligned address follwing "mt"). "hint" indicates to the processor whether the data is non-temporal.</description>
	<operation>
DEFINE DOWNCONVERT(element, convertTo) {
	CASE convertTo OF
	_MM_DOWNCONV_EPI32_NONE:
		RETURN element[31:0]
	_MM_DOWNCONV_EPI32_UINT8:
		RETURN Truncate8(element[31:0])
	_MM_DOWNCONV_EPI32_SINT8:
		RETURN Saturate8(element[31:0])
	_MM_DOWNCONV_EPI32_UINT16:
		RETURN Truncate16(element[31:0])
	_MM_DOWNCONV_EPI32_SINT16:
		RETURN Saturate16(element[31:0])
	ESAC
}
DEFINE DOWNCONVERTSIZE(convertTo) {
	CASE convertTo OF
	_MM_DOWNCONV_EPI32_NONE:
		RETURN 4
	_MM_DOWNCONV_EPI32_UINT8:
		RETURN 1
	_MM_DOWNCONV_EPI32_SINT8:
		RETURN 1
	_MM_DOWNCONV_EPI32_UINT16:
		RETURN 2
	_MM_DOWNCONV_EPI32_SINT16:
		RETURN 2
	ESAC
}
storeOffset := 0
downSize := DOWNCONVERTSIZE(conv)
addr := mt
FOR j := 0 to 15
	i := j*32
	tmp := DOWNCONVERT(v1[i+31:i], conv)
	storeAddr := addr + storeOffset * downSize
	CASE downSize OF
	4: MEM[storeAddr] := tmp[31:0]
	2: MEM[storeAddr] := tmp[15:0]
	1: MEM[storeAddr] := tmp[7:0]
	ESAC
	storeOffset := storeOffset + 1
	IF ((addr + storeOffset * downSize) % 64) == 0
		BREAK
	FI
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VPACKSTORELD" form="m512, zmm"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_extpackstorehi_epi32">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Store</category>
	<return type="void"/>
	<parameter type="void *" varname="mt" etype="UI32"/>
	<parameter type="__m512i" varname="v1" etype="UI32"/>
	<parameter type="_MM_DOWNCONV_EPI32_ENUM" varname="conv" etype="IMM" immtype="_MM_DOWNCONV_EPI32"/>
	<parameter type="int" varname="hint" etype="UI32" hint="TRUE"/>
	<description>Down-converts and stores packed 32-bit integer elements of "v1" into a byte/word/doubleword stream according to "conv" at a logically mapped starting address (mt-64), storing the high-64-byte elements of that stream (those elemetns of the stream that map at or after the first 64-byte-aligned address following (m5-64)). "hint" indicates to the processor whether the data is non-temporal.</description>
	<operation>DEFINE DOWNCONVERT(element, convertTo) {
	CASE convertTo OF
	_MM_DOWNCONV_EPI32_NONE:
		RETURN element[31:0]
	_MM_DOWNCONV_EPI32_UINT8:
		RETURN Truncate8(element[31:0])
	_MM_DOWNCONV_EPI32_SINT8:
		RETURN Saturate8(element[31:0])
	_MM_DOWNCONV_EPI32_UINT16:
		RETURN Truncate16(element[31:0])
	_MM_DOWNCONV_EPI32_SINT16:
		RETURN Saturate16(element[31:0])
	ESAC
}
DEFINE DOWNCONVERTSIZE(convertTo) {
	CASE convertTo OF
	_MM_DOWNCONV_EPI32_NONE:
		RETURN 4
	_MM_DOWNCONV_EPI32_UINT8:
		RETURN 1
	_MM_DOWNCONV_EPI32_SINT8:
		RETURN 1
	_MM_DOWNCONV_EPI32_UINT16:
		RETURN 2
	_MM_DOWNCONV_EPI32_SINT16:
		RETURN 2
	ESAC
}
storeOffset := 0
foundNext64BytesBoundary := false
downSize := DOWNCONVERTSIZE(conv)
addr := mt-64
FOR j := 0 to 15
	IF foundNext64BytesBoundary == false
		IF ((addr + (storeOffset + 1)*downSize) % 64) == 0
			foundNext64BytesBoundary := true
		FI
	ELSE
		i := j*32
		tmp := DOWNCONVERT(v1[i+31:i], conv)
		storeAddr := addr + storeOffset * downSize
		CASE downSize OF
		4: MEM[storeAddr] := tmp[31:0]
		2: MEM[storeAddr] := tmp[15:0]
		1: MEM[storeAddr] := tmp[7:0]
		ESAC
	FI
	storeOffset := storeOffset + 1
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VPACKSTOREHD" form="m512, zmm"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_mask_extloadunpacklo_epi64">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Load</category>
	<return type="__m512i" varname="dst" etype="UI64"/>
	<parameter type="__m512i" varname="src" etype="UI64"/>
	<parameter type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="void const *" varname="mt" etype="UI64"/>
	<parameter type="_MM_UPCONV_EPI64_ENUM" varname="conv" etype="IMM" immtype="_MM_UPCONV_EPI64"/>
	<parameter type="int" varname="hint" etype="UI32" hint="TRUE"/>
	<description>Loads the low-64-byte-aligned portion of the quadword stream starting at element-aligned address mt, up-converted depending on the value of "conv", and expanded into packed 64-bit integers in "dst". The initial values of "dst" are copied from "src". Only those converted quadwords that occur before first 64-byte-aligned address following "mt" are loaded. Elements in the resulting vector that do not map to those quadwords are taken from "src". "hint" indicates to the processor whether the loaded data is non-temporal. Elements are copied to "dst" according to element selector "k" (elements are skipped when the corresponding mask bit is not set).</description>
	<operation>
DEFINE UPCONVERT(addr, offset, convertTo) {
	CASE conv OF
	_MM_UPCONV_EPI64_NONE:
		RETURN MEM[addr + 8*offset]
	ESAC
}
DEFINE UPCONVERTSIZE(convertTo) {
	CASE conv OF
	_MM_UPCONV_EPI64_NONE:
		RETURN 8
	ESAC
}
dst[511:0] := src[511:0]
loadOffset := 0
upSize := UPCONVERTSIZE(conv)
addr := mt
FOR j := 0 to 7
	IF k[j]
		i := j*64
		dst[i+63:i] := UPCONVERT(addr, loadOffset, conv)
		loadOffset := loadOffset + 1
		IF (addr + loadOffset*upSize % 64) == 0
			BREAK
		FI
	FI
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VLOADUNPACKLQ" form="zmm {k}, m512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_extloadunpacklo_epi64">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Load</category>
	<return type="__m512i" varname="dst" etype="UI64"/>
	<parameter type="__m512i" varname="src" etype="UI64"/>
	<parameter type="void const *" varname="mt" etype="UI64"/>
	<parameter type="_MM_UPCONV_EPI64_ENUM" varname="conv" etype="IMM" immtype="_MM_UPCONV_EPI64"/>
	<parameter type="int" varname="hint" etype="UI32" hint="TRUE"/>
	<description>Loads the low-64-byte-aligned portion of the quadword stream starting at element-aligned address mt, up-converted depending on the value of "conv", and expanded into packed 64-bit integers in "dst". The initial values of "dst" are copied from "src". Only those converted quad that occur before first 64-byte-aligned address following "mt" are loaded. Elements in the resulting vector that do not map to those quadwords are taken from "src". "hint" indicates to the processor whether the loaded data is non-temporal.</description>
	<operation>
DEFINE UPCONVERT(addr, offset, convertTo) {
	CASE conv OF
	_MM_UPCONV_EPI64_NONE:
		RETURN MEM[addr + 8*offset]
	ESAC
}
DEFINE UPCONVERTSIZE(convertTo) {
	CASE conv OF
	_MM_UPCONV_EPI64_NONE:
		RETURN 8
	ESAC
}
dst[511:0] := src[511:0]
loadOffset := 0
upSize := UPCONVERTSIZE(conv)
addr := mt
FOR j := 0 to 7
	i := j*64
	dst[i+63:i] := UPCONVERT(addr, loadOffset, conv)
	loadOffset := loadOffset + 1
	IF (addr + loadOffset*upSize % 64) == 0
		BREAK
	FI
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VLOADUNPACKLQ" form="zmm, m512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_mask_extloadunpackhi_epi64">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Load</category>
	<return type="__m512i" varname="dst" etype="UI64"/>
	<parameter type="__m512i" varname="src" etype="UI64"/>
	<parameter type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="void const *" varname="mt" etype="UI64"/>
	<parameter type="_MM_UPCONV_EPI64_ENUM" varname="conv" etype="IMM" immtype="_MM_UPCONV_EPI64"/>
	<parameter type="int" varname="hint" etype="UI32" hint="TRUE"/>
	<description>Loads the high-64-byte-aligned portion of the quadword stream starting at element-aligned address mt-64, up-converted depending on the value of "conv", and expanded into packed 64-bit integers in "dst". The initial values of "dst" are copied from "src". Only those converted quadwords that occur at or after the first 64-byte-aligned address following (mt-64) are loaded. Elements in the resulting vector that do not map to those quadwords are taken from "src". "hint" indicates to the processor whether the loaded data is non-temporal. Elements are copied to "dst" according to element selector "k" (elements are skipped when the corresponding mask bit is not set).</description>
	<operation>DEFINE UPCONVERT(addr, offset, convertTo) {
	CASE conv OF
	_MM_UPCONV_EPI64_NONE:
		RETURN MEM[addr + 8*offset]
	ESAC
}
DEFINE UPCONVERTSIZE(convertTo) {
	CASE conv OF
	_MM_UPCONV_EPI64_NONE:
		RETURN 8
	ESAC
}
dst[511:0] := src[511:0]
loadOffset := 0
foundNext64BytesBoundary := false
upSize := UPCONVERTSIZE(conv)
addr := mt-64
FOR j := 0 to 7
	IF k[j]
		IF foundNext64BytesBoundary == false
			IF (addr + (loadOffset + 1)*upSize) == 0
				foundNext64BytesBoundary := true
			FI
		ELSE
			i := j*64
			dst[i+63:i] := UPCONVERT(addr, loadOffset, conv)
		FI
		loadOffset := loadOffset + 1
	FI
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VLOADUNPACKHQ" form="zmm {k}, m512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_extloadunpackhi_epi64">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Load</category>
	<return type="__m512i" varname="dst" etype="UI64"/>
	<parameter type="__m512i" varname="src" etype="UI64"/>
	<parameter type="void const *" varname="mt" etype="UI64"/>
	<parameter type="_MM_UPCONV_EPI64_ENUM" varname="conv" etype="IMM" immtype="_MM_UPCONV_EPI64"/>
	<parameter type="int" varname="hint" etype="UI32" hint="TRUE"/>
	<description>Loads the high-64-byte-aligned portion of the quadword stream starting at element-aligned address mt-64, up-converted depending on the value of "conv", and expanded into packed 64-bit integers in "dst". The initial values of "dst" are copied from "src". Only those converted quadwords that occur at or after the first 64-byte-aligned address following (mt-64) are loaded. Elements in the resulting vector that do not map to those quadwords are taken from "src". "hint" indicates to the processor whether the loaded data is non-temporal.</description>
	<operation>DEFINE UPCONVERT(addr, offset, convertTo) {
	CASE conv OF
	_MM_UPCONV_EPI64_NONE:
		RETURN MEM[addr + 8*offset]
	ESAC
}
DEFINE UPCONVERTSIZE(convertTo) {
	CASE conv OF
	_MM_UPCONV_EPI64_NONE:
		RETURN 8
	ESAC
}
dst[511:0] := src[511:0]
loadOffset := 0
foundNext64BytesBoundary := false
upSize := UPCONVERTSIZE(conv)
addr := mt-64
FOR j := 0 to 7
	IF foundNext64BytesBoundary == false
		IF (addr + (loadOffset + 1)*upSize) == 0
			foundNext64BytesBoundary := true
		FI
	ELSE
		i := j*64
		dst[i+63:i] := UPCONVERT(addr, loadOffset, conv)
	FI
	loadOffset := loadOffset + 1
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VLOADUNPACKHQ" form="zmm, m512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_mask_extloadunpacklo_epi32">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Load</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<parameter type="__m512i" varname="src" etype="UI32"/>
	<parameter type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="void const *" varname="mt" etype="UI32"/>
	<parameter type="_MM_UPCONV_EPI32_ENUM" varname="conv" etype="IMM" immtype="_MM_UPCONV_EPI32"/>
	<parameter type="int" varname="hint" etype="UI32" hint="TRUE"/>
	<description>Loads the low-64-byte-aligned portion of the byte/word/doubleword stream starting at element-aligned address mt, up-converted depending on the value of "conv", and expanded into packed 32-bit integers in "dst". The initial values of "dst" are copied from "src". Only those converted doublewords that occur before first 64-byte-aligned address following "mt" are loaded. Elements in the resulting vector that do not map to those doublewords are taken from "src". "hint" indicates to the processor whether the loaded data is non-temporal. Elements are copied to "dst" according to element selector "k" (elements are skipped when the corresponding mask bit is not set).</description>
	<operation>
DEFINE UPCONVERT(addr, offset, convertTo) {
	CASE conv OF
	_MM_UPCONV_EPI32_NONE:
		RETURN MEM[addr + 4*offset]
	_MM_UPCONV_EPI32_UINT8:
		RETURN ZeroExtend32(MEM[addr + offset])
	_MM_UPCONV_EPI32_SINT8:
		RETURN SignExtend32(MEM[addr + offset])
	_MM_UPCONV_EPI32_UINT16:
		RETURN ZeroExtend32(MEM[addr + 2*offset])
	_MM_UPCONV_EPI32_SINT16:
		RETURN SignExtend32(MEM[addr + 2*offset])
	ESAC
}
DEFINE UPCONVERTSIZE(convertTo) {
	CASE conv OF
	_MM_UPCONV_EPI32_NONE:
		RETURN 4
	_MM_UPCONV_EPI32_UINT8:
		RETURN 1
	_MM_UPCONV_EPI32_SINT8:
		RETURN 1
	_MM_UPCONV_EPI32_UINT16:
		RETURN 2
	_MM_UPCONV_EPI32_SINT16:
		RETURN 2
	ESAC
}
dst[511:0] := src[511:0]
loadOffset := 0
upSize := UPCONVERTSIZE(conv)
addr := mt
FOR j := 0 to 15
	IF k[j]
		i := j*32
		dst[i+31:i] := UPCONVERT(addr, loadOffset, conv)
		loadOffset := loadOffset + 1
		IF (mt + loadOffset * upSize) % 64 == 0
			BREAK
		FI
	FI
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VLOADUNPACKLD" form="zmm {k}, m512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_extloadunpacklo_epi32">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Load</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<parameter type="__m512i" varname="src" etype="UI32"/>
	<parameter type="void const *" varname="mt" etype="UI32"/>
	<parameter type="_MM_UPCONV_EPI32_ENUM" varname="conv" etype="IMM" immtype="_MM_UPCONV_EPI32"/>
	<parameter type="int" varname="hint" etype="UI32" hint="TRUE"/>
	<description>Loads the low-64-byte-aligned portion of the byte/word/doubleword stream starting at element-aligned address mt, up-converted depending on the value of "conv", and expanded into packed 32-bit integers in "dst". The initial values of "dst" are copied from "src". Only those converted doublewords that occur before first 64-byte-aligned address following "mt" are loaded. Elements in the resulting vector that do not map to those doublewords are taken from "src". "hint" indicates to the processor whether the loaded data is non-temporal.</description>
	<operation>
DEFINE UPCONVERT(addr, offset, convertTo) {
	CASE conv OF
	_MM_UPCONV_EPI32_NONE:
		RETURN MEM[addr + 4*offset]
	_MM_UPCONV_EPI32_UINT8:
		RETURN ZeroExtend32(MEM[addr + offset])
	_MM_UPCONV_EPI32_SINT8:
		RETURN SignExtend32(MEM[addr + offset])
	_MM_UPCONV_EPI32_UINT16:
		RETURN ZeroExtend32(MEM[addr + 2*offset])
	_MM_UPCONV_EPI32_SINT16:
		RETURN SignExtend32(MEM[addr + 2*offset])
	ESAC
}
DEFINE UPCONVERTSIZE(convertTo) {
	CASE conv OF
	_MM_UPCONV_EPI32_NONE:
		RETURN 4
	_MM_UPCONV_EPI32_UINT8:
		RETURN 1
	_MM_UPCONV_EPI32_SINT8:
		RETURN 1
	_MM_UPCONV_EPI32_UINT16:
		RETURN 2
	_MM_UPCONV_EPI32_SINT16:
		RETURN 2
	ESAC
}
dst[511:0] := src[511:0]
loadOffset := 0
upSize := UPCONVERTSIZE(conv)
addr := mt
FOR j := 0 to 15
	i := j*32
	dst[i+31:i] := UPCONVERT(addr, loadOffset, conv)
	loadOffset := loadOffset + 1
	IF (mt + loadOffset * upSize) % 64 == 0
		BREAK
	FI
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VLOADUNPACKLD" form="zmm, m512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_mask_extloadunpackhi_epi32">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Load</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<parameter type="__m512i" varname="src" etype="UI32"/>
	<parameter type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="void const *" varname="mt" etype="UI32"/>
	<parameter type="_MM_UPCONV_EPI32_ENUM" varname="conv" etype="IMM" immtype="_MM_UPCONV_EPI32"/>
	<parameter type="int" varname="hint" etype="UI32" hint="TRUE"/>
	<description>Loads the high-64-byte-aligned portion of the byte/word/doubleword stream starting at element-aligned address mt-64, up-converted depending on the value of "conv", and expanded into packed 32-bit integers in "dst". The initial values of "dst" are copied from "src". Only those converted doublewords that occur at or after the first 64-byte-aligned address following (mt-64) are loaded. Elements in the resulting vector that do not map to those doublewords are taken from "src". "hint" indicates to the processor whether the loaded data is non-temporal. Elements are copied to "dst" according to element selector "k" (elements are skipped when the corresponding mask bit is not set).</description>
	<operation>DEFINE UPCONVERT(addr, offset, convertTo) {
	CASE conv OF
	_MM_UPCONV_EPI32_NONE:
		RETURN MEM[addr + 4*offset]
	_MM_UPCONV_EPI32_UINT8:
		RETURN ZeroExtend32(MEM[addr + offset])
	_MM_UPCONV_EPI32_SINT8:
		RETURN SignExtend32(MEM[addr + offset])
	_MM_UPCONV_EPI32_UINT16:
		RETURN ZeroExtend32(MEM[addr + 2*offset])
	_MM_UPCONV_EPI32_SINT16:
		RETURN SignExtend32(MEM[addr + 2*offset])
	ESAC
}
DEFINE UPCONVERTSIZE(convertTo) {
	CASE conv OF
	_MM_UPCONV_EPI32_NONE:
		RETURN 4
	_MM_UPCONV_EPI32_UINT8:
		RETURN 1
	_MM_UPCONV_EPI32_SINT8:
		RETURN 1
	_MM_UPCONV_EPI32_UINT16:
		RETURN 2
	_MM_UPCONV_EPI32_SINT16:
		RETURN 2
	ESAC
}
dst[511:0] := src[511:0]
loadOffset := 0
foundNext64BytesBoundary := false
upSize := UPCONVERTSIZE(conv)
addr := mt-64
FOR j := 0 to 15
	IF k[j]
		IF foundNext64BytesBoundary == false
			IF (addr + (loadOffset + 1)*upSize % 64) == 0
				foundNext64BytesBoundary := true
			FI
		ELSE
			i := j*32
			dst[i+31:i] := UPCONVERT(addr, loadOffset, conv)
		FI
		loadOffset := loadOffset + 1
	FI
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VLOADUNPACKHD" form="zmm {k}, m512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_extloadunpackhi_epi32">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Load</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<parameter type="__m512i" varname="src" etype="UI32"/>
	<parameter type="void const *" varname="mt" etype="UI32"/>
	<parameter type="_MM_UPCONV_EPI32_ENUM" varname="conv" etype="IMM" immtype="_MM_UPCONV_EPI32"/>
	<parameter type="int" varname="hint" etype="UI32" hint="TRUE"/>
	<description>Loads the high-64-byte-aligned portion of the byte/word/doubleword stream starting at element-aligned address mt-64, up-converted depending on the value of "conv", and expanded into packed 32-bit integers in "dst". The initial values of "dst" are copied from "src". Only those converted doublewords that occur at or after the first 64-byte-aligned address following (mt-64) are loaded. Elements in the resulting vector that do not map to those doublewords are taken from "src". "hint" indicates to the processor whether the loaded data is non-temporal.</description>
	<operation>DEFINE UPCONVERT(addr, offset, convertTo) {
	CASE conv OF
	_MM_UPCONV_EPI32_NONE:
		RETURN MEM[addr + 4*offset]
	_MM_UPCONV_EPI32_UINT8:
		RETURN ZeroExtend32(MEM[addr + offset])
	_MM_UPCONV_EPI32_SINT8:
		RETURN SignExtend32(MEM[addr + offset])
	_MM_UPCONV_EPI32_UINT16:
		RETURN ZeroExtend32(MEM[addr + 2*offset])
	_MM_UPCONV_EPI32_SINT16:
		RETURN SignExtend32(MEM[addr + 2*offset])
	ESAC
}
DEFINE UPCONVERTSIZE(convertTo) {
	CASE conv OF
	_MM_UPCONV_EPI32_NONE:
		RETURN 4
	_MM_UPCONV_EPI32_UINT8:
		RETURN 1
	_MM_UPCONV_EPI32_SINT8:
		RETURN 1
	_MM_UPCONV_EPI32_UINT16:
		RETURN 2
	_MM_UPCONV_EPI32_SINT16:
		RETURN 2
	ESAC
}
dst[511:0] := src[511:0]
loadOffset := 0
foundNext64BytesBoundary := false
upSize := UPCONVERTSIZE(conv)
addr := mt-64
FOR j := 0 to 15
	IF foundNext64BytesBoundary == false
		IF (addr + (loadOffset + 1)*upSize % 64) == 0
			foundNext64BytesBoundary := true
		FI
	ELSE
		i := j*32
		dst[i+31:i] := UPCONVERT(addr, loadOffset, conv)
	FI
	loadOffset := loadOffset + 1
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VLOADUNPACKHD" form="zmm, m512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm_prefetch">
	<CPUID>KNCNI</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="char const*" varname="p" etype="UI8"/>
	<parameter type="int" varname="i" etype="IMM" immwidth="2"/>
	<description>Fetch the line of data from memory that contains address "p" to a location in the cache heirarchy specified by the locality hint "i".</description>
	<instruction name="VPREFETCH0" form="m8"/>
	<instruction name="VPREFETCH1" form="m8"/>
	<instruction name="VPREFETCH2" form="m8"/>
	<instruction name="VPREFETCHNTA" form="m8"/>
	<instruction name="VPREFETCHE0" form="m8"/>
	<instruction name="VPREFETCHE1" form="m8"/>
	<instruction name="VPREFETCHE2" form="m8"/>
	<instruction name="VPREFETCHENTA" form="m8"/>
	<header>xmmintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_invpcid">
	<CPUID>INVPCID</CPUID>
	<category>OS-Targeted</category>
	<return type="void"/>
	<parameter type="unsigned int" varname="type" etype="UI32"/>
	<parameter type="void*" varname="descriptor" memwidth="128"/>
	<description>Invalidate mappings in the Translation Lookaside Buffers (TLBs) and paging-structure caches for the processor context identifier (PCID) specified by "descriptor" based on the invalidation type specified in "type". 
	The PCID "descriptor" is specified as a 16-byte memory operand (with no alignment restrictions) where bits [11:0] specify the PCID, and bits [127:64] specify the linear address; bits [63:12] are reserved.
	The types supported are:
		0) Individual-address invalidation: If "type" is 0, the logical processor invalidates mappings for a single linear address and tagged with the PCID specified in "descriptor", except global translations. The instruction may also invalidate global translations, mappings for other linear addresses, or mappings tagged with other PCIDs.
		1) Single-context invalidation: If "type" is 1, the logical processor invalidates all mappings tagged with the PCID specified in "descriptor" except global translations. In some cases, it may invalidate mappings for other PCIDs as well.
		2) All-context invalidation: If "type" is 2, the logical processor invalidates all mappings tagged with any PCID.
		3) All-context invalidation, retaining global translations: If "type" is 3, the logical processor invalidates all mappings tagged with any PCID except global translations, ignoring "descriptor". The instruction may also invalidate global translations as well.</description>
	<operation>
CASE type[1:0] OF
0: // individual-address invalidation retaining global translations
	OP_PCID := MEM[descriptor+11:descriptor]
	ADDR := MEM[descriptor+127:descriptor+64]
	BREAK
1: // single PCID invalidation retaining globals
	OP_PCID := MEM[descriptor+11:descriptor]
	// invalidate all mappings tagged with OP_PCID except global translations
	BREAK
2: // all PCID invalidation
	// invalidate all mappings tagged with any PCID
	BREAK
3: // all PCID invalidation retaining global translations
	// invalidate all mappings tagged with any PCID except global translations
	BREAK
ESAC
	</operation>
	<instruction name="INVPCID" form="r32, m128" xed="INVPCID_GPR32_MEMdq"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_fxsave">
	<CPUID>FXSR</CPUID>
	<category>OS-Targeted</category>
	<return type="void"/>
	<parameter type="void *" varname="mem_addr" memwidth="4096"/>
	<description>Save the current state of the x87 FPU, MMX technology, XMM, and MXCSR registers to a 512-byte memory location at "mem_addr". The layout of the 512-byte region depends on the operating mode. Bytes [511:464] are available for software use and will not be overwritten by the processor.</description>
	<operation>MEM[mem_addr+512*8:mem_addr] := fxsave(state_x87_fpu_mmx_sse)
	</operation>
	<instruction name="FXSAVE" form="m512" xed="FXSAVE_MEMmfpxenv"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_fxsave64">
	<CPUID>FXSR</CPUID>
	<category>OS-Targeted</category>
	<return type="void"/>
	<parameter type="void *" varname="mem_addr" memwidth="4096"/>
	<description>Save the current state of the x87 FPU, MMX technology, XMM, and MXCSR registers to a 512-byte memory location at "mem_addr". The layout of the 512-byte region depends on the operating mode. Bytes [511:464] are available for software use and will not be overwritten by the processor.</description>
	<operation>MEM[mem_addr+512*8:mem_addr] := fxsave64(state_x87_fpu_mmx_sse)
	</operation>
	<instruction name="FXSAVE64" form="m512" xed="FXSAVE64_MEMmfpxenv"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_writegsbase_u64">
	<type>Integer</type>
	<CPUID>FSGSBASE</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="unsigned __int64" varname="a" etype="UI64"/>
	<description>Write the unsigned 64-bit integer "a" to the GS segment base register.</description>
	<operation>
GS_Segment_Base_Register[63:0] := a[63:0]
	</operation>
	<instruction name="WRGSBASE" form="r64" xed="WRGSBASE_GPRy"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_fxrstor">
	<CPUID>FXSR</CPUID>
	<category>OS-Targeted</category>
	<return type="void"/>
	<parameter type="void *" varname="mem_addr" memwidth="4096"/>
	<description>Reload the x87 FPU, MMX technology, XMM, and MXCSR registers from the 512-byte memory image at "mem_addr". This data should have been written to memory previously using the FXSAVE instruction, and in the same format as required by the operating mode. "mem_addr" must be aligned on a 16-byte boundary.</description>
	<operation>state_x87_fpu_mmx_sse := fxrstor(MEM[mem_addr+512*8:mem_addr])
	</operation>
	<instruction name="FXRSTOR" form="m512" xed="FXRSTOR_MEMmfpxenv"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_fxrstor64">
	<CPUID>FXSR</CPUID>
	<category>OS-Targeted</category>
	<return type="void"/>
	<parameter type="void *" varname="mem_addr" memwidth="4096"/>
	<description>Reload the x87 FPU, MMX technology, XMM, and MXCSR registers from the 512-byte memory image at "mem_addr". This data should have been written to memory previously using the FXSAVE64 instruction, and in the same format as required by the operating mode. "mem_addr" must be aligned on a 16-byte boundary.</description>
	<operation>state_x87_fpu_mmx_sse := fxrstor64(MEM[mem_addr+512*8:mem_addr])
	</operation>
	<instruction name="FXRSTOR64" form="m512" xed="FXRSTOR64_MEMmfpxenv"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_writefsbase_u64">
	<type>Integer</type>
	<CPUID>FSGSBASE</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="unsigned __int64" varname="a" etype="UI64"/>
	<description>Write the unsigned 64-bit integer "a" to the FS segment base register.</description>
	<operation>
FS_Segment_Base_Register[63:0] := a[63:0]
	</operation>
	<instruction name="WRFSBASE" form="r64" xed="WRFSBASE_GPRy"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_writegsbase_u32">
	<type>Integer</type>
	<CPUID>FSGSBASE</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="unsigned int" varname="a" etype="UI32"/>
	<description>Write the unsigned 32-bit integer "a" to the GS segment base register.</description>
	<operation>
GS_Segment_Base_Register[31:0] := a[31:0]
GS_Segment_Base_Register[63:32] := 0
	</operation>
	<instruction name="WRGSBASE" form="r32" xed="WRGSBASE_GPRy"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_readgsbase_u64">
	<type>Integer</type>
	<CPUID>FSGSBASE</CPUID>
	<category>General Support</category>
	<return type="unsigned __int64" varname="dst" etype="UI64"/>
	<description>Read the GS segment base register and store the 64-bit result in "dst".</description>
	<operation>dst[63:0] := GS_Segment_Base_Register
	</operation>
	<instruction name="RDGSBASE" form="r64" xed="RDGSBASE_GPRy"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_writefsbase_u32">
	<type>Integer</type>
	<CPUID>FSGSBASE</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="unsigned int" varname="a" etype="UI32"/>
	<description>Write the unsigned 32-bit integer "a" to the FS segment base register.</description>
	<operation>
FS_Segment_Base_Register[31:0] := a[31:0]
FS_Segment_Base_Register[63:32] := 0
	</operation>
	<instruction name="WRFSBASE" form="r32" xed="WRFSBASE_GPRy"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_readgsbase_u32">
	<type>Integer</type>
	<CPUID>FSGSBASE</CPUID>
	<category>General Support</category>
	<return type="unsigned int" varname="dst" etype="UI32"/>
	<description>Read the GS segment base register and store the 32-bit result in "dst".</description>
	<operation>dst[31:0] := GS_Segment_Base_Register
dst[63:32] := 0
	</operation>
	<instruction name="RDGSBASE" form="r32" xed="RDGSBASE_GPRy"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX" name="_mm256_zeroupper">
	<CPUID>AVX</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="void"/>
	<description>Zero the upper 128 bits of all YMM registers; the lower 128-bits of the registers are unmodified.</description>
	<operation>YMM0[MAX:128] := 0
YMM1[MAX:128] := 0
YMM2[MAX:128] := 0
YMM3[MAX:128] := 0
YMM4[MAX:128] := 0
YMM5[MAX:128] := 0
YMM6[MAX:128] := 0
YMM7[MAX:128] := 0
IF _64_BIT_MODE
	YMM8[MAX:128] := 0
	YMM9[MAX:128] := 0
	YMM10[MAX:128] := 0
	YMM11[MAX:128] := 0
	YMM12[MAX:128] := 0
	YMM13[MAX:128] := 0
	YMM14[MAX:128] := 0
	YMM15[MAX:128] := 0
FI
	</operation>
	<instruction name="VZEROUPPER" xed="VZEROUPPER"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX" name="_mm256_zeroall">
	<CPUID>AVX</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="void"/>
	<description>Zero the contents of all XMM or YMM registers.</description>
	<operation>YMM0[MAX:0] := 0
YMM1[MAX:0] := 0
YMM2[MAX:0] := 0
YMM3[MAX:0] := 0
YMM4[MAX:0] := 0
YMM5[MAX:0] := 0
YMM6[MAX:0] := 0
YMM7[MAX:0] := 0
IF _64_BIT_MODE
	YMM8[MAX:0] := 0
	YMM9[MAX:0] := 0
	YMM10[MAX:0] := 0
	YMM11[MAX:0] := 0
	YMM12[MAX:0] := 0
	YMM13[MAX:0] := 0
	YMM14[MAX:0] := 0
	YMM15[MAX:0] := 0
FI
	</operation>
	<instruction name="VZEROALL" xed="VZEROALL"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="SSE2" name="_mm_undefined_si128">
	<type>Integer</type>
	<CPUID>SSE2</CPUID>
	<category>General Support</category>
	<return type="__m128i" varname="dst" etype="M128"/>
	<parameter type="void"/>
	<description>Return vector of type __m128i with undefined elements.</description>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_clwb">
	<CPUID>CLWB</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="void const *" varname="p"/>
	<description>Write back to memory the cache line that contains "p" from any level of the cache hierarchy in the cache coherence domain.</description>
	<instruction name="CLWB" form="m8" xed="CLWB_MEMmprefetch"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_readfsbase_u32">
	<type>Integer</type>
	<CPUID>FSGSBASE</CPUID>
	<category>General Support</category>
	<return type="unsigned int" varname="dst" etype="UI32"/>
	<description>Read the FS segment base register and store the 32-bit result in "dst".</description>
	<operation>dst[31:0] := FS_Segment_Base_Register
dst[63:32] := 0
	</operation>
	<instruction name="RDFSBASE" form="r32" xed="RDFSBASE_GPRy"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_readfsbase_u64">
	<type>Integer</type>
	<CPUID>FSGSBASE</CPUID>
	<category>General Support</category>
	<return type="unsigned __int64" varname="dst" etype="UI64"/>
	<description>Read the FS segment base register and store the 64-bit result in "dst".</description>
	<operation>dst[63:0] := FS_Segment_Base_Register
	</operation>
	<instruction name="RDFSBASE" form="r64" xed="RDFSBASE_GPRy"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_get_ssp">
	<CPUID>CET_SS</CPUID>
	<category>Miscellaneous</category>
	<return type="__int64" varname="dst" etype="UI64"/>
	<parameter type="void"/>
	<description>If CET is enabled, read the current shadow stack pointer, and store the result in "dst". Otherwise return 0.</description>
	<operation>dst := SSP[63:0]
	</operation>
	<instruction name="RDSSPQ" form="r64" xed="RDSSPQ_GPR64u64"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_inc_ssp">
	<CPUID>CET_SS</CPUID>
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="unsigned int" varname="a" etype="UI32"/>
	<description>Increment the shadow stack pointer by 4 times the value specified in bits [7:0] of "a".</description>
	<operation>
SSP := SSP + a[7:0] * 4
	</operation>
	<instruction name="INCSSPD" form="r32" xed="INCSSPD_GPR32u8"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_cldemote">
	<CPUID>CLDEMOTE</CPUID>
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="void const *" varname="p"/>
	<description>Hint to hardware that the cache line that contains "p" should be demoted from the cache closest to the processor core to a level more distant from the processor core.</description>
	<instruction name="CLDEMOTE" form="m8" xed="CLDEMOTE_MEMu8"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_clflushopt">
	<CPUID>CLFLUSHOPT</CPUID>
	<category>General Support</category>
	<return type="void"/>
	<parameter type="void const *" varname="p"/>
	<description>Invalidate and flush the cache line that contains "p" from all levels of the cache hierarchy.</description>
	<instruction name="CLFLUSHOPT" form="m8" xed="CLFLUSHOPT_MEMmprefetch"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_wrussq">
	<CPUID>CET_SS</CPUID>
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="__int64" varname="val" etype="UI64"/>
	<parameter type="void *" varname="p"/>
	<description>Write 64-bit value in "val" to a user shadow stack page in memory specified by "p".</description>
	<instruction name="WRUSSQ" form="m64, r64" xed="WRUSSQ_MEMu64_GPR64u64"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_setssbsy">
	<CPUID>CET_SS</CPUID>
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="void"/>
	<description>Mark shadow stack pointed to by IA32_PL0_SSP as busy.</description>
	<instruction name="SETSSBSY" xed="SETSSBSY"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_clrssbsy">
	<CPUID>CET_SS</CPUID>
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="void *" varname="p"/>
	<description>Mark shadow stack pointed to by "p" as not busy.</description>
	<instruction name="CLRSSBSY" form="m64" xed="CLRSSBSY_MEMu64"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_get_ssp">
	<CPUID>CET_SS</CPUID>
	<category>Miscellaneous</category>
	<return type="__int32" varname="dst" etype="UI32"/>
	<parameter type="void"/>
	<description>If CET is enabled, read the low 32-bits of the current shadow stack pointer, and store the result in "dst". Otherwise return 0.</description>
	<operation>dst := SSP[31:0]
	</operation>
	<instruction name="RDSSPD" form="r32" xed="RDSSPD_GPR32u32"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_rstorssp">
	<CPUID>CET_SS</CPUID>
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="void *" varname="p"/>
	<description>Restore the saved shadow stack pointer from the shadow stack restore token previously created on shadow stack by saveprevssp.</description>
	<instruction name="RSTORSSP" form="m64" xed="RSTORSSP_MEMu64"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_wrssd">
	<CPUID>CET_SS</CPUID>
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="__int32" varname="val" etype="UI32"/>
	<parameter type="void *" varname="p"/>
	<description>Write 32-bit value in "val" to a shadow stack page in memory specified by "p".</description>
	<instruction name="WRSSD" form="m32, r32" xed="WRSSD_MEMu32_GPR32u32"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_wrssq">
	<CPUID>CET_SS</CPUID>
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="__int64" varname="val" etype="UI64"/>
	<parameter type="void *" varname="p"/>
	<description>Write 64-bit value in "val" to a shadow stack page in memory specified by "p".</description>
	<instruction name="WRSSQ" form="m64, r64" xed="WRSSQ_MEMu64_GPR64u64"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_wrussd">
	<CPUID>CET_SS</CPUID>
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="__int32" varname="val" etype="UI32"/>
	<parameter type="void *" varname="p"/>
	<description>Write 32-bit value in "val" to a user shadow stack page in memory specified by "p".</description>
	<instruction name="WRUSSD" form="m32, r32" xed="WRUSSD_MEMu32_GPR32u32"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_incsspq">
	<CPUID>CET_SS</CPUID>
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="int" varname="a" etype="UI32"/>
	<description>Increment the shadow stack pointer by 8 times the value specified in bits [7:0] of "a".</description>
	<operation>
SSP := SSP + a[7:0] * 8
	</operation>
	<instruction name="INCSSPQ" form="r64" xed="INCSSPQ_GPR64u8"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_rdsspd_i32">
	<CPUID>CET_SS</CPUID>
	<category>Miscellaneous</category>
	<return type="__int32" varname="dst" etype="UI32"/>
	<parameter type="void"/>
	<description>Read the low 32-bits of the current shadow stack pointer, and store the result in "dst".</description>
	<operation>dst := SSP[31:0]
	</operation>
	<instruction name="RDSSPD" form="r32" xed="RDSSPD_GPR32u32"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_rdsspq_i64">
	<CPUID>CET_SS</CPUID>
	<category>Miscellaneous</category>
	<return type="__int64" varname="dst" etype="UI64"/>
	<parameter type="void"/>
	<description>Read the current shadow stack pointer, and store the result in "dst".</description>
	<operation>dst := SSP[63:0]
	</operation>
	<instruction name="RDSSPQ" form="r64" xed="RDSSPQ_GPR64u64"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_saveprevssp">
	<CPUID>CET_SS</CPUID>
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="void"/>
	<description>Save the previous shadow stack pointer context.</description>
	<instruction name="SAVEPREVSSP" xed="SAVEPREVSSP"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_incsspd">
	<CPUID>CET_SS</CPUID>
	<category>Miscellaneous</category>
	<return type="void"/>
	<parameter type="int" varname="a" etype="UI32"/>
	<description>Increment the shadow stack pointer by 4 times the value specified in bits [7:0] of "a".</description>
	<operation>
SSP := SSP + a[7:0] * 4
	</operation>
	<instruction name="INCSSPD" form="r32" xed="INCSSPD_GPR32u8"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_undefined_epi32">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<category>General Support</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<description>Return vector of type __m512i with undefined elements.</description>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_undefined">
	<CPUID>AVX512F</CPUID>
	<category>General Support</category>
	<return type="__m512" varname="dst" etype="FP32"/>
	<parameter type="void"/>
	<description>Return vector of type __m512 with undefined elements.</description>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_setzero_epi32">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<category>Set</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<description>Return vector of type __m512i with all elements set to zero.</description>
	<operation>
dst[MAX:0] := 0
	</operation>
	<instruction name="VPXORQ" form="zmm, zmm, zmm" xed="VPXORQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_setzero_si512">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<category>Set</category>
	<return type="__m512i" varname="dst" etype="M512"/>
	<description>Return vector of type __m512i with all elements set to zero.</description>
	<operation>
dst[MAX:0] := 0
	</operation>
	<instruction name="VPXORQ" form="zmm, zmm, zmm" xed="VPXORQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_setzero">
	<CPUID>AVX512F</CPUID>
	<category>Set</category>
	<return type="__m512" varname="dst" etype="FP32"/>
	<parameter type="void"/>
	<description>Return vector of type __m512 with all elements set to zero.</description>
	<operation>
dst[MAX:0] := 0
	</operation>
	<instruction name="VPXORQ" form="zmm, zmm, zmm" xed="VPXORQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" sequence="TRUE" name="_mm512_setr_epi64">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<category>Set</category>
	<return type="__m512i" varname="dst" etype="UI64"/>
	<parameter type="__int64" varname="e7" etype="UI64"/>
	<parameter type="__int64" varname="e6" etype="UI64"/>
	<parameter type="__int64" varname="e5" etype="UI64"/>
	<parameter type="__int64" varname="e4" etype="UI64"/>
	<parameter type="__int64" varname="e3" etype="UI64"/>
	<parameter type="__int64" varname="e2" etype="UI64"/>
	<parameter type="__int64" varname="e1" etype="UI64"/>
	<parameter type="__int64" varname="e0" etype="UI64"/>
	<description>Set packed 64-bit integers in "dst" with the supplied values in reverse order.</description>
	<operation>
dst[63:0] := e7
dst[127:64] := e6
dst[191:128] := e5
dst[255:192] := e4
dst[319:256] := e3
dst[383:320] := e2
dst[447:384] := e1
dst[511:448] := e0
dst[MAX:512] := 0
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" sequence="TRUE" name="_mm512_setr_epi32">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<category>Set</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<parameter type="int" varname="e15" etype="UI32"/>
	<parameter type="int" varname="e14" etype="UI32"/>
	<parameter type="int" varname="e13" etype="UI32"/>
	<parameter type="int" varname="e12" etype="UI32"/>
	<parameter type="int" varname="e11" etype="UI32"/>
	<parameter type="int" varname="e10" etype="UI32"/>
	<parameter type="int" varname="e9" etype="UI32"/>
	<parameter type="int" varname="e8" etype="UI32"/>
	<parameter type="int" varname="e7" etype="UI32"/>
	<parameter type="int" varname="e6" etype="UI32"/>
	<parameter type="int" varname="e5" etype="UI32"/>
	<parameter type="int" varname="e4" etype="UI32"/>
	<parameter type="int" varname="e3" etype="UI32"/>
	<parameter type="int" varname="e2" etype="UI32"/>
	<parameter type="int" varname="e1" etype="UI32"/>
	<parameter type="int" varname="e0" etype="UI32"/>
	<description>Set packed 32-bit integers in "dst" with the supplied values in reverse order.</description>
	<operation>
dst[31:0] := e15
dst[63:32] := e14
dst[95:64] := e13
dst[127:96] := e12
dst[159:128] := e11
dst[191:160] := e10
dst[223:192] := e9
dst[255:224] := e8
dst[287:256] := e7
dst[319:288] := e6
dst[351:320] := e5
dst[383:352] := e4
dst[415:384] := e3
dst[447:416] := e2
dst[479:448] := e1
dst[511:480] := e0
dst[MAX:512] := 0
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" sequence="TRUE" name="_mm512_setr4_epi64">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<category>Set</category>
	<return type="__m512i" varname="dst" etype="UI64"/>
	<parameter type="__int64" varname="d" etype="UI64"/>
	<parameter type="__int64" varname="c" etype="UI64"/>
	<parameter type="__int64" varname="b" etype="UI64"/>
	<parameter type="__int64" varname="a" etype="UI64"/>
	<description>Set packed 64-bit integers in "dst" with the repeated 4 element sequence in reverse order.</description>
	<operation>
dst[63:0] := d
dst[127:64] := c
dst[191:128] := b
dst[255:192] := a
dst[319:256] := d
dst[383:320] := c
dst[447:384] := b
dst[511:448] := a
dst[MAX:512] := 0
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" sequence="TRUE" name="_mm512_setr4_epi32">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<category>Set</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<parameter type="int" varname="d" etype="UI32"/>
	<parameter type="int" varname="c" etype="UI32"/>
	<parameter type="int" varname="b" etype="UI32"/>
	<parameter type="int" varname="a" etype="UI32"/>
	<description>Set packed 32-bit integers in "dst" with the repeated 4 element sequence in reverse order.</description>
	<operation>
dst[31:0] := d
dst[63:32] := c
dst[95:64] := b
dst[127:96] := a
dst[159:128] := d
dst[191:160] := c
dst[223:192] := b
dst[255:224] := a
dst[287:256] := d
dst[319:288] := c
dst[351:320] := b
dst[383:352] := a
dst[415:384] := d
dst[447:416] := c
dst[479:448] := b
dst[511:480] := a
dst[MAX:512] := 0
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" sequence="TRUE" name="_mm512_set_epi64">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<category>Set</category>
	<return type="__m512i" varname="dst" etype="UI64"/>
	<parameter type="__int64" varname="e7" etype="UI64"/>
	<parameter type="__int64" varname="e6" etype="UI64"/>
	<parameter type="__int64" varname="e5" etype="UI64"/>
	<parameter type="__int64" varname="e4" etype="UI64"/>
	<parameter type="__int64" varname="e3" etype="UI64"/>
	<parameter type="__int64" varname="e2" etype="UI64"/>
	<parameter type="__int64" varname="e1" etype="UI64"/>
	<parameter type="__int64" varname="e0" etype="UI64"/>
	<description>Set packed 64-bit integers in "dst" with the supplied values.</description>
	<operation>
dst[63:0] := e0
dst[127:64] := e1
dst[191:128] := e2
dst[255:192] := e3
dst[319:256] := e4
dst[383:320] := e5
dst[447:384] := e6
dst[511:448] := e7
dst[MAX:512] := 0
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" sequence="TRUE" name="_mm512_set_epi32">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<category>Set</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<parameter type="int" varname="e15" etype="UI32"/>
	<parameter type="int" varname="e14" etype="UI32"/>
	<parameter type="int" varname="e13" etype="UI32"/>
	<parameter type="int" varname="e12" etype="UI32"/>
	<parameter type="int" varname="e11" etype="UI32"/>
	<parameter type="int" varname="e10" etype="UI32"/>
	<parameter type="int" varname="e9" etype="UI32"/>
	<parameter type="int" varname="e8" etype="UI32"/>
	<parameter type="int" varname="e7" etype="UI32"/>
	<parameter type="int" varname="e6" etype="UI32"/>
	<parameter type="int" varname="e5" etype="UI32"/>
	<parameter type="int" varname="e4" etype="UI32"/>
	<parameter type="int" varname="e3" etype="UI32"/>
	<parameter type="int" varname="e2" etype="UI32"/>
	<parameter type="int" varname="e1" etype="UI32"/>
	<parameter type="int" varname="e0" etype="UI32"/>
	<description>Set packed 32-bit integers in "dst" with the supplied values.</description>
	<operation>
dst[31:0] := e0
dst[63:32] := e1
dst[95:64] := e2
dst[127:96] := e3
dst[159:128] := e4
dst[191:160] := e5
dst[223:192] := e6
dst[255:224] := e7
dst[287:256] := e8
dst[319:288] := e9
dst[351:320] := e10
dst[383:352] := e11
dst[415:384] := e12
dst[447:416] := e13
dst[479:448] := e14
dst[511:480] := e15
dst[MAX:512] := 0
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" sequence="TRUE" name="_mm512_set_epi16">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<category>Set</category>
	<return type="__m512i" varname="dst" etype="UI16"/>
	<parameter type="short" varname="e31" etype="UI16"/>
	<parameter type="short" varname="e30" etype="UI16"/>
	<parameter type="short" varname="e29" etype="UI16"/>
	<parameter type="short" varname="e28" etype="UI16"/>
	<parameter type="short" varname="e27" etype="UI16"/>
	<parameter type="short" varname="e26" etype="UI16"/>
	<parameter type="short" varname="e25" etype="UI16"/>
	<parameter type="short" varname="e24" etype="UI16"/>
	<parameter type="short" varname="e23" etype="UI16"/>
	<parameter type="short" varname="e22" etype="UI16"/>
	<parameter type="short" varname="e21" etype="UI16"/>
	<parameter type="short" varname="e20" etype="UI16"/>
	<parameter type="short" varname="e19" etype="UI16"/>
	<parameter type="short" varname="e18" etype="UI16"/>
	<parameter type="short" varname="e17" etype="UI16"/>
	<parameter type="short" varname="e16" etype="UI16"/>
	<parameter type="short" varname="e15" etype="UI16"/>
	<parameter type="short" varname="e14" etype="UI16"/>
	<parameter type="short" varname="e13" etype="UI16"/>
	<parameter type="short" varname="e12" etype="UI16"/>
	<parameter type="short" varname="e11" etype="UI16"/>
	<parameter type="short" varname="e10" etype="UI16"/>
	<parameter type="short" varname="e9" etype="UI16"/>
	<parameter type="short" varname="e8" etype="UI16"/>
	<parameter type="short" varname="e7" etype="UI16"/>
	<parameter type="short" varname="e6" etype="UI16"/>
	<parameter type="short" varname="e5" etype="UI16"/>
	<parameter type="short" varname="e4" etype="UI16"/>
	<parameter type="short" varname="e3" etype="UI16"/>
	<parameter type="short" varname="e2" etype="UI16"/>
	<parameter type="short" varname="e1" etype="UI16"/>
	<parameter type="short" varname="e0" etype="UI16"/>
	<description>Set packed 16-bit integers in "dst" with the supplied values.</description>
	<operation>
dst[15:0] := e0
dst[31:16] := e1
dst[47:32] := e2
dst[63:48] := e3
dst[79:64] := e4
dst[95:80] := e5
dst[111:96] := e6
dst[127:112] := e7
dst[143:128] := e8
dst[159:144] := e9
dst[175:160] := e10
dst[191:176] := e11
dst[207:192] := e12
dst[223:208] := e13
dst[239:224] := e14
dst[255:240] := e15
dst[271:256] := e16
dst[287:272] := e17
dst[303:288] := e18
dst[319:304] := e19
dst[335:320] := e20
dst[351:336] := e21
dst[367:352] := e22
dst[383:368] := e23
dst[399:384] := e24
dst[415:400] := e25
dst[431:416] := e26
dst[447:432] := e27
dst[463:448] := e28
dst[479:464] := e29
dst[495:480] := e30
dst[511:496] := e31
dst[MAX:512] := 0
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" sequence="TRUE" name="_mm512_set_epi8">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<category>Set</category>
	<return type="__m512i" varname="dst" etype="UI8"/>
	<parameter type="char" varname="e63" etype="UI8"/>
	<parameter type="char" varname="e62" etype="UI8"/>
	<parameter type="char" varname="e61" etype="UI8"/>
	<parameter type="char" varname="e60" etype="UI8"/>
	<parameter type="char" varname="e59" etype="UI8"/>
	<parameter type="char" varname="e58" etype="UI8"/>
	<parameter type="char" varname="e57" etype="UI8"/>
	<parameter type="char" varname="e56" etype="UI8"/>
	<parameter type="char" varname="e55" etype="UI8"/>
	<parameter type="char" varname="e54" etype="UI8"/>
	<parameter type="char" varname="e53" etype="UI8"/>
	<parameter type="char" varname="e52" etype="UI8"/>
	<parameter type="char" varname="e51" etype="UI8"/>
	<parameter type="char" varname="e50" etype="UI8"/>
	<parameter type="char" varname="e49" etype="UI8"/>
	<parameter type="char" varname="e48" etype="UI8"/>
	<parameter type="char" varname="e47" etype="UI8"/>
	<parameter type="char" varname="e46" etype="UI8"/>
	<parameter type="char" varname="e45" etype="UI8"/>
	<parameter type="char" varname="e44" etype="UI8"/>
	<parameter type="char" varname="e43" etype="UI8"/>
	<parameter type="char" varname="e42" etype="UI8"/>
	<parameter type="char" varname="e41" etype="UI8"/>
	<parameter type="char" varname="e40" etype="UI8"/>
	<parameter type="char" varname="e39" etype="UI8"/>
	<parameter type="char" varname="e38" etype="UI8"/>
	<parameter type="char" varname="e37" etype="UI8"/>
	<parameter type="char" varname="e36" etype="UI8"/>
	<parameter type="char" varname="e35" etype="UI8"/>
	<parameter type="char" varname="e34" etype="UI8"/>
	<parameter type="char" varname="e33" etype="UI8"/>
	<parameter type="char" varname="e32" etype="UI8"/>
	<parameter type="char" varname="e31" etype="UI8"/>
	<parameter type="char" varname="e30" etype="UI8"/>
	<parameter type="char" varname="e29" etype="UI8"/>
	<parameter type="char" varname="e28" etype="UI8"/>
	<parameter type="char" varname="e27" etype="UI8"/>
	<parameter type="char" varname="e26" etype="UI8"/>
	<parameter type="char" varname="e25" etype="UI8"/>
	<parameter type="char" varname="e24" etype="UI8"/>
	<parameter type="char" varname="e23" etype="UI8"/>
	<parameter type="char" varname="e22" etype="UI8"/>
	<parameter type="char" varname="e21" etype="UI8"/>
	<parameter type="char" varname="e20" etype="UI8"/>
	<parameter type="char" varname="e19" etype="UI8"/>
	<parameter type="char" varname="e18" etype="UI8"/>
	<parameter type="char" varname="e17" etype="UI8"/>
	<parameter type="char" varname="e16" etype="UI8"/>
	<parameter type="char" varname="e15" etype="UI8"/>
	<parameter type="char" varname="e14" etype="UI8"/>
	<parameter type="char" varname="e13" etype="UI8"/>
	<parameter type="char" varname="e12" etype="UI8"/>
	<parameter type="char" varname="e11" etype="UI8"/>
	<parameter type="char" varname="e10" etype="UI8"/>
	<parameter type="char" varname="e9" etype="UI8"/>
	<parameter type="char" varname="e8" etype="UI8"/>
	<parameter type="char" varname="e7" etype="UI8"/>
	<parameter type="char" varname="e6" etype="UI8"/>
	<parameter type="char" varname="e5" etype="UI8"/>
	<parameter type="char" varname="e4" etype="UI8"/>
	<parameter type="char" varname="e3" etype="UI8"/>
	<parameter type="char" varname="e2" etype="UI8"/>
	<parameter type="char" varname="e1" etype="UI8"/>
	<parameter type="char" varname="e0" etype="UI8"/>
	<description>Set packed 8-bit integers in "dst" with the supplied values.</description>
	<operation>
dst[7:0] := e0
dst[15:8] := e1
dst[23:16] := e2
dst[31:24] := e3
dst[39:32] := e4
dst[47:40] := e5
dst[55:48] := e6
dst[63:56] := e7
dst[71:64] := e8
dst[79:72] := e9
dst[87:80] := e10
dst[95:88] := e11
dst[103:96] := e12
dst[111:104] := e13
dst[119:112] := e14
dst[127:120] := e15
dst[135:128] := e16
dst[143:136] := e17
dst[151:144] := e18
dst[159:152] := e19
dst[167:160] := e20
dst[175:168] := e21
dst[183:176] := e22
dst[191:184] := e23
dst[199:192] := e24
dst[207:200] := e25
dst[215:208] := e26
dst[223:216] := e27
dst[231:224] := e28
dst[239:232] := e29
dst[247:240] := e30
dst[255:248] := e31
dst[263:256] := e32
dst[271:264] := e33
dst[279:272] := e34
dst[287:280] := e35
dst[295:288] := e36
dst[303:296] := e37
dst[311:304] := e38
dst[319:312] := e39
dst[327:320] := e40
dst[335:328] := e41
dst[343:336] := e42
dst[351:344] := e43
dst[359:352] := e44
dst[367:360] := e45
dst[375:368] := e46
dst[383:376] := e47
dst[391:384] := e48
dst[399:392] := e49
dst[407:400] := e50
dst[415:408] := e51
dst[423:416] := e52
dst[431:424] := e53
dst[439:432] := e54
dst[447:440] := e55
dst[455:448] := e56
dst[463:456] := e57
dst[471:464] := e58
dst[479:472] := e59
dst[487:480] := e60
dst[495:488] := e61
dst[503:496] := e62
dst[511:504] := e63
dst[MAX:512] := 0
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" sequence="TRUE" name="_mm512_set4_epi64">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<category>Set</category>
	<return type="__m512i" varname="dst" etype="UI64"/>
	<parameter type="__int64" varname="d" etype="UI64"/>
	<parameter type="__int64" varname="c" etype="UI64"/>
	<parameter type="__int64" varname="b" etype="UI64"/>
	<parameter type="__int64" varname="a" etype="UI64"/>
	<description>Set packed 64-bit integers in "dst" with the repeated 4 element sequence.</description>
	<operation>
dst[63:0] := a
dst[127:64] := b
dst[191:128] := c
dst[255:192] := d
dst[319:256] := a
dst[383:320] := b
dst[447:384] := c
dst[511:448] := d
dst[MAX:512] := 0
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" sequence="TRUE" name="_mm512_set4_epi32">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<category>Set</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<parameter type="int" varname="d" etype="UI32"/>
	<parameter type="int" varname="c" etype="UI32"/>
	<parameter type="int" varname="b" etype="UI32"/>
	<parameter type="int" varname="a" etype="UI32"/>
	<description>Set packed 32-bit integers in "dst" with the repeated 4 element sequence.</description>
	<operation>
dst[31:0] := a
dst[63:32] := b
dst[95:64] := c
dst[127:96] := d
dst[159:128] := a
dst[191:160] := b
dst[223:192] := c
dst[255:224] := d
dst[287:256] := a
dst[319:288] := b
dst[351:320] := c
dst[383:352] := d
dst[415:384] := a
dst[447:416] := b
dst[479:448] := c
dst[511:480] := d
dst[MAX:512] := 0
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_castsi512_si128">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<category>Cast</category>
	<return type="__m128i" varname="dst" etype="M128"/>
	<parameter type="__m512i" varname="a" etype="M128"/>
	<description>Cast vector of type __m512i to type __m128i.
	 This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency.</description>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_castsi512_si256">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<category>Cast</category>
	<return type="__m256i" varname="dst" etype="M256"/>
	<parameter type="__m512i" varname="a" etype="M256"/>
	<description>Cast vector of type __m512i to type __m256i.
	 This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency.</description>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_zextsi128_si512">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<category>Cast</category>
	<return type="__m512i" varname="dst" etype="M512"/>
	<parameter type="__m128i" varname="a" etype="M512"/>
	<description>Cast vector of type __m128i to type __m512i; the upper 384 bits of the result are zeroed. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency.</description>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_castsi128_si512">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<category>Cast</category>
	<return type="__m512i" varname="dst" etype="M512"/>
	<parameter type="__m128i" varname="a" etype="M512"/>
	<description>Cast vector of type __m128i to type __m512i; the upper 384 bits of the result are undefined. 
	This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency.</description>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_castsi256_si512">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<category>Cast</category>
	<return type="__m512i" varname="dst" etype="M512"/>
	<parameter type="__m256i" varname="a" etype="M512"/>
	<description>Cast vector of type __m256i to type __m512i; the upper 256 bits of the result are undefined.
	 This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency.</description>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX" name="_mm256_setzero_si256">
	<type>Integer</type>
	<CPUID>AVX</CPUID>
	<category>Set</category>
	<return type="__m256i" varname="dst" etype="M256"/>
	<parameter type="void"/>
	<description>Return vector of type __m256i with all elements set to zero.</description>
	<operation>
dst[MAX:0] := 0
	</operation>
	<instruction name="VPXOR" form="ymm, ymm, ymm" xed="VPXOR_YMMqq_YMMqq_YMMqq"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX" sequence="TRUE" name="_mm256_set_epi8">
	<type>Integer</type>
	<CPUID>AVX</CPUID>
	<category>Set</category>
	<return type="__m256i" varname="dst" etype="UI8"/>
	<parameter type="char" varname="e31" etype="UI8"/>
	<parameter type="char" varname="e30" etype="UI8"/>
	<parameter type="char" varname="e29" etype="UI8"/>
	<parameter type="char" varname="e28" etype="UI8"/>
	<parameter type="char" varname="e27" etype="UI8"/>
	<parameter type="char" varname="e26" etype="UI8"/>
	<parameter type="char" varname="e25" etype="UI8"/>
	<parameter type="char" varname="e24" etype="UI8"/>
	<parameter type="char" varname="e23" etype="UI8"/>
	<parameter type="char" varname="e22" etype="UI8"/>
	<parameter type="char" varname="e21" etype="UI8"/>
	<parameter type="char" varname="e20" etype="UI8"/>
	<parameter type="char" varname="e19" etype="UI8"/>
	<parameter type="char" varname="e18" etype="UI8"/>
	<parameter type="char" varname="e17" etype="UI8"/>
	<parameter type="char" varname="e16" etype="UI8"/>
	<parameter type="char" varname="e15" etype="UI8"/>
	<parameter type="char" varname="e14" etype="UI8"/>
	<parameter type="char" varname="e13" etype="UI8"/>
	<parameter type="char" varname="e12" etype="UI8"/>
	<parameter type="char" varname="e11" etype="UI8"/>
	<parameter type="char" varname="e10" etype="UI8"/>
	<parameter type="char" varname="e9" etype="UI8"/>
	<parameter type="char" varname="e8" etype="UI8"/>
	<parameter type="char" varname="e7" etype="UI8"/>
	<parameter type="char" varname="e6" etype="UI8"/>
	<parameter type="char" varname="e5" etype="UI8"/>
	<parameter type="char" varname="e4" etype="UI8"/>
	<parameter type="char" varname="e3" etype="UI8"/>
	<parameter type="char" varname="e2" etype="UI8"/>
	<parameter type="char" varname="e1" etype="UI8"/>
	<parameter type="char" varname="e0" etype="UI8"/>
	<description>Set packed 8-bit integers in "dst" with the supplied values.</description>
	<operation>
dst[7:0] := e0
dst[15:8] := e1
dst[23:16] := e2
dst[31:24] := e3
dst[39:32] := e4
dst[47:40] := e5
dst[55:48] := e6
dst[63:56] := e7
dst[71:64] := e8
dst[79:72] := e9
dst[87:80] := e10
dst[95:88] := e11
dst[103:96] := e12
dst[111:104] := e13
dst[119:112] := e14
dst[127:120] := e15
dst[135:128] := e16
dst[143:136] := e17
dst[151:144] := e18
dst[159:152] := e19
dst[167:160] := e20
dst[175:168] := e21
dst[183:176] := e22
dst[191:184] := e23
dst[199:192] := e24
dst[207:200] := e25
dst[215:208] := e26
dst[223:216] := e27
dst[231:224] := e28
dst[239:232] := e29
dst[247:240] := e30
dst[255:248] := e31
dst[MAX:256] := 0
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX" sequence="TRUE" name="_mm256_set_epi16">
	<type>Integer</type>
	<CPUID>AVX</CPUID>
	<category>Set</category>
	<return type="__m256i" varname="dst" etype="UI16"/>
	<parameter type="short" varname="e15" etype="UI16"/>
	<parameter type="short" varname="e14" etype="UI16"/>
	<parameter type="short" varname="e13" etype="UI16"/>
	<parameter type="short" varname="e12" etype="UI16"/>
	<parameter type="short" varname="e11" etype="UI16"/>
	<parameter type="short" varname="e10" etype="UI16"/>
	<parameter type="short" varname="e9" etype="UI16"/>
	<parameter type="short" varname="e8" etype="UI16"/>
	<parameter type="short" varname="e7" etype="UI16"/>
	<parameter type="short" varname="e6" etype="UI16"/>
	<parameter type="short" varname="e5" etype="UI16"/>
	<parameter type="short" varname="e4" etype="UI16"/>
	<parameter type="short" varname="e3" etype="UI16"/>
	<parameter type="short" varname="e2" etype="UI16"/>
	<parameter type="short" varname="e1" etype="UI16"/>
	<parameter type="short" varname="e0" etype="UI16"/>
	<description>Set packed 16-bit integers in "dst" with the supplied values.</description>
	<operation>
dst[15:0] := e0
dst[31:16] := e1
dst[47:32] := e2
dst[63:48] := e3
dst[79:64] := e4
dst[95:80] := e5
dst[111:96] := e6
dst[127:112] := e7
dst[143:128] := e8
dst[159:144] := e9
dst[175:160] := e10
dst[191:176] := e11
dst[207:192] := e12
dst[223:208] := e13
dst[239:224] := e14
dst[255:240] := e15
dst[MAX:256] := 0
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX" sequence="TRUE" name="_mm256_set_epi32">
	<type>Integer</type>
	<CPUID>AVX</CPUID>
	<category>Set</category>
	<return type="__m256i" varname="dst" etype="UI32"/>
	<parameter type="int" varname="e7" etype="UI32"/>
	<parameter type="int" varname="e6" etype="UI32"/>
	<parameter type="int" varname="e5" etype="UI32"/>
	<parameter type="int" varname="e4" etype="UI32"/>
	<parameter type="int" varname="e3" etype="UI32"/>
	<parameter type="int" varname="e2" etype="UI32"/>
	<parameter type="int" varname="e1" etype="UI32"/>
	<parameter type="int" varname="e0" etype="UI32"/>
	<description>Set packed 32-bit integers in "dst" with the supplied values.</description>
	<operation>
dst[31:0] := e0
dst[63:32] := e1
dst[95:64] := e2
dst[127:96] := e3
dst[159:128] := e4
dst[191:160] := e5
dst[223:192] := e6
dst[255:224] := e7
dst[MAX:256] := 0
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX" sequence="TRUE" name="_mm256_set_epi64x">
	<type>Integer</type>
	<CPUID>AVX</CPUID>
	<category>Set</category>
	<return type="__m256i" varname="dst" etype="UI64"/>
	<parameter type="__int64" varname="e3" etype="UI64"/>
	<parameter type="__int64" varname="e2" etype="UI64"/>
	<parameter type="__int64" varname="e1" etype="UI64"/>
	<parameter type="__int64" varname="e0" etype="UI64"/>
	<description>Set packed 64-bit integers in "dst" with the supplied values.</description>
	<operation>
dst[63:0] := e0
dst[127:64] := e1
dst[191:128] := e2
dst[255:192] := e3
dst[MAX:256] := 0
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX" sequence="TRUE" name="_mm256_setr_epi8">
	<type>Integer</type>
	<CPUID>AVX</CPUID>
	<category>Set</category>
	<return type="__m256i" varname="dst" etype="UI8"/>
	<parameter type="char" varname="e31" etype="UI8"/>
	<parameter type="char" varname="e30" etype="UI8"/>
	<parameter type="char" varname="e29" etype="UI8"/>
	<parameter type="char" varname="e28" etype="UI8"/>
	<parameter type="char" varname="e27" etype="UI8"/>
	<parameter type="char" varname="e26" etype="UI8"/>
	<parameter type="char" varname="e25" etype="UI8"/>
	<parameter type="char" varname="e24" etype="UI8"/>
	<parameter type="char" varname="e23" etype="UI8"/>
	<parameter type="char" varname="e22" etype="UI8"/>
	<parameter type="char" varname="e21" etype="UI8"/>
	<parameter type="char" varname="e20" etype="UI8"/>
	<parameter type="char" varname="e19" etype="UI8"/>
	<parameter type="char" varname="e18" etype="UI8"/>
	<parameter type="char" varname="e17" etype="UI8"/>
	<parameter type="char" varname="e16" etype="UI8"/>
	<parameter type="char" varname="e15" etype="UI8"/>
	<parameter type="char" varname="e14" etype="UI8"/>
	<parameter type="char" varname="e13" etype="UI8"/>
	<parameter type="char" varname="e12" etype="UI8"/>
	<parameter type="char" varname="e11" etype="UI8"/>
	<parameter type="char" varname="e10" etype="UI8"/>
	<parameter type="char" varname="e9" etype="UI8"/>
	<parameter type="char" varname="e8" etype="UI8"/>
	<parameter type="char" varname="e7" etype="UI8"/>
	<parameter type="char" varname="e6" etype="UI8"/>
	<parameter type="char" varname="e5" etype="UI8"/>
	<parameter type="char" varname="e4" etype="UI8"/>
	<parameter type="char" varname="e3" etype="UI8"/>
	<parameter type="char" varname="e2" etype="UI8"/>
	<parameter type="char" varname="e1" etype="UI8"/>
	<parameter type="char" varname="e0" etype="UI8"/>
	<description>Set packed 8-bit integers in "dst" with the supplied values in reverse order.</description>
	<operation>
dst[7:0] := e31
dst[15:8] := e30
dst[23:16] := e29
dst[31:24] := e28
dst[39:32] := e27
dst[47:40] := e26
dst[55:48] := e25
dst[63:56] := e24
dst[71:64] := e23
dst[79:72] := e22
dst[87:80] := e21
dst[95:88] := e20
dst[103:96] := e19
dst[111:104] := e18
dst[119:112] := e17
dst[127:120] := e16
dst[135:128] := e15
dst[143:136] := e14
dst[151:144] := e13
dst[159:152] := e12
dst[167:160] := e11
dst[175:168] := e10
dst[183:176] := e9
dst[191:184] := e8
dst[199:192] := e7
dst[207:200] := e6
dst[215:208] := e5
dst[223:216] := e4
dst[231:224] := e3
dst[239:232] := e2
dst[247:240] := e1
dst[255:248] := e0
dst[MAX:256] := 0
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX" sequence="TRUE" name="_mm256_setr_epi16">
	<type>Integer</type>
	<CPUID>AVX</CPUID>
	<category>Set</category>
	<return type="__m256i" varname="dst" etype="UI16"/>
	<parameter type="short" varname="e15" etype="UI16"/>
	<parameter type="short" varname="e14" etype="UI16"/>
	<parameter type="short" varname="e13" etype="UI16"/>
	<parameter type="short" varname="e12" etype="UI16"/>
	<parameter type="short" varname="e11" etype="UI16"/>
	<parameter type="short" varname="e10" etype="UI16"/>
	<parameter type="short" varname="e9" etype="UI16"/>
	<parameter type="short" varname="e8" etype="UI16"/>
	<parameter type="short" varname="e7" etype="UI16"/>
	<parameter type="short" varname="e6" etype="UI16"/>
	<parameter type="short" varname="e5" etype="UI16"/>
	<parameter type="short" varname="e4" etype="UI16"/>
	<parameter type="short" varname="e3" etype="UI16"/>
	<parameter type="short" varname="e2" etype="UI16"/>
	<parameter type="short" varname="e1" etype="UI16"/>
	<parameter type="short" varname="e0" etype="UI16"/>
	<description>Set packed 16-bit integers in "dst" with the supplied values in reverse order.</description>
	<operation>
dst[15:0] := e15
dst[31:16] := e14
dst[47:32] := e13
dst[63:48] := e12
dst[79:64] := e11
dst[95:80] := e10
dst[111:96] := e9
dst[127:112] := e8
dst[143:128] := e7
dst[159:144] := e6
dst[175:160] := e5
dst[191:176] := e4
dst[207:192] := e3
dst[223:208] := e2
dst[239:224] := e1
dst[255:240] := e0
dst[MAX:256] := 0
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX" sequence="TRUE" name="_mm256_setr_epi32">
	<type>Integer</type>
	<CPUID>AVX</CPUID>
	<category>Set</category>
	<return type="__m256i" varname="dst" etype="UI32"/>
	<parameter type="int" varname="e7" etype="UI32"/>
	<parameter type="int" varname="e6" etype="UI32"/>
	<parameter type="int" varname="e5" etype="UI32"/>
	<parameter type="int" varname="e4" etype="UI32"/>
	<parameter type="int" varname="e3" etype="UI32"/>
	<parameter type="int" varname="e2" etype="UI32"/>
	<parameter type="int" varname="e1" etype="UI32"/>
	<parameter type="int" varname="e0" etype="UI32"/>
	<description>Set packed 32-bit integers in "dst" with the supplied values in reverse order.</description>
	<operation>
dst[31:0] := e7
dst[63:32] := e6
dst[95:64] := e5
dst[127:96] := e4
dst[159:128] := e3
dst[191:160] := e2
dst[223:192] := e1
dst[255:224] := e0
dst[MAX:256] := 0
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX" sequence="TRUE" name="_mm256_setr_epi64x">
	<type>Integer</type>
	<CPUID>AVX</CPUID>
	<category>Set</category>
	<return type="__m256i" varname="dst" etype="UI64"/>
	<parameter type="__int64" varname="e3" etype="UI64"/>
	<parameter type="__int64" varname="e2" etype="UI64"/>
	<parameter type="__int64" varname="e1" etype="UI64"/>
	<parameter type="__int64" varname="e0" etype="UI64"/>
	<description>Set packed 64-bit integers in "dst" with the supplied values in reverse order.</description>
	<operation>
dst[63:0] := e3
dst[127:64] := e2
dst[191:128] := e1
dst[255:192] := e0
dst[MAX:256] := 0
	</operation>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX" name="_mm256_castsi256_si128">
	<type>Integer</type>
	<CPUID>AVX</CPUID>
	<category>Cast</category>
	<return type="__m128i" varname="dst" etype="M128"/>
	<parameter type="__m256i" varname="a" etype="M128"/>
	<description>Cast vector of type __m256i to type __m128i. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency.</description>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX" name="_mm256_castsi128_si256">
	<type>Integer</type>
	<CPUID>AVX</CPUID>
	<category>Cast</category>
	<return type="__m256i" varname="dst" etype="M256"/>
	<parameter type="__m128i" varname="a" etype="M256"/>
	<description>Cast vector of type __m128i to type __m256i; the upper 128 bits of the result are undefined. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency.</description>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX" name="_mm256_zextsi128_si256">
	<type>Integer</type>
	<CPUID>AVX</CPUID>
	<category>Cast</category>
	<return type="__m256i" varname="dst" etype="M256"/>
	<parameter type="__m128i" varname="a" etype="M256"/>
	<description>Cast vector of type __m128i to type __m256i; the upper 128 bits of the result are zeroed. This intrinsic is only used for compilation and does not generate any instructions, thus it has zero latency.</description>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX" name="_mm256_undefined_si256">
	<type>Integer</type>
	<CPUID>AVX</CPUID>
	<category>General Support</category>
	<return type="__m256i" varname="dst" etype="M256"/>
	<parameter type="void"/>
	<description>Return vector of type __m256i with undefined elements.</description>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="MMX" name="_mm_setzero_si64">
	<type>Integer</type>
	<CPUID>MMX</CPUID>
	<category>Set</category>
	<return type="__m64" varname="dst" etype="FP32"/>
	<parameter type="void"/>
	<description>Return vector of type __m64 with all elements set to zero.</description>
	<operation>
dst[MAX:0] := 0
	</operation>
	<instruction name="PXOR" form="mm, mm" xed="PXOR_MMXq_MMXq"/>
	<header>mmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE" sequence="TRUE" name="_MM_TRANSPOSE4_PS">
	<CPUID>SSE</CPUID>
	<category>Swizzle</category>
	<return type="void"/>
	<parameter type="__m128" varname="row0" etype="FP32"/>
	<parameter type="__m128" varname="row1" etype="FP32"/>
	<parameter type="__m128" varname="row2" etype="FP32"/>
	<parameter type="__m128" varname="row3" etype="FP32"/>
	<description>Macro: Transpose the 4x4 matrix formed by the 4 rows of single-precision (32-bit) floating-point elements in "row0", "row1", "row2", and "row3", and store the transposed matrix in these vectors ("row0" now contains column 0, etc.).</description>
	<operation>
__m128 tmp3, tmp2, tmp1, tmp0;
tmp0 := _mm_unpacklo_ps(row0, row1);
tmp2 := _mm_unpacklo_ps(row2, row3);
tmp1 := _mm_unpackhi_ps(row0, row1);
tmp3 := _mm_unpackhi_ps(row2, row3);
row0 := _mm_movelh_ps(tmp0, tmp2);
row1 := _mm_movehl_ps(tmp2, tmp0);
row2 := _mm_movelh_ps(tmp1, tmp3);
row3 := _mm_movehl_ps(tmp3, tmp1);
	</operation>
	<header>xmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE2" name="_mm_setzero_si128">
	<type>Integer</type>
	<CPUID>SSE2</CPUID>
	<category>Set</category>
	<return type="__m128i" varname="dst" etype="M128"/>
	<description>Return vector of type __m128i with all elements set to zero.</description>
	<operation>
dst[MAX:0] := 0
	</operation>
	<instruction name="PXOR" form="xmm, xmm" xed="PXOR_XMMdq_XMMdq"/>
	<header>emmintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm512_clmulepi64_epi128">
	<type>Integer</type>
	<CPUID>VPCLMULQDQ</CPUID>
	<category>Application-Targeted</category>
	<return type="__m512i" varname="dst" etype="M128"/>
	<parameter type="__m512i" varname="b" etype="M128"/>
	<parameter type="__m512i" varname="c" etype="M128"/>
	<parameter type="const int" varname="Imm8" etype="IMM" immwidth="8"/>
	<description>Carry-less multiplication of one quadword of
		'b' by one quadword of 'c', stores
		the 128-bit result in 'dst'. The immediate 'Imm8' is
		used to determine which quadwords of 'b'
		and 'c' should be used.</description>
	<operation>
DEFINE PCLMUL128(X,Y) {
	FOR i := 0 to 63
		TMP[i] := X[ 0 ] and Y[ i ]
		FOR j := 1 to i
			TMP[i] := TMP[i] xor (X[ j ] and Y[ i - j ])
		ENDFOR
		DEST[ i ] := TMP[ i ]
	ENDFOR
	FOR i := 64 to 126
		TMP[i] := 0
		FOR j := i - 63 to 63
			TMP[i] := TMP[i] xor (X[ j ] and Y[ i - j ])
		ENDFOR
		DEST[ i ] := TMP[ i ]
	ENDFOR
	DEST[127] := 0
	RETURN DEST // 128b vector
}
FOR i := 0 to 3
	IF Imm8[0] == 0
		TEMP1 := b.m128[i].qword[0]
	ELSE
		TEMP1 := b.m128[i].qword[1]
	FI
	IF Imm8[4] == 0
		TEMP2 := c.m128[i].qword[0]
	ELSE
		TEMP2 := c.m128[i].qword[1]
	FI
	dst.m128[i] := PCLMUL128(TEMP1, TEMP2)
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VPCLMULQDQ" form="zmm, zmm, zmm, imm8" xed="VPCLMULQDQ_ZMMu128_ZMMu64_ZMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm256_clmulepi64_epi128">
	<type>Integer</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>VPCLMULQDQ</CPUID>
	<category>Application-Targeted</category>
	<return type="__m256i" varname="dst" etype="M128"/>
	<parameter type="__m256i" varname="b" etype="M128"/>
	<parameter type="__m256i" varname="c" etype="M128"/>
	<parameter type="const int" varname="Imm8" etype="IMM" immwidth="8"/>
	<description>Carry-less multiplication of one quadword of
		'b' by one quadword of 'c', stores
		the 128-bit result in 'dst'. The immediate 'Imm8' is
		used to determine which quadwords of 'b'
		and 'c' should be used.</description>
	<operation>
DEFINE PCLMUL128(X,Y) {
	FOR i := 0 to 63
		TMP[i] := X[ 0 ] and Y[ i ]
		FOR j := 1 to i
			TMP[i] := TMP[i] xor (X[ j ] and Y[ i - j ])
		ENDFOR
		DEST[ i ] := TMP[ i ]
	ENDFOR
	FOR i := 64 to 126
		TMP[i] := 0
		FOR j := i - 63 to 63
			TMP[i] := TMP[i] xor (X[ j ] and Y[ i - j ])
		ENDFOR
		DEST[ i ] := TMP[ i ]
	ENDFOR
	DEST[127] := 0
	RETURN DEST // 128b vector
}
FOR i := 0 to 1
	IF Imm8[0] == 0
		TEMP1 := b.m128[i].qword[0]
	ELSE
		TEMP1 := b.m128[i].qword[1]
	FI
	IF Imm8[4] == 0
		TEMP2 := c.m128[i].qword[0]
	ELSE
		TEMP2 := c.m128[i].qword[1]
	FI
	dst.m128[i] := PCLMUL128(TEMP1, TEMP2)
ENDFOR
dst[MAX:256] := 0
	</operation>
	<instruction name="VPCLMULQDQ" form="ymm, ymm, ymm, imm8" xed="VPCLMULQDQ_YMMu128_YMMu64_YMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_rdtsc">
	<CPUID>TSC</CPUID>
	<category>General Support</category>
	<return type="__int64" varname="dst" etype="UI64"/>
	<parameter type="void"/>
	<description>Copy the current 64-bit value of the processor's time-stamp counter into "dst".</description>
	<operation>dst[63:0] := TimeStampCounter
	</operation>
	<instruction name="RDTSC" xed="RDTSC"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_xsusldtrk">
	<CPUID>TSXLDTRK</CPUID>
	<category>Miscellaneous</category>
	<return type="void"/>
	<description>Mark the start of a TSX (HLE/RTM) suspend load address tracking region. If this is used inside a transactional region, subsequent loads are not added to the read set of the transaction. If this is used inside a suspend load address tracking region it will cause transaction abort. If this is used outside of a transactional region it behaves like a NOP.</description>
	<instruction name="XSUSLDTRK" xed="XSUSLDTRK"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_xresldtrk">
	<CPUID>TSXLDTRK</CPUID>
	<category>Miscellaneous</category>
	<return type="void"/>
	<description>Mark the end of a TSX (HLE/RTM) suspend load address tracking region. If this is used inside a suspend load address tracking region it will end the suspend region and all following load addresses will be added to the transaction read set. If this is used inside an active transaction but not in a suspend region it will cause transaction abort. If this is used outside of a transactional region it behaves like a NOP.</description>
	<instruction name="XRESLDTRK" xed="XRESLDTRK"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.2" vexEq="TRUE" name="_mm_cmpestrc">
	<type>Flag</type>
	<CPUID>SSE4.2</CPUID>
	<category>String Compare</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="int" varname="la" etype="UI32"/>
	<parameter type="__m128i" varname="b" etype="M128"/>
	<parameter type="int" varname="lb" etype="UI32"/>
	<parameter type="const int" varname="imm8" etype="IMM" immwidth="8"/>
	<description>Compare packed strings in "a" and "b" with lengths "la" and "lb" using the control in "imm8", and returns 1 if the resulting mask was non-zero, and 0 otherwise.
	[strcmp_note]</description>
	<operation>
size := (imm8[0] ? 16 : 8) // 8 or 16-bit characters
UpperBound := (128 / size) - 1
BoolRes := 0
// compare all characters
aInvalid := 0
bInvalid := 0
FOR i := 0 to UpperBound
	m := i*size
	FOR j := 0 to UpperBound
		n := j*size
		BoolRes.word[i].bit[j] := (a[m+size-1:m] == b[n+size-1:n]) ? 1 : 0
		
		// invalidate characters after EOS
		IF i == la
			aInvalid := 1
		FI
		IF j == lb
			bInvalid := 1
		FI
		
		// override comparisons for invalid characters
		CASE (imm8[3:2]) OF
		0:  // equal any
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			FI
		1:  // ranges
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			FI
		2:  // equal each
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 1
			FI
		3:  // equal ordered
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 1
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 1
			FI
		ESAC
	ENDFOR
ENDFOR
// aggregate results
CASE (imm8[3:2]) OF
0:  // equal any
	IntRes1 := 0
	FOR i := 0 to UpperBound
		FOR j := 0 to UpperBound
			IntRes1[i] := IntRes1[i] OR BoolRes.word[i].bit[j]
		ENDFOR
	ENDFOR
1:  // ranges
	IntRes1 := 0
	FOR i := 0 to UpperBound
		FOR j := 0 to UpperBound
			IntRes1[i] := IntRes1[i] OR (BoolRes.word[i].bit[j] AND BoolRes.word[i].bit[j+1])
			j += 2
		ENDFOR
	ENDFOR
2:  // equal each
	IntRes1 := 0
	FOR i := 0 to UpperBound
		IntRes1[i] := BoolRes.word[i].bit[i]
	ENDFOR
3:  // equal ordered
	IntRes1 := (imm8[0] ? 0xFF : 0xFFFF)
	FOR i := 0 to UpperBound
		k := i
		FOR j := 0 to UpperBound-i
			IntRes1[i] := IntRes1[i] AND BoolRes.word[k].bit[j]
			k := k+1
		ENDFOR
	ENDFOR
ESAC
// optionally negate results
FOR i := 0 to UpperBound
	IF imm8[4]
		IF imm8[5] // only negate valid
			IF i &gt;= lb // invalid, don't negate
				IntRes2[i] := IntRes1[i]
			ELSE // valid, negate
				IntRes2[i] := -1 XOR IntRes1[i]
			FI
		ELSE // negate all
			IntRes2[i] := -1 XOR IntRes1[i]
		FI
	ELSE // don't negate
		IntRes2[i] := IntRes1[i]
	FI
ENDFOR
// output
dst := (IntRes2 != 0)
	</operation>
	<instruction name="PCMPESTRI" form="xmm, xmm, imm8" xed="PCMPESTRI_XMMdq_XMMdq_IMMb"/>
	<header>nmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.2" vexEq="TRUE" name="_mm_cmpestro">
	<type>Flag</type>
	<CPUID>SSE4.2</CPUID>
	<category>String Compare</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="int" varname="la" etype="UI32"/>
	<parameter type="__m128i" varname="b" etype="M128"/>
	<parameter type="int" varname="lb" etype="UI32"/>
	<parameter type="const int" varname="imm8" etype="IMM" immwidth="8"/>
	<description>Compare packed strings in "a" and "b" with lengths "la" and "lb" using the control in "imm8", and returns bit 0 of the resulting bit mask.
	[strcmp_note]</description>
	<operation>
size := (imm8[0] ? 16 : 8) // 8 or 16-bit characters
UpperBound := (128 / size) - 1
BoolRes := 0
// compare all characters
aInvalid := 0
bInvalid := 0
FOR i := 0 to UpperBound
	m := i*size
	FOR j := 0 to UpperBound
		n := j*size
		BoolRes.word[i].bit[j] := (a[m+size-1:m] == b[n+size-1:n]) ? 1 : 0
		
		// invalidate characters after EOS
		IF i == la
			aInvalid := 1
		FI
		IF j == lb
			bInvalid := 1
		FI
		
		// override comparisons for invalid characters
		CASE (imm8[3:2]) OF
		0:  // equal any
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			FI
		1:  // ranges
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			FI
		2:  // equal each
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 1
			FI
		3:  // equal ordered
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 1
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 1
			FI
		ESAC
	ENDFOR
ENDFOR
// aggregate results
CASE (imm8[3:2]) OF
0:  // equal any
	IntRes1 := 0
	FOR i := 0 to UpperBound
		FOR j := 0 to UpperBound
			IntRes1[i] := IntRes1[i] OR BoolRes.word[i].bit[j]
		ENDFOR
	ENDFOR
1:  // ranges
	IntRes1 := 0
	FOR i := 0 to UpperBound
		FOR j := 0 to UpperBound
			IntRes1[i] := IntRes1[i] OR (BoolRes.word[i].bit[j] AND BoolRes.word[i].bit[j+1])
			j += 2
		ENDFOR
	ENDFOR
2:  // equal each
	IntRes1 := 0
	FOR i := 0 to UpperBound
		IntRes1[i] := BoolRes.word[i].bit[i]
	ENDFOR
3:  // equal ordered
	IntRes1 := (imm8[0] ? 0xFF : 0xFFFF)
	FOR i := 0 to UpperBound
		k := i
		FOR j := 0 to UpperBound-i
			IntRes1[i] := IntRes1[i] AND BoolRes.word[k].bit[j]
			k := k+1
		ENDFOR
	ENDFOR
ESAC
// optionally negate results
FOR i := 0 to UpperBound
	IF imm8[4]
		IF imm8[5] // only negate valid
			IF i &gt;= lb // invalid, don't negate
				IntRes2[i] := IntRes1[i]
			ELSE // valid, negate
				IntRes2[i] := -1 XOR IntRes1[i]
			FI
		ELSE // negate all
			IntRes2[i] := -1 XOR IntRes1[i]
		FI
	ELSE // don't negate
		IntRes2[i] := IntRes1[i]
	FI
ENDFOR
// output
dst := IntRes2[0]
	</operation>
	<instruction name="PCMPESTRI" form="xmm, xmm, imm8" xed="PCMPESTRI_XMMdq_XMMdq_IMMb"/>
	<header>nmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.2" vexEq="TRUE" name="_mm_cmpestra">
	<type>Flag</type>
	<CPUID>SSE4.2</CPUID>
	<category>String Compare</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="int" varname="la" etype="UI32"/>
	<parameter type="__m128i" varname="b" etype="M128"/>
	<parameter type="int" varname="lb" etype="UI32"/>
	<parameter type="const int" varname="imm8" etype="IMM" immwidth="8"/>
	<description>Compare packed strings in "a" and "b" with lengths "la" and "lb" using the control in "imm8", and returns 1 if "b" did not contain a null character and the resulting mask was zero, and 0 otherwise.
	[strcmp_note]</description>
	<operation>
size := (imm8[0] ? 16 : 8) // 8 or 16-bit characters
UpperBound := (128 / size) - 1
BoolRes := 0
// compare all characters
aInvalid := 0
bInvalid := 0
FOR i := 0 to UpperBound
	m := i*size
	FOR j := 0 to UpperBound
		n := j*size
		BoolRes.word[i].bit[j] := (a[m+size-1:m] == b[n+size-1:n]) ? 1 : 0
		
		// invalidate characters after EOS
		IF i == la
			aInvalid := 1
		FI
		IF j == lb
			bInvalid := 1
		FI
		
		// override comparisons for invalid characters
		CASE (imm8[3:2]) OF
		0:  // equal any
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			FI
		1:  // ranges
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			FI
		2:  // equal each
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 1
			FI
		3:  // equal ordered
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 1
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 1
			FI
		ESAC
	ENDFOR
ENDFOR
// aggregate results
CASE (imm8[3:2]) OF
0:  // equal any
	IntRes1 := 0
	FOR i := 0 to UpperBound
		FOR j := 0 to UpperBound
			IntRes1[i] := IntRes1[i] OR BoolRes.word[i].bit[j]
		ENDFOR
	ENDFOR
1:  // ranges
	IntRes1 := 0
	FOR i := 0 to UpperBound
		FOR j := 0 to UpperBound
			IntRes1[i] := IntRes1[i] OR (BoolRes.word[i].bit[j] AND BoolRes.word[i].bit[j+1])
			j += 2
		ENDFOR
	ENDFOR
2:  // equal each
	IntRes1 := 0
	FOR i := 0 to UpperBound
		IntRes1[i] := BoolRes.word[i].bit[i]
	ENDFOR
3:  // equal ordered
	IntRes1 := (imm8[0] ? 0xFF : 0xFFFF)
	FOR i := 0 to UpperBound
		k := i
		FOR j := 0 to UpperBound-i
			IntRes1[i] := IntRes1[i] AND BoolRes.word[k].bit[j]
			k := k+1
		ENDFOR
	ENDFOR
ESAC
// optionally negate results
FOR i := 0 to UpperBound
	IF imm8[4]
		IF imm8[5] // only negate valid
			IF i &gt;= lb // invalid, don't negate
				IntRes2[i] := IntRes1[i]
			ELSE // valid, negate
				IntRes2[i] := -1 XOR IntRes1[i]
			FI
		ELSE // negate all
			IntRes2[i] := -1 XOR IntRes1[i]
		FI
	ELSE // don't negate
		IntRes2[i] := IntRes1[i]
	FI
ENDFOR
// output
dst := (IntRes2 == 0) AND (lb &gt; UpperBound)
	</operation>
	<instruction name="PCMPESTRI" form="xmm, xmm, imm8" xed="PCMPESTRI_XMMdq_XMMdq_IMMb"/>
	<header>nmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.2" vexEq="TRUE" name="_mm_cmpestri">
	<type>Flag</type>
	<CPUID>SSE4.2</CPUID>
	<category>String Compare</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="int" varname="la" etype="UI32"/>
	<parameter type="__m128i" varname="b" etype="M128"/>
	<parameter type="int" varname="lb" etype="UI32"/>
	<parameter type="const int" varname="imm8" etype="IMM" immwidth="8"/>
	<description>Compare packed strings in "a" and "b" with lengths "la" and "lb" using the control in "imm8", and store the generated index in "dst".
	[strcmp_note]</description>
	<operation>
size := (imm8[0] ? 16 : 8) // 8 or 16-bit characters
UpperBound := (128 / size) - 1
BoolRes := 0
// compare all characters
aInvalid := 0
bInvalid := 0
FOR i := 0 to UpperBound
	m := i*size
	FOR j := 0 to UpperBound
		n := j*size
		BoolRes.word[i].bit[j] := (a[m+size-1:m] == b[n+size-1:n]) ? 1 : 0
		
		// invalidate characters after EOS
		IF i == la
			aInvalid := 1
		FI
		IF j == lb
			bInvalid := 1
		FI
		
		// override comparisons for invalid characters
		CASE (imm8[3:2]) OF
		0:  // equal any
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			FI
		1:  // ranges
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			FI
		2:  // equal each
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 1
			FI
		3:  // equal ordered
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 1
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 1
			FI
		ESAC
	ENDFOR
ENDFOR
// aggregate results
CASE (imm8[3:2]) OF
0:  // equal any
	IntRes1 := 0
	FOR i := 0 to UpperBound
		FOR j := 0 to UpperBound
			IntRes1[i] := IntRes1[i] OR BoolRes.word[i].bit[j]
		ENDFOR
	ENDFOR
1:  // ranges
	IntRes1 := 0
	FOR i := 0 to UpperBound
		FOR j := 0 to UpperBound
			IntRes1[i] := IntRes1[i] OR (BoolRes.word[i].bit[j] AND BoolRes.word[i].bit[j+1])
			j += 2
		ENDFOR
	ENDFOR
2:  // equal each
	IntRes1 := 0
	FOR i := 0 to UpperBound
		IntRes1[i] := BoolRes.word[i].bit[i]
	ENDFOR
3:  // equal ordered
	IntRes1 := (imm8[0] ? 0xFF : 0xFFFF)
	FOR i := 0 to UpperBound
		k := i
		FOR j := 0 to UpperBound-i
			IntRes1[i] := IntRes1[i] AND BoolRes.word[k].bit[j]
			k := k+1
		ENDFOR
	ENDFOR
ESAC
// optionally negate results
FOR i := 0 to UpperBound
	IF imm8[4]
		IF imm8[5] // only negate valid
			IF i &gt;= lb // invalid, don't negate
				IntRes2[i] := IntRes1[i]
			ELSE // valid, negate
				IntRes2[i] := -1 XOR IntRes1[i]
			FI
		ELSE // negate all
			IntRes2[i] := -1 XOR IntRes1[i]
		FI
	ELSE // don't negate
		IntRes2[i] := IntRes1[i]
	FI
ENDFOR
// output
IF imm8[6] // most significant bit
	tmp := UpperBound
	dst := tmp
	DO WHILE ((tmp &gt;= 0) AND a[tmp] == 0)
		tmp := tmp - 1
		dst := tmp
	OD
ELSE // least significant bit
	tmp := 0
	dst := tmp
	DO WHILE ((tmp &lt;= UpperBound) AND a[tmp] == 0)
		tmp := tmp + 1
		dst := tmp
	OD
FI
	</operation>
	<instruction name="PCMPESTRI" form="xmm, xmm, imm8" xed="PCMPESTRI_XMMdq_XMMdq_IMMb"/>
	<header>nmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.2" vexEq="TRUE" name="_mm_cmpistra">
	<type>Flag</type>
	<CPUID>SSE4.2</CPUID>
	<category>String Compare</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="__m128i" varname="b" etype="M128"/>
	<parameter type="const int" varname="imm8" etype="IMM" immwidth="8"/>
	<description>Compare packed strings with implicit lengths in "a" and "b" using the control in "imm8", and returns 1 if "b" did not contain a null character and the resulting mask was zero, and 0 otherwise.
	[strcmp_note]</description>
	<operation>
size := (imm8[0] ? 16 : 8) // 8 or 16-bit characters
UpperBound := (128 / size) - 1
BoolRes := 0
// compare all characters
aInvalid := 0
bInvalid := 0
FOR i := 0 to UpperBound
	m := i*size
	FOR j := 0 to UpperBound
		n := j*size
		BoolRes.word[i].bit[j] := (a[m+size-1:m] == b[n+size-1:n]) ? 1 : 0
		
		// invalidate characters after EOS
		IF a[m+size-1:m] == 0
			aInvalid := 1
		FI
		IF b[n+size-1:n] == 0
			bInvalid := 1
		FI
		
		// override comparisons for invalid characters
		CASE (imm8[3:2]) OF
		0:  // equal any
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			FI
		1:  // ranges
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			FI
		2:  // equal each
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 1
			FI
		3:  // equal ordered
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 1
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 1
			FI
		ESAC
	ENDFOR
ENDFOR
// aggregate results
CASE (imm8[3:2]) OF
0:  // equal any
	IntRes1 := 0
	FOR i := 0 to UpperBound
		FOR j := 0 to UpperBound
			IntRes1[i] := IntRes1[i] OR BoolRes.word[i].bit[j]
		ENDFOR
	ENDFOR
1:  // ranges
	IntRes1 := 0
	FOR i := 0 to UpperBound
		FOR j := 0 to UpperBound
			IntRes1[i] := IntRes1[i] OR (BoolRes.word[i].bit[j] AND BoolRes.word[i].bit[j+1])
			j += 2
		ENDFOR
	ENDFOR
2:  // equal each
	IntRes1 := 0
	FOR i := 0 to UpperBound
		IntRes1[i] := BoolRes.word[i].bit[i]
	ENDFOR
3:  // equal ordered
	IntRes1 := (imm8[0] ? 0xFF : 0xFFFF)
	FOR i := 0 to UpperBound
		k := i
		FOR j := 0 to UpperBound-i
			IntRes1[i] := IntRes1[i] AND BoolRes.word[k].bit[j]
			k := k+1
		ENDFOR
	ENDFOR
ESAC
// optionally negate results
bInvalid := 0
FOR i := 0 to UpperBound
	IF imm8[4]
		IF imm8[5] // only negate valid
			IF b[n+size-1:n] == 0
				bInvalid := 1
			FI
			IF bInvalid // invalid, don't negate
				IntRes2[i] := IntRes1[i]
			ELSE // valid, negate
				IntRes2[i] := -1 XOR IntRes1[i]
			FI
		ELSE // negate all
			IntRes2[i] := -1 XOR IntRes1[i]
		FI
	ELSE // don't negate
		IntRes2[i] := IntRes1[i]
	FI
ENDFOR
// output
dst := (IntRes2 == 0) AND bInvalid
	</operation>
	<instruction name="PCMPISTRI" form="xmm, xmm, imm8" xed="PCMPISTRI_XMMdq_XMMdq_IMMb"/>
	<header>nmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.2" vexEq="TRUE" name="_mm_cmpestrm">
	<CPUID>SSE4.2</CPUID>
	<category>String Compare</category>
	<return type="__m128i" varname="dst" etype="M128"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="int" varname="la" etype="UI32"/>
	<parameter type="__m128i" varname="b" etype="M128"/>
	<parameter type="int" varname="lb" etype="UI32"/>
	<parameter type="const int" varname="imm8" etype="IMM" immwidth="8"/>
	<description>Compare packed strings in "a" and "b" with lengths "la" and "lb" using the control in "imm8", and store the generated mask in "dst".
	[strcmp_note]</description>
	<operation>
size := (imm8[0] ? 16 : 8) // 8 or 16-bit characters
UpperBound := (128 / size) - 1
BoolRes := 0
// compare all characters
aInvalid := 0
bInvalid := 0
FOR i := 0 to UpperBound
	m := i*size
	FOR j := 0 to UpperBound
		n := j*size
		BoolRes.word[i].bit[j] := (a[m+size-1:m] == b[n+size-1:n]) ? 1 : 0
		
		// invalidate characters after EOS
		IF i == la
			aInvalid := 1
		FI
		IF j == lb
			bInvalid := 1
		FI
		
		// override comparisons for invalid characters
		CASE (imm8[3:2]) OF
		0:  // equal any
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			FI
		1:  // ranges
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			FI
		2:  // equal each
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 1
			FI
		3:  // equal ordered
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 1
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 1
			FI
		ESAC
	ENDFOR
ENDFOR
// aggregate results
CASE (imm8[3:2]) OF
0:  // equal any
	IntRes1 := 0
	FOR i := 0 to UpperBound
		FOR j := 0 to UpperBound
			IntRes1[i] := IntRes1[i] OR BoolRes.word[i].bit[j]
		ENDFOR
	ENDFOR
1:  // ranges
	IntRes1 := 0
	FOR i := 0 to UpperBound
		FOR j := 0 to UpperBound
			IntRes1[i] := IntRes1[i] OR (BoolRes.word[i].bit[j] AND BoolRes.word[i].bit[j+1])
			j += 2
		ENDFOR
	ENDFOR
2:  // equal each
	IntRes1 := 0
	FOR i := 0 to UpperBound
		IntRes1[i] := BoolRes.word[i].bit[i]
	ENDFOR
3:  // equal ordered
	IntRes1 := (imm8[0] ? 0xFF : 0xFFFF)
	FOR i := 0 to UpperBound
		k := i
		FOR j := 0 to UpperBound-i
			IntRes1[i] := IntRes1[i] AND BoolRes.word[k].bit[j]
			k := k+1
		ENDFOR
	ENDFOR
ESAC
// optionally negate results
FOR i := 0 to UpperBound
	IF imm8[4]
		IF imm8[5] // only negate valid
			IF i &gt;= lb // invalid, don't negate
				IntRes2[i] := IntRes1[i]
			ELSE // valid, negate
				IntRes2[i] := -1 XOR IntRes1[i]
			FI
		ELSE // negate all
			IntRes2[i] := -1 XOR IntRes1[i]
		FI
	ELSE // don't negate
		IntRes2[i] := IntRes1[i]
	FI
ENDFOR
// output
IF imm8[6] // byte / word mask
	FOR i := 0 to UpperBound
		j := i*size
		IF IntRes2[i]
			dst[j+size-1:j] := (imm8[0] ? 0xFF : 0xFFFF)
		ELSE
			dst[j+size-1:j] := 0
		FI
	ENDFOR
ELSE // bit mask
	dst[UpperBound:0] := IntRes2[UpperBound:0]
	dst[127:UpperBound+1] := 0
FI
	</operation>
	<instruction name="PCMPESTRM" form="xmm, xmm, imm8" xed="PCMPESTRM_XMMdq_XMMdq_IMMb"/>
	<header>nmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.2" vexEq="TRUE" name="_mm_cmpistro">
	<type>Flag</type>
	<CPUID>SSE4.2</CPUID>
	<category>String Compare</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="__m128i" varname="b" etype="M128"/>
	<parameter type="const int" varname="imm8" etype="IMM" immwidth="8"/>
	<description>Compare packed strings with implicit lengths in "a" and "b" using the control in "imm8", and returns bit 0 of the resulting bit mask.
	[strcmp_note]</description>
	<operation>
size := (imm8[0] ? 16 : 8) // 8 or 16-bit characters
UpperBound := (128 / size) - 1
BoolRes := 0
// compare all characters
aInvalid := 0
bInvalid := 0
FOR i := 0 to UpperBound
	m := i*size
	FOR j := 0 to UpperBound
		n := j*size
		BoolRes.word[i].bit[j] := (a[m+size-1:m] == b[n+size-1:n]) ? 1 : 0
		
		// invalidate characters after EOS
		IF a[m+size-1:m] == 0
			aInvalid := 1
		FI
		IF b[n+size-1:n] == 0
			bInvalid := 1
		FI
		
		// override comparisons for invalid characters
		CASE (imm8[3:2]) OF
		0:  // equal any
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			FI
		1:  // ranges
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			FI
		2:  // equal each
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 1
			FI
		3:  // equal ordered
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 1
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 1
			FI
		ESAC
	ENDFOR
ENDFOR
// aggregate results
CASE (imm8[3:2]) OF
0:  // equal any
	IntRes1 := 0
	FOR i := 0 to UpperBound
		FOR j := 0 to UpperBound
			IntRes1[i] := IntRes1[i] OR BoolRes.word[i].bit[j]
		ENDFOR
	ENDFOR
1:  // ranges
	IntRes1 := 0
	FOR i := 0 to UpperBound
		FOR j := 0 to UpperBound
			IntRes1[i] := IntRes1[i] OR (BoolRes.word[i].bit[j] AND BoolRes.word[i].bit[j+1])
			j += 2
		ENDFOR
	ENDFOR
2:  // equal each
	IntRes1 := 0
	FOR i := 0 to UpperBound
		IntRes1[i] := BoolRes.word[i].bit[i]
	ENDFOR
3:  // equal ordered
	IntRes1 := (imm8[0] ? 0xFF : 0xFFFF)
	FOR i := 0 to UpperBound
		k := i
		FOR j := 0 to UpperBound-i
			IntRes1[i] := IntRes1[i] AND BoolRes.word[k].bit[j]
			k := k+1
		ENDFOR
	ENDFOR
ESAC
// optionally negate results
bInvalid := 0
FOR i := 0 to UpperBound
	IF imm8[4]
		IF imm8[5] // only negate valid
			IF b[n+size-1:n] == 0
				bInvalid := 1
			FI
			IF bInvalid // invalid, don't negate
				IntRes2[i] := IntRes1[i]
			ELSE // valid, negate
				IntRes2[i] := -1 XOR IntRes1[i]
			FI
		ELSE // negate all
			IntRes2[i] := -1 XOR IntRes1[i]
		FI
	ELSE // don't negate
		IntRes2[i] := IntRes1[i]
	FI
ENDFOR
// output
dst := IntRes2[0]
	</operation>
	<instruction name="PCMPISTRI" form="xmm, xmm, imm8" xed="PCMPISTRI_XMMdq_XMMdq_IMMb"/>
	<header>nmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.2" vexEq="TRUE" name="_mm_cmpistrc">
	<type>Flag</type>
	<CPUID>SSE4.2</CPUID>
	<category>String Compare</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="__m128i" varname="b" etype="M128"/>
	<parameter type="const int" varname="imm8" etype="IMM" immwidth="8"/>
	<description>Compare packed strings with implicit lengths in "a" and "b" using the control in "imm8", and returns 1 if the resulting mask was non-zero, and 0 otherwise.
	[strcmp_note]</description>
	<operation>
size := (imm8[0] ? 16 : 8) // 8 or 16-bit characters
UpperBound := (128 / size) - 1
BoolRes := 0
// compare all characters
aInvalid := 0
bInvalid := 0
FOR i := 0 to UpperBound
	m := i*size
	FOR j := 0 to UpperBound
		n := j*size
		BoolRes.word[i].bit[j] := (a[m+size-1:m] == b[n+size-1:n]) ? 1 : 0
		
		// invalidate characters after EOS
		IF a[m+size-1:m] == 0
			aInvalid := 1
		FI
		IF b[n+size-1:n] == 0
			bInvalid := 1
		FI
		
		// override comparisons for invalid characters
		CASE (imm8[3:2]) OF
		0:  // equal any
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			FI
		1:  // ranges
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			FI
		2:  // equal each
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 1
			FI
		3:  // equal ordered
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 1
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 1
			FI
		ESAC
	ENDFOR
ENDFOR
// aggregate results
CASE (imm8[3:2]) OF
0:  // equal any
	IntRes1 := 0
	FOR i := 0 to UpperBound
		FOR j := 0 to UpperBound
			IntRes1[i] := IntRes1[i] OR BoolRes.word[i].bit[j]
		ENDFOR
	ENDFOR
1:  // ranges
	IntRes1 := 0
	FOR i := 0 to UpperBound
		FOR j := 0 to UpperBound
			IntRes1[i] := IntRes1[i] OR (BoolRes.word[i].bit[j] AND BoolRes.word[i].bit[j+1])
			j += 2
		ENDFOR
	ENDFOR
2:  // equal each
	IntRes1 := 0
	FOR i := 0 to UpperBound
		IntRes1[i] := BoolRes.word[i].bit[i]
	ENDFOR
3:  // equal ordered
	IntRes1 := (imm8[0] ? 0xFF : 0xFFFF)
	FOR i := 0 to UpperBound
		k := i
		FOR j := 0 to UpperBound-i
			IntRes1[i] := IntRes1[i] AND BoolRes.word[k].bit[j]
			k := k+1
		ENDFOR
	ENDFOR
ESAC
// optionally negate results
bInvalid := 0
FOR i := 0 to UpperBound
	IF imm8[4]
		IF imm8[5] // only negate valid
			IF b[n+size-1:n] == 0
				bInvalid := 1
			FI
			IF bInvalid // invalid, don't negate
				IntRes2[i] := IntRes1[i]
			ELSE // valid, negate
				IntRes2[i] := -1 XOR IntRes1[i]
			FI
		ELSE // negate all
			IntRes2[i] := -1 XOR IntRes1[i]
		FI
	ELSE // don't negate
		IntRes2[i] := IntRes1[i]
	FI
ENDFOR
// output
dst := (IntRes2 != 0)
	</operation>
	<instruction name="PCMPISTRI" form="xmm, xmm, imm8" xed="PCMPISTRI_XMMdq_XMMdq_IMMb"/>
	<header>nmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.2" vexEq="TRUE" name="_mm_cmpistri">
	<type>Flag</type>
	<CPUID>SSE4.2</CPUID>
	<category>String Compare</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="__m128i" varname="b" etype="M128"/>
	<parameter type="const int" varname="imm8" etype="IMM" immwidth="8"/>
	<description>Compare packed strings with implicit lengths in "a" and "b" using the control in "imm8", and store the generated index in "dst".
	[strcmp_note]</description>
	<operation>
size := (imm8[0] ? 16 : 8) // 8 or 16-bit characters
UpperBound := (128 / size) - 1
BoolRes := 0
// compare all characters
aInvalid := 0
bInvalid := 0
FOR i := 0 to UpperBound
	m := i*size
	FOR j := 0 to UpperBound
		n := j*size
		BoolRes.word[i].bit[j] := (a[m+size-1:m] == b[n+size-1:n]) ? 1 : 0
		
		// invalidate characters after EOS
		IF a[m+size-1:m] == 0
			aInvalid := 1
		FI
		IF b[n+size-1:n] == 0
			bInvalid := 1
		FI
		
		// override comparisons for invalid characters
		CASE (imm8[3:2]) OF
		0:  // equal any
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			FI
		1:  // ranges
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			FI
		2:  // equal each
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 1
			FI
		3:  // equal ordered
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 1
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 1
			FI
		ESAC
	ENDFOR
ENDFOR
// aggregate results
CASE (imm8[3:2]) OF
0:  // equal any
	IntRes1 := 0
	FOR i := 0 to UpperBound
		FOR j := 0 to UpperBound
			IntRes1[i] := IntRes1[i] OR BoolRes.word[i].bit[j]
		ENDFOR
	ENDFOR
1:  // ranges
	IntRes1 := 0
	FOR i := 0 to UpperBound
		FOR j := 0 to UpperBound
			IntRes1[i] := IntRes1[i] OR (BoolRes.word[i].bit[j] AND BoolRes.word[i].bit[j+1])
			j += 2
		ENDFOR
	ENDFOR
2:  // equal each
	IntRes1 := 0
	FOR i := 0 to UpperBound
		IntRes1[i] := BoolRes.word[i].bit[i]
	ENDFOR
3:  // equal ordered
	IntRes1 := (imm8[0] ? 0xFF : 0xFFFF)
	FOR i := 0 to UpperBound
		k := i
		FOR j := 0 to UpperBound-i
			IntRes1[i] := IntRes1[i] AND BoolRes.word[k].bit[j]
			k := k+1
		ENDFOR
	ENDFOR
ESAC
// optionally negate results
bInvalid := 0
FOR i := 0 to UpperBound
	IF imm8[4]
		IF imm8[5] // only negate valid
			IF b[n+size-1:n] == 0
				bInvalid := 1
			FI
			IF bInvalid // invalid, don't negate
				IntRes2[i] := IntRes1[i]
			ELSE // valid, negate
				IntRes2[i] := -1 XOR IntRes1[i]
			FI
		ELSE // negate all
			IntRes2[i] := -1 XOR IntRes1[i]
		FI
	ELSE // don't negate
		IntRes2[i] := IntRes1[i]
	FI
ENDFOR
// output
IF imm8[6] // most significant bit
	tmp := UpperBound
	dst := tmp
	DO WHILE ((tmp &gt;= 0) AND a[tmp] == 0)
		tmp := tmp - 1
		dst := tmp
	OD
ELSE // least significant bit
	tmp := 0
	dst := tmp
	DO WHILE ((tmp &lt;= UpperBound) AND a[tmp] == 0)
		tmp := tmp + 1
		dst := tmp
	OD
FI
	</operation>
	<instruction name="PCMPISTRI" form="xmm, xmm, imm8" xed="PCMPISTRI_XMMdq_XMMdq_IMMb"/>
	<header>nmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.2" vexEq="TRUE" name="_mm_cmpistrm">
	<CPUID>SSE4.2</CPUID>
	<category>String Compare</category>
	<return type="__m128i" varname="dst" etype="M128"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="__m128i" varname="b" etype="M128"/>
	<parameter type="const int" varname="imm8" etype="IMM" immwidth="8"/>
	<description>Compare packed strings with implicit lengths in "a" and "b" using the control in "imm8", and store the generated mask in "dst".
	[strcmp_note]</description>
	<operation>
size := (imm8[0] ? 16 : 8) // 8 or 16-bit characters
UpperBound := (128 / size) - 1
BoolRes := 0
// compare all characters
aInvalid := 0
bInvalid := 0
FOR i := 0 to UpperBound
	m := i*size
	FOR j := 0 to UpperBound
		n := j*size
		BoolRes.word[i].bit[j] := (a[m+size-1:m] == b[n+size-1:n]) ? 1 : 0
		
		// invalidate characters after EOS
		IF a[m+size-1:m] == 0
			aInvalid := 1
		FI
		IF b[n+size-1:n] == 0
			bInvalid := 1
		FI
		
		// override comparisons for invalid characters
		CASE (imm8[3:2]) OF
		0:  // equal any
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			FI
		1:  // ranges
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			FI
		2:  // equal each
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 1
			FI
		3:  // equal ordered
			IF (!aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 0
			ELSE IF (aInvalid &amp;&amp; !bInvalid)
				BoolRes.word[i].bit[j] := 1
			ELSE IF (aInvalid &amp;&amp; bInvalid)
				BoolRes.word[i].bit[j] := 1
			FI
		ESAC
	ENDFOR
ENDFOR
// aggregate results
CASE (imm8[3:2]) OF
0:  // equal any
	IntRes1 := 0
	FOR i := 0 to UpperBound
		FOR j := 0 to UpperBound
			IntRes1[i] := IntRes1[i] OR BoolRes.word[i].bit[j]
		ENDFOR
	ENDFOR
1:  // ranges
	IntRes1 := 0
	FOR i := 0 to UpperBound
		FOR j := 0 to UpperBound
			IntRes1[i] := IntRes1[i] OR (BoolRes.word[i].bit[j] AND BoolRes.word[i].bit[j+1])
			j += 2
		ENDFOR
	ENDFOR
2:  // equal each
	IntRes1 := 0
	FOR i := 0 to UpperBound
		IntRes1[i] := BoolRes.word[i].bit[i]
	ENDFOR
3:  // equal ordered
	IntRes1 := (imm8[0] ? 0xFF : 0xFFFF)
	FOR i := 0 to UpperBound
		k := i
		FOR j := 0 to UpperBound-i
			IntRes1[i] := IntRes1[i] AND BoolRes.word[k].bit[j]
			k := k+1
		ENDFOR
	ENDFOR
ESAC
// optionally negate results
bInvalid := 0
FOR i := 0 to UpperBound
	IF imm8[4]
		IF imm8[5] // only negate valid
			IF b[n+size-1:n] == 0
				bInvalid := 1
			FI
			IF bInvalid // invalid, don't negate
				IntRes2[i] := IntRes1[i]
			ELSE // valid, negate
				IntRes2[i] := -1 XOR IntRes1[i]
			FI
		ELSE // negate all
			IntRes2[i] := -1 XOR IntRes1[i]
		FI
	ELSE // don't negate
		IntRes2[i] := IntRes1[i]
	FI
ENDFOR
// output
IF imm8[6] // byte / word mask
	FOR i := 0 to UpperBound
		j := i*size
		IF IntRes2[i]
			dst[j+size-1:j] := (imm8[0] ? 0xFF : 0xFFFF)
		ELSE
			dst[j+size-1:j] := 0
		FI
	ENDFOR
ELSE // bit mask
	dst[UpperBound:0] := IntRes2[UpperBound:0]
	dst[127:UpperBound+1] := 0
FI
	</operation>
	<instruction name="PCMPISTRM" form="xmm, xmm, imm8" xed="PCMPISTRM_XMMdq_XMMdq_IMMb"/>
	<header>nmmintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm256_aesdec_epi128">
	<type>Integer</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>VAES</CPUID>
	<category>Cryptography</category>
	<return type="__m256i" varname="dst" etype="M128"/>
	<parameter type="__m256i" varname="a" etype="M128"/>
	<parameter type="__m256i" varname="RoundKey" etype="M128"/>
	<description>Perform one round of an AES decryption flow on data (state) in "a" using the round key in "RoundKey", and store the results in "dst".</description>
	<operation>FOR j := 0 to 1
	i := j*128
	a[i+127:i] := InvShiftRows(a[i+127:i])
	a[i+127:i] := InvSubBytes(a[i+127:i])
	a[i+127:i] := InvMixColumns(a[i+127:i])
	dst[i+127:i] := a[i+127:i] XOR RoundKey[i+127:i]
ENDFOR
dst[MAX:256] := 0
	</operation>
	<instruction name="VAESDEC" form="ymm, ymm" xed="VAESDEC_YMMu128_YMMu128_YMMu128"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm256_aesenc_epi128">
	<type>Integer</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>VAES</CPUID>
	<category>Cryptography</category>
	<return type="__m256i" varname="dst" etype="M128"/>
	<parameter type="__m256i" varname="a" etype="M128"/>
	<parameter type="__m256i" varname="RoundKey" etype="M128"/>
	<description>Perform one round of an AES encryption flow on data (state) in "a" using the round key in "RoundKey", and store the results in "dst"."</description>
	<operation>FOR j := 0 to 1
	i := j*128
	a[i+127:i] := ShiftRows(a[i+127:i])
	a[i+127:i] := SubBytes(a[i+127:i])
	a[i+127:i] := MixColumns(a[i+127:i])
	dst[i+127:i] := a[i+127:i] XOR RoundKey[i+127:i]
ENDFOR
dst[MAX:256] := 0
	</operation>
	<instruction name="VAESENC" form="ymm, ymm" xed="VAESENC_YMMu128_YMMu128_YMMu128"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm256_aesdeclast_epi128">
	<type>Integer</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>VAES</CPUID>
	<category>Cryptography</category>
	<return type="__m256i" varname="dst" etype="M128"/>
	<parameter type="__m256i" varname="a" etype="M128"/>
	<parameter type="__m256i" varname="RoundKey" etype="M128"/>
	<description>Perform the last round of an AES decryption flow on data (state) in "a" using the round key in "RoundKey", and store the results in "dst".</description>
	<operation>FOR j := 0 to 1
	i := j*128
	a[i+127:i] := InvShiftRows(a[i+127:i])
	a[i+127:i] := InvSubBytes(a[i+127:i])
	dst[i+127:i] := a[i+127:i] XOR RoundKey[i+127:i]
ENDFOR
dst[MAX:256] := 0
	</operation>
	<instruction name="VAESDECLAST" form="ymm, ymm" xed="VAESDECLAST_YMMu128_YMMu128_YMMu128"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" vexEq="TRUE" name="_mm_aesenc_si128">
	<type>Integer</type>
	<CPUID>AES</CPUID>
	<category>Cryptography</category>
	<return type="__m128i" varname="dst" etype="M128"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="__m128i" varname="RoundKey" etype="M128"/>
	<description>Perform one round of an AES encryption flow on data (state) in "a" using the round key in "RoundKey", and store the result in "dst"."</description>
	<operation>a[127:0] := ShiftRows(a[127:0])
a[127:0] := SubBytes(a[127:0])
a[127:0] := MixColumns(a[127:0])
dst[127:0] := a[127:0] XOR RoundKey[127:0]
	</operation>
	<instruction name="AESENC" form="xmm, xmm" xed="AESENC_XMMdq_XMMdq"/>
	<header>wmmintrin.h</header>
</intrinsic>
<intrinsic tech="Other" vexEq="TRUE" name="_mm_aesenclast_si128">
	<type>Integer</type>
	<CPUID>AES</CPUID>
	<category>Cryptography</category>
	<return type="__m128i" varname="dst" etype="M128"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="__m128i" varname="RoundKey" etype="M128"/>
	<description>Perform the last round of an AES encryption flow on data (state) in "a" using the round key in "RoundKey", and store the result in "dst"."</description>
	<operation>a[127:0] := ShiftRows(a[127:0])
a[127:0] := SubBytes(a[127:0])
dst[127:0] := a[127:0] XOR RoundKey[127:0]
	</operation>
	<instruction name="AESENCLAST" form="xmm, xmm" xed="AESENCLAST_XMMdq_XMMdq"/>
	<header>wmmintrin.h</header>
</intrinsic>
<intrinsic tech="Other" vexEq="TRUE" name="_mm_aesdec_si128">
	<type>Integer</type>
	<CPUID>AES</CPUID>
	<category>Cryptography</category>
	<return type="__m128i" varname="dst" etype="M128"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="__m128i" varname="RoundKey" etype="M128"/>
	<description>Perform one round of an AES decryption flow on data (state) in "a" using the round key in "RoundKey", and store the result in "dst".</description>
	<operation>a[127:0] := InvShiftRows(a[127:0])
a[127:0] := InvSubBytes(a[127:0])
a[127:0] := InvMixColumns(a[127:0])
dst[127:0] := a[127:0] XOR RoundKey[127:0]
	</operation>
	<instruction name="AESDEC" form="xmm, xmm" xed="AESDEC_XMMdq_XMMdq"/>
	<header>wmmintrin.h</header>
</intrinsic>
<intrinsic tech="Other" vexEq="TRUE" name="_mm_aesdeclast_si128">
	<type>Integer</type>
	<CPUID>AES</CPUID>
	<category>Cryptography</category>
	<return type="__m128i" varname="dst" etype="M128"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="__m128i" varname="RoundKey" etype="M128"/>
	<description>Perform the last round of an AES decryption flow on data (state) in "a" using the round key in "RoundKey", and store the result in "dst".</description>
	<operation>a[127:0] := InvShiftRows(a[127:0])
a[127:0] := InvSubBytes(a[127:0])
dst[127:0] := a[127:0] XOR RoundKey[127:0]
	</operation>
	<instruction name="AESDECLAST" form="xmm, xmm" xed="AESDECLAST_XMMdq_XMMdq"/>
	<header>wmmintrin.h</header>
</intrinsic>
<intrinsic tech="Other" vexEq="TRUE" name="_mm_aesimc_si128">
	<type>Integer</type>
	<CPUID>AES</CPUID>
	<category>Cryptography</category>
	<return type="__m128i" varname="dst" etype="M128"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<description>Perform the InvMixColumns transformation on "a" and store the result in "dst".</description>
	<operation>dst[127:0] := InvMixColumns(a[127:0])
	</operation>
	<instruction name="AESIMC" form="xmm, xmm" xed="AESIMC_XMMdq_XMMdq"/>
	<header>wmmintrin.h</header>
</intrinsic>
<intrinsic tech="Other" vexEq="TRUE" name="_mm_aeskeygenassist_si128">
	<type>Integer</type>
	<CPUID>AES</CPUID>
	<category>Cryptography</category>
	<return type="__m128i" varname="dst" etype="M128"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="const int" varname="imm8" etype="IMM" immwidth="8"/>
	<description>Assist in expanding the AES cipher key by computing steps towards generating a round key for encryption cipher using data from "a" and an 8-bit round constant specified in "imm8", and store the result in "dst"."</description>
	<operation>X3[31:0] := a[127:96]
X2[31:0] := a[95:64]
X1[31:0] := a[63:32]
X0[31:0] := a[31:0]
RCON[31:0] := ZeroExtend32(imm8[7:0])
dst[31:0] := SubWord(X1)
dst[63:32] := RotWord(SubWord(X1)) XOR RCON
dst[95:64] := SubWord(X3)
dst[127:96] := RotWord(SubWord(X3)) XOR RCON
	</operation>
	<instruction name="AESKEYGENASSIST" form="xmm, xmm, imm8" xed="AESKEYGENASSIST_XMMdq_XMMdq_IMMb"/>
	<header>wmmintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm512_aesenclast_epi128">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<CPUID>VAES</CPUID>
	<category>Cryptography</category>
	<return type="__m512i" varname="dst" etype="M128"/>
	<parameter type="__m512i" varname="a" etype="M128"/>
	<parameter type="__m512i" varname="RoundKey" etype="M128"/>
	<description>Perform the last round of an AES encryption flow on data (state) in "a" using the round key in "RoundKey", and store the results in "dst"."</description>
	<operation>FOR j := 0 to 3
	i := j*128
	a[i+127:i] := ShiftRows(a[i+127:i])
	a[i+127:i] := SubBytes(a[i+127:i])
	dst[i+127:i] := a[i+127:i] XOR RoundKey[i+127:i]
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VAESENCLAST" form="zmm, zmm" xed="VAESENCLAST_ZMMu128_ZMMu128_ZMMu128_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm512_aesenc_epi128">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<CPUID>VAES</CPUID>
	<category>Cryptography</category>
	<return type="__m512i" varname="dst" etype="M128"/>
	<parameter type="__m512i" varname="a" etype="M128"/>
	<parameter type="__m512i" varname="RoundKey" etype="M128"/>
	<description>Perform one round of an AES encryption flow on data (state) in "a" using the round key in "RoundKey", and store the results in "dst"."</description>
	<operation>FOR j := 0 to 3
	i := j*128
	a[i+127:i] := ShiftRows(a[i+127:i])
	a[i+127:i] := SubBytes(a[i+127:i])
	a[i+127:i] := MixColumns(a[i+127:i])
	dst[i+127:i] := a[i+127:i] XOR RoundKey[i+127:i]
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VAESENC" form="zmm, zmm" xed="VAESENC_ZMMu128_ZMMu128_ZMMu128_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm512_aesdeclast_epi128">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<CPUID>VAES</CPUID>
	<category>Cryptography</category>
	<return type="__m512i" varname="dst" etype="M128"/>
	<parameter type="__m512i" varname="a" etype="M128"/>
	<parameter type="__m512i" varname="RoundKey" etype="M128"/>
	<description>Perform the last round of an AES decryption flow on data (state) in "a" using the round key in "RoundKey", and store the results in "dst".</description>
	<operation>FOR j := 0 to 3
	i := j*128
	a[i+127:i] := InvShiftRows(a[i+127:i])
	a[i+127:i] := InvSubBytes(a[i+127:i])
	dst[i+127:i] := a[i+127:i] XOR RoundKey[i+127:i]
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VAESDECLAST" form="zmm, zmm" xed="VAESDECLAST_ZMMu128_ZMMu128_ZMMu128_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm512_aesdec_epi128">
	<type>Integer</type>
	<CPUID>AVX512F</CPUID>
	<CPUID>VAES</CPUID>
	<category>Cryptography</category>
	<return type="__m512i" varname="dst" etype="M128"/>
	<parameter type="__m512i" varname="a" etype="M128"/>
	<parameter type="__m512i" varname="RoundKey" etype="M128"/>
	<description>Perform one round of an AES decryption flow on data (state) in "a" using the round key in "RoundKey", and store the results in "dst".</description>
	<operation>FOR j := 0 to 3
	i := j*128
	a[i+127:i] := InvShiftRows(a[i+127:i])
	a[i+127:i] := InvSubBytes(a[i+127:i])
	a[i+127:i] := InvMixColumns(a[i+127:i])
	dst[i+127:i] := a[i+127:i] XOR RoundKey[i+127:i]
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VAESDEC" form="zmm, zmm" xed="VAESDEC_ZMMu128_ZMMu128_ZMMu128_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_sha1msg2_epu32">
	<type>Integer</type>
	<CPUID>SHA</CPUID>
	<category>Cryptography</category>
	<return type="__m128i" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="UI32"/>
	<parameter type="__m128i" varname="b" etype="UI32"/>
	<description>Perform the final calculation for the next four SHA1 message values (unsigned 32-bit integers) using the intermediate result in "a" and the previous message values in "b", and store the result in "dst".</description>
	<operation>
W13 := b[95:64]
W14 := b[63:32]
W15 := b[31:0]
W16 := (a[127:96] XOR W13) &lt;&lt;&lt; 1
W17 := (a[95:64] XOR W14) &lt;&lt;&lt; 1
W18 := (a[63:32] XOR W15) &lt;&lt;&lt; 1
W19 := (a[31:0] XOR W16) &lt;&lt;&lt; 1
dst[127:96] := W16
dst[95:64] := W17
dst[63:32] := W18
dst[31:0] := W19
	</operation>
	<instruction name="SHA1MSG2" form="xmm, xmm" xed="SHA1MSG2_XMMi32_XMMi32_SHA"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_sha1nexte_epu32">
	<type>Integer</type>
	<CPUID>SHA</CPUID>
	<category>Cryptography</category>
	<return type="__m128i" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="UI32"/>
	<parameter type="__m128i" varname="b" etype="UI32"/>
	<description>Calculate SHA1 state variable E after four rounds of operation from the current SHA1 state variable "a", add that value to the scheduled values (unsigned 32-bit integers) in "b", and store the result in "dst".</description>
	<operation>
tmp := (a[127:96] &lt;&lt;&lt; 30)
dst[127:96] := b[127:96] + tmp
dst[95:64] := b[95:64]
dst[63:32] := b[63:32]
dst[31:0] := b[31:0]
	</operation>
	<instruction name="SHA1NEXTE" form="xmm, xmm" xed="SHA1NEXTE_XMMi32_XMMi32_SHA"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_sha1rnds4_epu32">
	<type>Integer</type>
	<CPUID>SHA</CPUID>
	<category>Cryptography</category>
	<return type="__m128i" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="UI32"/>
	<parameter type="__m128i" varname="b" etype="UI32"/>
	<parameter type="const int" varname="func" etype="IMM" immwidth="2"/>
	<description>Perform four rounds of SHA1 operation using an initial SHA1 state (A,B,C,D) from "a" and some pre-computed sum of the next 4 round message values (unsigned 32-bit integers), and state variable E from "b", and store the updated SHA1 state (A,B,C,D) in "dst". "func" contains the logic functions and round constants.</description>
	<operation>IF (func[1:0] == 0)
	f := f0()
	K := K0
ELSE IF (func[1:0] == 1)
	f := f1()
	K := K1
ELSE IF (func[1:0] == 2)
	f := f2()
	K := K2
ELSE IF (func[1:0] == 3)
	f := f3()
	K := K3
FI
A := a[127:96]
B := a[95:64]
C := a[63:32]
D := a[31:0]
W[0] := b[127:96]
W[1] := b[95:64]
W[2] := b[63:32]
W[3] := b[31:0]
A[1] := f(B, C, D) + (A &lt;&lt;&lt; 5) + W[0] + K
B[1] := A
C[1] := B &lt;&lt;&lt; 30
D[1] := C
E[1] := D
FOR i := 1 to 3
	A[i+1] := f(B[i], C[i], D[i]) + (A[i] &lt;&lt;&lt; 5) + W[i] + E[i] + K
	B[i+1] := A[i]
	C[i+1] := B[i] &lt;&lt;&lt; 30
	D[i+1] := C[i]
	E[i+1] := D[i]
ENDFOR
dst[127:96] := A[4]
dst[95:64] := B[4]
dst[63:32] := C[4]
dst[31:0] := D[4]
	</operation>
	<instruction name="SHA1RNDS4" form="xmm, xmm, imm8" xed="SHA1RNDS4_XMMi32_XMMi32_IMM8_SHA"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_sha256msg1_epu32">
	<type>Integer</type>
	<CPUID>SHA</CPUID>
	<category>Cryptography</category>
	<return type="__m128i" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="UI32"/>
	<parameter type="__m128i" varname="b" etype="UI32"/>
	<description>Perform an intermediate calculation for the next four SHA256 message values (unsigned 32-bit integers) using previous message values from "a" and "b", and store the result in "dst".</description>
	<operation>W4 := b[31:0]
W3 := a[127:96]
W2 := a[95:64]
W1 := a[63:32]
W0 := a[31:0]
dst[127:96] := W3 + sigma0(W4)
dst[95:64] := W2 + sigma0(W3)
dst[63:32] := W1 + sigma0(W2)
dst[31:0] := W0 + sigma0(W1)
	</operation>
	<instruction name="SHA256MSG1" form="xmm, xmm" xed="SHA256MSG1_XMMi32_XMMi32_SHA"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_sha256msg2_epu32">
	<type>Integer</type>
	<CPUID>SHA</CPUID>
	<category>Cryptography</category>
	<return type="__m128i" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="UI32"/>
	<parameter type="__m128i" varname="b" etype="UI32"/>
	<description>Perform the final calculation for the next four SHA256 message values (unsigned 32-bit integers) using previous message values from "a" and "b", and store the result in "dst"."</description>
	<operation>W14 := b[95:64]
W15 := b[127:96]
W16 := a[31:0] + sigma1(W14)
W17 := a[63:32] + sigma1(W15)
W18 := a[95:64] + sigma1(W16)
W19 := a[127:96] + sigma1(W17)
dst[127:96] := W19
dst[95:64] := W18
dst[63:32] := W17
dst[31:0] := W16
	</operation>
	<instruction name="SHA256MSG2" form="xmm, xmm" xed="SHA256MSG2_XMMi32_XMMi32_SHA"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_sha256rnds2_epu32">
	<type>Integer</type>
	<CPUID>SHA</CPUID>
	<category>Cryptography</category>
	<return type="__m128i" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="UI32"/>
	<parameter type="__m128i" varname="b" etype="UI32"/>
	<parameter type="__m128i" varname="k" etype="UI32"/>
	<description>Perform 2 rounds of SHA256 operation using an initial SHA256 state (C,D,G,H) from "a", an initial SHA256 state (A,B,E,F) from "b", and a pre-computed sum of the next 2 round message values (unsigned 32-bit integers) and the corresponding round constants from "k", and store the updated SHA256 state (A,B,E,F) in "dst".</description>
	<operation>A[0] := b[127:96]
B[0] := b[95:64]
C[0] := a[127:96]
D[0] := a[95:64]
E[0] := b[63:32]
F[0] := b[31:0]
G[0] := a[63:32]
H[0] := a[31:0]
W_K[0] := k[31:0]
W_K[1] := k[63:32]
FOR i := 0 to 1
	A[i+1] := Ch(E[i], F[i], G[i]) + sum1(E[i]) + W_K[i] + H[i] + Maj(A[i], B[i], C[i]) + sum0(A[i])
	B[i+1] := A[i]
	C[i+1] := B[i]
	D[i+1] := C[i]
	E[i+1] := Ch(E[i], F[i], G[i]) + sum1(E[i]) + W_K[i] + H[i] + D[i]
	F[i+1] := E[i]
	G[i+1] := F[i]
	H[i+1] := G[i]
ENDFOR
dst[127:96] := A[2]
dst[95:64] := B[2]
dst[63:32] := E[2]
dst[31:0] := F[2]
	</operation>
	<instruction name="SHA256RNDS2" form="xmm, xmm" xed="SHA256RNDS2_XMMi32_XMMi32_SHA"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.2" name="_mm_crc32_u8">
	<type>Integer</type>
	<CPUID>SSE4.2</CPUID>
	<category>Cryptography</category>
	<return type="unsigned int" varname="dst" etype="UI32"/>
	<parameter type="unsigned int" varname="crc" etype="UI32"/>
	<parameter type="unsigned char" varname="v" etype="UI8"/>
	<description>Starting with the initial value in "crc", accumulates a CRC32 value for unsigned 8-bit integer "v", and stores the result in "dst".</description>
	<operation>tmp1[7:0] := v[0:7] // bit reflection
tmp2[31:0] := crc[0:31] // bit reflection
tmp3[39:0] := tmp1[7:0] &lt;&lt; 32 
tmp4[39:0] := tmp2[31:0] &lt;&lt; 8
tmp5[39:0] := tmp3[39:0] XOR tmp4[39:0]
tmp6[31:0] := MOD2(tmp5[39:0], 0x11EDC6F41) // remainder from polynomial division modulus 2
dst[31:0] := tmp6[0:31] // bit reflection
	</operation>
	<instruction name="CRC32" form="r32, r8" xed="CRC32_GPRyy_GPR8b"/>
	<header>nmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.2" name="_mm_crc32_u16">
	<type>Integer</type>
	<CPUID>SSE4.2</CPUID>
	<category>Cryptography</category>
	<return type="unsigned int" varname="dst" etype="UI32"/>
	<parameter type="unsigned int" varname="crc" etype="UI32"/>
	<parameter type="unsigned short" varname="v" etype="UI16"/>
	<description>Starting with the initial value in "crc", accumulates a CRC32 value for unsigned 16-bit integer "v", and stores the result in "dst".</description>
	<operation>tmp1[15:0] := v[0:15] // bit reflection
tmp2[31:0] := crc[0:31] // bit reflection
tmp3[47:0] := tmp1[15:0] &lt;&lt; 32
tmp4[47:0] := tmp2[31:0] &lt;&lt; 16
tmp5[47:0] := tmp3[47:0] XOR tmp4[47:0]
tmp6[31:0] := MOD2(tmp5[47:0], 0x11EDC6F41) // remainder from polynomial division modulus 2
dst[31:0] := tmp6[0:31] // bit reflection
	</operation>
	<instruction name="CRC32" form="r32, r16" xed="CRC32_GPRyy_GPRv"/>
	<header>nmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.2" name="_mm_crc32_u32">
	<type>Integer</type>
	<CPUID>SSE4.2</CPUID>
	<category>Cryptography</category>
	<return type="unsigned int" varname="dst" etype="UI32"/>
	<parameter type="unsigned int" varname="crc" etype="UI32"/>
	<parameter type="unsigned int" varname="v" etype="UI32"/>
	<description>Starting with the initial value in "crc", accumulates a CRC32 value for unsigned 32-bit integer "v", and stores the result in "dst".</description>
	<operation>tmp1[31:0] := v[0:31] // bit reflection
tmp2[31:0] := crc[0:31] // bit reflection
tmp3[63:0] := tmp1[31:0] &lt;&lt; 32
tmp4[63:0] := tmp2[31:0] &lt;&lt; 32
tmp5[63:0] := tmp3[63:0] XOR tmp4[63:0]
tmp6[31:0] := MOD2(tmp5[63:0], 0x11EDC6F41) // remainder from polynomial division modulus 2
dst[31:0] := tmp6[0:31] // bit reflection
	</operation>
	<instruction name="CRC32" form="r32, r32" xed="CRC32_GPRyy_GPRv"/>
	<header>nmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.2" name="_mm_crc32_u64">
	<type>Integer</type>
	<CPUID>SSE4.2</CPUID>
	<category>Cryptography</category>
	<return type="unsigned __int64" varname="dst" etype="UI64"/>
	<parameter type="unsigned __int64" varname="crc" etype="UI64"/>
	<parameter type="unsigned __int64" varname="v" etype="UI64"/>
	<description>Starting with the initial value in "crc", accumulates a CRC32 value for unsigned 64-bit integer "v", and stores the result in "dst".</description>
	<operation>tmp1[63:0] := v[0:63] // bit reflection
tmp2[31:0] := crc[0:31] // bit reflection
tmp3[95:0] := tmp1[31:0] &lt;&lt; 32
tmp4[95:0] := tmp2[63:0] &lt;&lt; 64
tmp5[95:0] := tmp3[95:0] XOR tmp4[95:0]
tmp6[31:0] := MOD2(tmp5[95:0], 0x11EDC6F41) // remainder from polynomial division modulus 2
dst[31:0] := tmp6[0:31] // bit reflection
	</operation>
	<instruction name="CRC32" form="r64, r64" xed="CRC32_GPRyy_GPRv"/>
	<header>nmmintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm256_aesenclast_epi128">
	<type>Integer</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>VAES</CPUID>
	<category>Cryptography</category>
	<return type="__m256i" varname="dst" etype="M128"/>
	<parameter type="__m256i" varname="a" etype="M128"/>
	<parameter type="__m256i" varname="RoundKey" etype="M128"/>
	<description>Perform the last round of an AES encryption flow on data (state) in "a" using the round key in "RoundKey", and store the results in "dst"."</description>
	<operation>FOR j := 0 to 1
	i := j*128
	a[i+127:i] := ShiftRows(a[i+127:i])
	a[i+127:i] := SubBytes(a[i+127:i])
	dst[i+127:i] := a[i+127:i] XOR RoundKey[i+127:i]
ENDFOR
dst[MAX:256] := 0
	</operation>
	<instruction name="VAESENCLAST" form="ymm, ymm" xed="VAESENCLAST_YMMu128_YMMu128_YMMu128"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.2" vexEq="TRUE" name="_mm_cmpistrs">
	<type>Flag</type>
	<CPUID>SSE4.2</CPUID>
	<category>String Compare</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="__m128i" varname="b" etype="M128" hint="TRUE"/>
	<parameter type="const int" varname="imm8" etype="IMM" immwidth="8"/>
	<description>Compare packed strings with implicit lengths in "a" and "b" using the control in "imm8", and returns 1 if any character in "a" was null, and 0 otherwise.
	[strcmp_note]</description>
	<operation>
size := (imm8[0] ? 16 : 8) // 8 or 16-bit characters
UpperBound := (128 / size) - 1
aInvalid := 0
FOR i := 0 to UpperBound
	m := i*size
	IF a[m+size-1:m] == 0
		aInvalid := 1
	FI
ENDFOR
dst := aInvalid
	</operation>
	<instruction name="PCMPISTRI" form="xmm, xmm, imm8" xed="PCMPISTRI_XMMdq_XMMdq_IMMb"/>
	<header>nmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.2" vexEq="TRUE" name="_mm_cmpestrz">
	<type>Flag</type>
	<CPUID>SSE4.2</CPUID>
	<category>String Compare</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="M128" hint="TRUE"/>
	<parameter type="int" varname="la" etype="UI32" hint="TRUE"/>
	<parameter type="__m128i" varname="b" etype="M128" hint="TRUE"/>
	<parameter type="int" varname="lb" etype="UI32"/>
	<parameter type="const int" varname="imm8" etype="IMM" immwidth="8"/>
	<description>Compare packed strings in "a" and "b" with lengths "la" and "lb" using the control in "imm8", and returns 1 if any character in "b" was null, and 0 otherwise.
	[strcmp_note]</description>
	<operation>
size := (imm8[0] ? 16 : 8) // 8 or 16-bit characters
UpperBound := (128 / size) - 1
dst := (lb &lt;= UpperBound)
	</operation>
	<instruction name="PCMPESTRI" form="xmm, xmm, imm8" xed="PCMPESTRI_XMMdq_XMMdq_IMMb"/>
	<header>nmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.2" vexEq="TRUE" name="_mm_cmpestrs">
	<type>Flag</type>
	<CPUID>SSE4.2</CPUID>
	<category>String Compare</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="M128" hint="TRUE"/>
	<parameter type="int" varname="la" etype="UI32"/>
	<parameter type="__m128i" varname="b" etype="M128" hint="TRUE"/>
	<parameter type="int" varname="lb" etype="UI32" hint="TRUE"/>
	<parameter type="const int" varname="imm8" etype="IMM" immwidth="8"/>
	<description>Compare packed strings in "a" and "b" with lengths "la" and "lb" using the control in "imm8", and returns 1 if any character in "a" was null, and 0 otherwise.
	[strcmp_note]</description>
	<operation>
size := (imm8[0] ? 16 : 8) // 8 or 16-bit characters
UpperBound := (128 / size) - 1
dst := (la &lt;= UpperBound)
	</operation>
	<instruction name="PCMPESTRI" form="xmm, xmm, imm8" xed="PCMPESTRI_XMMdq_XMMdq_IMMb"/>
	<header>nmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.2" vexEq="TRUE" name="_mm_cmpistrz">
	<type>Flag</type>
	<CPUID>SSE4.2</CPUID>
	<category>String Compare</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="M128" hint="TRUE"/>
	<parameter type="__m128i" varname="b" etype="M128"/>
	<parameter type="const int" varname="imm8" etype="IMM" immwidth="8"/>
	<description>Compare packed strings with implicit lengths in "a" and "b" using the control in "imm8", and returns 1 if any character in "b" was null, and 0 otherwise.
	[strcmp_note]</description>
	<operation>
size := (imm8[0] ? 16 : 8) // 8 or 16-bit characters
UpperBound := (128 / size) - 1
bInvalid := 0
FOR j := 0 to UpperBound
	n := j*size
	IF b[n+size-1:n] == 0
		bInvalid := 1
	FI
ENDFOR
dst := bInvalid
	</operation>
	<instruction name="PCMPISTRI" form="xmm, xmm, imm8" xed="PCMPISTRI_XMMdq_XMMdq_IMMb"/>
	<header>nmmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.1" vexEq="TRUE" name="_mm_testz_si128">
	<type>Integer</type>
	<type>Flag</type>
	<CPUID>SSE4.1</CPUID>
	<category>Logical</category>
	<return type="int" varname="k" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="__m128i" varname="b" etype="M128"/>
	<description>Compute the bitwise AND of 128 bits (representing integer data) in "a" and "b", and set "ZF" to 1 if the result is zero, otherwise set "ZF" to 0. Compute the bitwise NOT of "a" and then AND with "b", and set "CF" to 1 if the result is zero, otherwise set "CF" to 0. Return the "ZF" value.</description>
	<operation>
IF ((a[127:0] AND b[127:0]) == 0)
	ZF := 1
ELSE
	ZF := 0
FI
IF (((NOT a[127:0]) AND b[127:0]) == 0)
	CF := 1
ELSE
	CF := 0
FI
RETURN ZF
	</operation>
	<instruction name="PTEST" form="xmm, xmm" xed="PTEST_XMMdq_XMMdq"/>
	<header>smmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.1" vexEq="TRUE" name="_mm_testc_si128">
	<type>Integer</type>
	<type>Flag</type>
	<CPUID>SSE4.1</CPUID>
	<category>Logical</category>
	<return type="int" varname="k" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="__m128i" varname="b" etype="M128"/>
	<description>Compute the bitwise AND of 128 bits (representing integer data) in "a" and "b", and set "ZF" to 1 if the result is zero, otherwise set "ZF" to 0. Compute the bitwise NOT of "a" and then AND with "b", and set "CF" to 1 if the result is zero, otherwise set "CF" to 0. Return the "CF" value.</description>
	<operation>
IF ((a[127:0] AND b[127:0]) == 0)
	ZF := 1
ELSE
	ZF := 0
FI
IF (((NOT a[127:0]) AND b[127:0]) == 0)
	CF := 1
ELSE
	CF := 0
FI
RETURN CF
	</operation>
	<instruction name="PTEST" form="xmm, xmm" xed="PTEST_XMMdq_XMMdq"/>
	<header>smmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.1" vexEq="TRUE" name="_mm_testnzc_si128">
	<type>Integer</type>
	<type>Flag</type>
	<CPUID>SSE4.1</CPUID>
	<category>Logical</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="__m128i" varname="b" etype="M128"/>
	<description>Compute the bitwise AND of 128 bits (representing integer data) in "a" and "b", and set "ZF" to 1 if the result is zero, otherwise set "ZF" to 0. Compute the bitwise NOT of "a" and then AND with "b", and set "CF" to 1 if the result is zero, otherwise set "CF" to 0. Return 1 if both the "ZF" and "CF" values are zero, otherwise return 0.</description>
	<operation>
IF ((a[127:0] AND b[127:0]) == 0)
	ZF := 1
ELSE
	ZF := 0
FI
IF (((NOT a[127:0]) AND b[127:0]) == 0)
	CF := 1
ELSE
	CF := 0
FI
IF (ZF == 0 &amp;&amp; CF == 0)
	dst := 1
ELSE
	dst := 0
FI
	</operation>
	<instruction name="PTEST" form="xmm, xmm" xed="PTEST_XMMdq_XMMdq"/>
	<header>smmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.1" vexEq="TRUE" name="_mm_test_all_zeros">
	<type>Integer</type>
	<type>Flag</type>
	<CPUID>SSE4.1</CPUID>
	<category>Logical</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="__m128i" varname="mask" etype="M128"/>
	<description>Compute the bitwise AND of 128 bits (representing integer data) in "a" and "mask", and return 1 if the result is zero, otherwise return 0.</description>
	<operation>
IF ((a[127:0] AND mask[127:0]) == 0)
	ZF := 1
ELSE
	ZF := 0
FI
dst := ZF
	</operation>
	<instruction name="PTEST" form="xmm, xmm" xed="PTEST_XMMdq_XMMdq"/>
	<header>smmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.1" vexEq="TRUE" name="_mm_test_mix_ones_zeros">
	<type>Integer</type>
	<type>Flag</type>
	<CPUID>SSE4.1</CPUID>
	<category>Logical</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="__m128i" varname="mask" etype="M128"/>
	<description>Compute the bitwise AND of 128 bits (representing integer data) in "a" and "mask", and set "ZF" to 1 if the result is zero, otherwise set "ZF" to 0. Compute the bitwise NOT of "a" and then AND with "mask", and set "CF" to 1 if the result is zero, otherwise set "CF" to 0. Return 1 if both the "ZF" and "CF" values are zero, otherwise return 0.</description>
	<operation>
IF ((a[127:0] AND mask[127:0]) == 0)
	ZF := 1
ELSE
	ZF := 0
FI
IF (((NOT a[127:0]) AND mask[127:0]) == 0)
	CF := 1
ELSE
	CF := 0
FI
IF (ZF == 0 &amp;&amp; CF == 0)
	dst := 1
ELSE
	dst := 0
FI
	</operation>
	<instruction name="PTEST" form="xmm, xmm" xed="PTEST_XMMdq_XMMdq"/>
	<header>smmintrin.h</header>
</intrinsic>
<intrinsic tech="SSE4.1" vexEq="TRUE" sequence="TRUE" name="_mm_test_all_ones">
	<type>Integer</type>
	<type>Flag</type>
	<CPUID>SSE4.1</CPUID>
	<category>Logical</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<description>Compute the bitwise NOT of "a" and then AND with a 128-bit vector containing all 1's, and return 1 if the result is zero, otherwise return 0.</description>
	<operation>
FOR j := 0 to 127
	tmp[j] := 1
ENDFOR
IF (((NOT a[127:0]) AND tmp[127:0]) == 0)
	CF := 1
ELSE
	CF := 0
FI
dst := CF
	</operation>
	<instruction name="PCMPEQD" form="xmm, xmm" xed="PCMPEQD_XMMdq_XMMdq"/>
	<instruction name="PTEST" form="xmm, xmm" xed="PTEST_XMMdq_XMMdq"/>
	<header>smmintrin.h</header>
</intrinsic>
<intrinsic tech="AVX" name="_mm256_testz_si256">
	<type>Integer</type>
	<type>Flag</type>
	<CPUID>AVX</CPUID>
	<category>Logical</category>
	<return type="int" varname="k" etype="UI32"/>
	<parameter type="__m256i" varname="a" etype="M256"/>
	<parameter type="__m256i" varname="b" etype="M256"/>
	<description>Compute the bitwise AND of 256 bits (representing integer data) in "a" and "b", and set "ZF" to 1 if the result is zero, otherwise set "ZF" to 0. Compute the bitwise NOT of "a" and then AND with "b", and set "CF" to 1 if the result is zero, otherwise set "CF" to 0. Return the "ZF" value.</description>
	<operation>
IF ((a[255:0] AND b[255:0]) == 0)
	ZF := 1
ELSE
	ZF := 0
FI
IF (((NOT a[255:0]) AND b[255:0]) == 0)
	CF := 1
ELSE
	CF := 0
FI
RETURN ZF
	</operation>
	<instruction name="VPTEST" form="ymm, ymm" xed="VPTEST_YMMqq_YMMqq"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX" name="_mm256_testc_si256">
	<type>Integer</type>
	<type>Flag</type>
	<CPUID>AVX</CPUID>
	<category>Logical</category>
	<return type="int" varname="k" etype="UI32"/>
	<parameter type="__m256i" varname="a" etype="M256"/>
	<parameter type="__m256i" varname="b" etype="M256"/>
	<description>Compute the bitwise AND of 256 bits (representing integer data) in "a" and "b", and set "ZF" to 1 if the result is zero, otherwise set "ZF" to 0. Compute the bitwise NOT of "a" and then AND with "b", and set "CF" to 1 if the result is zero, otherwise set "CF" to 0. Return the "CF" value.</description>
	<operation>
IF ((a[255:0] AND b[255:0]) == 0)
	ZF := 1
ELSE
	ZF := 0
FI
IF (((NOT a[255:0]) AND b[255:0]) == 0)
	CF := 1
ELSE
	CF := 0
FI
RETURN CF
	</operation>
	<instruction name="VPTEST" form="ymm, ymm" xed="VPTEST_YMMqq_YMMqq"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX" name="_mm256_testnzc_si256">
	<type>Integer</type>
	<type>Flag</type>
	<CPUID>AVX</CPUID>
	<category>Logical</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__m256i" varname="a" etype="M256"/>
	<parameter type="__m256i" varname="b" etype="M256"/>
	<description>Compute the bitwise AND of 256 bits (representing integer data) in "a" and "b", and set "ZF" to 1 if the result is zero, otherwise set "ZF" to 0. Compute the bitwise NOT of "a" and then AND with "b", and set "CF" to 1 if the result is zero, otherwise set "CF" to 0. Return 1 if both the "ZF" and "CF" values are zero, otherwise return 0.</description>
	<operation>
IF ((a[255:0] AND b[255:0]) == 0)
	ZF := 1
ELSE
	ZF := 0
FI
IF (((NOT a[255:0]) AND b[255:0]) == 0)
	CF := 1
ELSE
	CF := 0
FI
IF (ZF == 0 &amp;&amp; CF == 0)
	dst := 1
ELSE
	dst := 0
FI
	</operation>
	<instruction name="VPTEST" form="ymm, ymm" xed="VPTEST_YMMqq_YMMqq"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_BitScanForward">
	<type>Integer</type>
	<type>Flag</type>
	<category>Bit Manipulation</category>
	<return type="unsigned char" varname="dst" etype="UI8"/>
	<parameter type="unsigned __int32*" varname="index" etype="UI32" memwidth="32"/>
	<parameter type="unsigned __int32" varname="a" etype="UI32"/>
	<description>Set "index" to the index of the lowest set bit in 32-bit integer "mask". If no bits are set in "a", then "index" is undefined and "dst" is set to 0, otherwise "dst" is set to 1.</description>
	<operation>
tmp := 0
IF a == 0
	// MEM[index+31:index] is undefined
	dst := 0
ELSE
	DO WHILE ((tmp &lt; 32) AND a[tmp] == 0)
		tmp := tmp + 1
	OD
	MEM[index+31:index] := tmp
	dst := (tmp == 31) ? 0 : 1
FI
	</operation>
	<instruction name="BSF" form="r32, r32" xed="BSF_GPRv_GPRv"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_BitScanReverse">
	<type>Integer</type>
	<type>Flag</type>
	<category>Bit Manipulation</category>
	<return type="unsigned char" varname="dst" etype="UI8"/>
	<parameter type="unsigned __int32*" varname="index" etype="UI32" memwidth="32"/>
	<parameter type="unsigned __int32" varname="a" etype="UI32"/>
	<description>Set "index" to the index of the highest set bit in 32-bit integer "mask". If no bits are set in "a", then "index" is undefined and "dst" is set to 0, otherwise "dst" is set to 1.</description>
	<operation>
tmp := 31
IF a == 0
	// MEM[index+31:index] is undefined
	dst := 0
ELSE
	DO WHILE ((tmp &gt; 0) AND a[tmp] == 0)
		tmp := tmp - 1
	OD
	MEM[index+31:index] := tmp
	dst := (tmp == 0) ? 0 : 1
FI
	</operation>
	<instruction name="BSR" form="r32, r32" xed="BSR_GPRv_GPRv"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_BitScanForward64">
	<type>Integer</type>
	<type>Flag</type>
	<category>Bit Manipulation</category>
	<return type="unsigned char" varname="dst" etype="UI8"/>
	<parameter type="unsigned __int32*" varname="index" etype="UI32" memwidth="32"/>
	<parameter type="unsigned __int64" varname="a" etype="UI64"/>
	<description>Set "index" to the index of the lowest set bit in 32-bit integer "mask". If no bits are set in "a", then "index" is undefined and "dst" is set to 0, otherwise "dst" is set to 1.</description>
	<operation>
tmp := 0
IF a == 0
	// MEM[index+31:index] is undefined
	dst := 0
ELSE
	DO WHILE ((tmp &lt; 64) AND a[tmp] == 0)
		tmp := tmp + 1
	OD
	MEM[index+31:index] := tmp
	dst := (tmp == 63) ? 0 : 1
FI
	</operation>
	<instruction name="BSF" form="r64, r64" xed="BSF_GPRv_GPRv"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_BitScanReverse64">
	<type>Integer</type>
	<type>Flag</type>
	<category>Bit Manipulation</category>
	<return type="unsigned char" varname="dst" etype="UI8"/>
	<parameter type="unsigned __int32*" varname="index" etype="UI32" memwidth="32"/>
	<parameter type="unsigned __int64" varname="a" etype="UI64"/>
	<description>Set "index" to the index of the highest set bit in 32-bit integer "mask". If no bits are set in "a", then "index" is undefined and "dst" is set to 0, otherwise "dst" is set to 1.</description>
	<operation>
tmp := 63
IF a == 0
	// MEM[index+31:index] is undefined
	dst := 0
ELSE
	DO WHILE ((tmp &gt; 0) AND a[tmp] == 0)
		tmp := tmp - 1
	OD
	MEM[index+31:index] := tmp
	dst := (tmp == 0) ? 0 : 1
FI
	</operation>
	<instruction name="BSR" form="r64, r64" xed="BSR_GPRv_GPRv"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_bit_scan_forward">
	<type>Integer</type>
	<category>Bit Manipulation</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="int" varname="a" etype="UI32"/>
	<description>Set "dst" to the index of the lowest set bit in 32-bit integer "a". If no bits are set in "a" then "dst" is undefined.</description>
	<operation>
tmp := 0
IF a == 0
	// dst is undefined
ELSE
	DO WHILE ((tmp &lt; 32) AND a[tmp] == 0)
		tmp := tmp + 1
	OD
FI
dst := tmp
	</operation>
	<instruction name="BSF" form="r32, r32" xed="BSF_GPRv_GPRv"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_bit_scan_reverse">
	<type>Integer</type>
	<category>Bit Manipulation</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="int" varname="a" etype="UI32"/>
	<description>Set "dst" to the index of the highest set bit in 32-bit integer "a". If no bits are set in "a" then "dst" is undefined.</description>
	<operation>
tmp := 31
IF a == 0
	// dst is undefined
ELSE
	DO WHILE ((tmp &gt; 0) AND a[tmp] == 0)
		tmp := tmp - 1
	OD
FI
dst := tmp
	</operation>
	<instruction name="BSR" form="r32, r32" xed="BSR_GPRv_GPRv"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" vexEq="TRUE" name="_mm_clmulepi64_si128">
	<type>Integer</type>
	<CPUID>PCLMULQDQ</CPUID>
	<category>Application-Targeted</category>
	<return type="__m128i" varname="dst" etype="M128"/>
	<parameter type="__m128i" varname="a" etype="M128"/>
	<parameter type="__m128i" varname="b" etype="M128"/>
	<parameter type="const int" varname="imm8" etype="IMM" immwidth="1"/>
	<description>Perform a carry-less multiplication of two 64-bit integers, selected from "a" and "b" according to "imm8", and store the results in "dst".</description>
	<operation>
IF (imm8[0] == 0)
	TEMP1 := a[63:0]
ELSE
	TEMP1 := a[127:64]
FI 
IF (imm8[4] == 0)
	TEMP2 := b[63:0]
ELSE 
	TEMP2 := b[127:64]
FI
FOR i := 0 to 63
	TEMP[i] := (TEMP1[0] and TEMP2[i])
	FOR j := 1 to i
		TEMP[i] := TEMP[i] XOR (TEMP1[j] AND TEMP2[i-j])
	ENDFOR 
	dst[i] := TEMP[i]
ENDFOR
FOR i := 64 to 127
	TEMP[i] := 0
	FOR j := (i - 63) to 63
		TEMP[i] := TEMP[i] XOR (TEMP1[j] AND TEMP2[i-j])
	ENDFOR
	dst[i] := TEMP[i]
ENDFOR
dst[127] := 0
	</operation>
	<instruction name="PCLMULQDQ" form="xmm, xmm, imm8" xed="PCLMULQDQ_XMMdq_XMMdq_IMMb"/>
	<header>wmmintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_bnd_set_ptr_bounds">
	<CPUID>MPX</CPUID>
	<category>Miscellaneous</category>
	<return type="void *"/>
	<parameter type="const void *" varname="srcmem"/>
	<parameter type="size_t" varname="size" etype="UI64"/>
	<description>Make a pointer with the value of "srcmem" and bounds set to ["srcmem", "srcmem" + "size" - 1], and store the result in "dst".</description>
	<operation>dst := srcmem
dst.LB := srcmem.LB
dst.UB := srcmem + size - 1
	</operation>
	<instruction name="BNDMK" form="bnd, m32" xed="BNDMK_BND_AGEN"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_kortestc">
	<type>Mask</type>
	<CPUID>KNCNI</CPUID>
	<category>Mask</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__mmask16" varname="k1" etype="MASK"/>
	<parameter type="__mmask16" varname="k2" etype="MASK"/>
	<description>Performs bitwise OR between "k1" and "k2", storing the result in "dst". CF flag is set if "dst" consists of all 1's.</description>
	<operation>dst[15:0] := k1[15:0] | k2[15:0]
IF PopCount(dst[15:0]) == 16
	SetCF()
FI
	</operation>
	<instruction name="KORTEST" form="k, k"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_kortestc">
	<type>Mask</type>
	<CPUID>AVX512F</CPUID>
	<category>Mask</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__mmask16" varname="k1" etype="MASK"/>
	<parameter type="__mmask16" varname="k2" etype="MASK"/>
	<description>Performs bitwise OR between "k1" and "k2", storing the result in "dst". CF flag is set if "dst" consists of all 1's.</description>
	<operation>dst[15:0] := k1[15:0] | k2[15:0]
IF PopCount(dst[15:0]) == 16
	SetCF()
FI
	</operation>
	<instruction name="KORTESTW" form="k, k" xed="KORTESTW_MASKmskw_MASKmskw_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_kortestz">
	<type>Mask</type>
	<CPUID>KNCNI</CPUID>
	<category>Mask</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__mmask16" varname="k1" etype="MASK"/>
	<parameter type="__mmask16" varname="k2" etype="MASK"/>
	<description>Performs bitwise OR between "k1" and "k2", storing the result in "dst". ZF flag is set if "dst" is 0.</description>
	<operation>dst[15:0] := k1[15:0] | k2[15:0]
IF dst == 0
	SetZF()
FI
	</operation>
	<instruction name="KORTEST" form="k, k"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_kortestz">
	<type>Mask</type>
	<CPUID>AVX512F</CPUID>
	<category>Mask</category>
	<return type="int" varname="dst" etype="UI32"/>
	<parameter type="__mmask16" varname="k1" etype="MASK"/>
	<parameter type="__mmask16" varname="k2" etype="MASK"/>
	<description>Performs bitwise OR between "k1" and "k2", storing the result in "dst". ZF flag is set if "dst" is 0.</description>
	<operation>dst[15:0] := k1[15:0] | k2[15:0]
IF dst == 0
	SetZF()
FI
	</operation>
	<instruction name="KORTESTW" form="k, k" xed="KORTESTW_MASKmskw_MASKmskw_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm512_maskz_gf2p8affineinv_epi64_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Arithmetic</category>
	<return type="__m512i" varname="dst" etype="UI64"/>
	<parameter type="__mmask64" varname="k" etype="MASK"/>
	<parameter type="__m512i" varname="x" etype="UI64"/>
	<parameter type="__m512i" varname="A" etype="UI64"/>
	<parameter type="int" varname="b" etype="IMM" immwidth="8"/>
	<description>Compute an inverse affine transformation in the Galois Field 2^8. An affine transformation is defined by "A" * "x" + "b", where "A" represents an 8 by 8 bit matrix, "x" represents an 8-bit vector, and "b" is a constant immediate byte. The inverse of the 8-bit values in "x" is defined with respect to the reduction polynomial x^8 + x^4 + x^3 + x + 1. Store the packed 8-bit results in "dst" using zeromask "k" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>DEFINE parity(x) {
	t := 0
	FOR i := 0 to 7
		t := t XOR x.bit[i]
	ENDFOR
	RETURN t
}
DEFINE affine_inverse_byte(tsrc2qw, src1byte, imm8) {
	FOR i := 0 to 7
		retbyte.bit[i] := parity(tsrc2qw.byte[7-i] AND inverse(src1byte)) XOR imm8.bit[i]
	ENDFOR
	RETURN retbyte
}
FOR j := 0 TO 7
	FOR i := 0 to 7
		IF k[j*8+i]
			dst.qword[j].byte[i] := affine_inverse_byte(A.qword[j], x.qword[j].byte[i], b)
		ELSE
			dst.qword[j].byte[i] := 0
		FI
	ENDFOR
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VGF2P8AFFINEINVQB" form="zmm {z}, zmm, zmm, imm8" xed="VGF2P8AFFINEINVQB_ZMMu8_MASKmskw_ZMMu8_ZMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm512_mask_gf2p8affineinv_epi64_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Arithmetic</category>
	<return type="__m512i" varname="dst" etype="UI64"/>
	<parameter type="__m512i" varname="src" etype="UI64"/>
	<parameter type="__mmask64" varname="k" etype="MASK"/>
	<parameter type="__m512i" varname="x" etype="UI64"/>
	<parameter type="__m512i" varname="A" etype="UI64"/>
	<parameter type="int" varname="b" etype="IMM" immwidth="8"/>
	<description>Compute an inverse affine transformation in the Galois Field 2^8. An affine transformation is defined by "A" * "x" + "b", where "A" represents an 8 by 8 bit matrix, "x" represents an 8-bit vector, and "b" is a constant immediate byte. The inverse of the 8-bit values in "x" is defined with respect to the reduction polynomial x^8 + x^4 + x^3 + x + 1. Store the packed 8-bit results in "dst" using writemask "k" (elements are copied from "src" when the corresponding mask bit is not set).</description>
	<operation>DEFINE parity(x) {
	t := 0
	FOR i := 0 to 7
		t := t XOR x.bit[i]
	ENDFOR
	RETURN t
}
DEFINE affine_inverse_byte(tsrc2qw, src1byte, imm8) {
	FOR i := 0 to 7
		retbyte.bit[i] := parity(tsrc2qw.byte[7-i] AND inverse(src1byte)) XOR imm8.bit[i]
	ENDFOR
	RETURN retbyte
}
FOR j := 0 TO 7
	FOR i := 0 to 7
		IF k[j*8+i]
			dst.qword[j].byte[i] := affine_inverse_byte(A.qword[j], x.qword[j].byte[i], b)
		ELSE
			dst.qword[j].byte[i] := src.qword[j].byte[b]
		FI
	ENDFOR
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VGF2P8AFFINEINVQB" form="zmm {k}, zmm, zmm, imm8" xed="VGF2P8AFFINEINVQB_ZMMu8_MASKmskw_ZMMu8_ZMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm512_gf2p8affineinv_epi64_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Arithmetic</category>
	<return type="__m512i" varname="dst" etype="UI64"/>
	<parameter type="__m512i" varname="x" etype="UI64"/>
	<parameter type="__m512i" varname="A" etype="UI64"/>
	<parameter type="int" varname="b" etype="IMM" immwidth="8"/>
	<description>Compute an inverse affine transformation in the Galois Field 2^8. An affine transformation is defined by "A" * "x" + "b", where "A" represents an 8 by 8 bit matrix, "x" represents an 8-bit vector, and "b" is a constant immediate byte. The inverse of the 8-bit values in "x" is defined with respect to the reduction polynomial x^8 + x^4 + x^3 + x + 1. Store the packed 8-bit results in "dst".</description>
	<operation>DEFINE parity(x) {
	t := 0
	FOR i := 0 to 7
		t := t XOR x.bit[i]
	ENDFOR
	RETURN t
}
DEFINE affine_inverse_byte(tsrc2qw, src1byte, imm8) {
	FOR i := 0 to 7
		retbyte.bit[i] := parity(tsrc2qw.byte[7-i] AND inverse(src1byte)) XOR imm8.bit[i]
	ENDFOR
	RETURN retbyte
}
FOR j := 0 TO 7
	FOR i := 0 to 7
		dst.qword[j].byte[i] := affine_inverse_byte(A.qword[j], x.qword[j].byte[i], b)
	ENDFOR
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VGF2P8AFFINEINVQB" form="zmm, zmm, zmm, imm8" xed="VGF2P8AFFINEINVQB_ZMMu8_MASKmskw_ZMMu8_ZMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm256_maskz_gf2p8affineinv_epi64_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512VL</CPUID>
	<category>Arithmetic</category>
	<return type="__m256i" varname="dst" etype="UI64"/>
	<parameter type="__mmask32" varname="k" etype="MASK"/>
	<parameter type="__m256i" varname="x" etype="UI64"/>
	<parameter type="__m256i" varname="A" etype="UI64"/>
	<parameter type="int" varname="b" etype="IMM" immwidth="8"/>
	<description>Compute an inverse affine transformation in the Galois Field 2^8. An affine transformation is defined by "A" * "x" + "b", where "A" represents an 8 by 8 bit matrix, "x" represents an 8-bit vector, and "b" is a constant immediate byte. The inverse of the 8-bit values in "x" is defined with respect to the reduction polynomial x^8 + x^4 + x^3 + x + 1. Store the packed 8-bit results in "dst" using zeromask "k" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>DEFINE parity(x) {
	t := 0
	FOR i := 0 to 7
		t := t XOR x.bit[i]
	ENDFOR
	RETURN t
}
DEFINE affine_inverse_byte(tsrc2qw, src1byte, imm8) {
	FOR i := 0 to 7
		retbyte.bit[i] := parity(tsrc2qw.byte[7-i] AND inverse(src1byte)) XOR imm8.bit[i]
	ENDFOR
	RETURN retbyte
}
FOR j := 0 TO 3
	FOR i := 0 to 7
		IF k[j*8+i]
			dst.qword[j].byte[i] := affine_inverse_byte(A.qword[j], x.qword[j].byte[i], b)
		ELSE
			dst.qword[j].byte[i] := 0
		FI
	ENDFOR
ENDFOR
dst[MAX:256] := 0
	</operation>
	<instruction name="VGF2P8AFFINEINVQB" form="ymm {z}, ymm, ymm, imm8" xed="VGF2P8AFFINEINVQB_YMMu8_MASKmskw_YMMu8_YMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm256_mask_gf2p8affineinv_epi64_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512VL</CPUID>
	<category>Arithmetic</category>
	<return type="__m256i" varname="dst" etype="UI64"/>
	<parameter type="__m256i" varname="src" etype="UI64"/>
	<parameter type="__mmask32" varname="k" etype="MASK"/>
	<parameter type="__m256i" varname="x" etype="UI64"/>
	<parameter type="__m256i" varname="A" etype="UI64"/>
	<parameter type="int" varname="b" etype="IMM" immwidth="8"/>
	<description>Compute an inverse affine transformation in the Galois Field 2^8. An affine transformation is defined by "A" * "x" + "b", where "A" represents an 8 by 8 bit matrix, "x" represents an 8-bit vector, and "b" is a constant immediate byte. The inverse of the 8-bit values in "x" is defined with respect to the reduction polynomial x^8 + x^4 + x^3 + x + 1. Store the packed 8-bit results in "dst" using writemask "k" (elements are copied from "src" when the corresponding mask bit is not set).</description>
	<operation>DEFINE parity(x) {
	t := 0
	FOR i := 0 to 7
		t := t XOR x.bit[i]
	ENDFOR
	RETURN t
}
DEFINE affine_inverse_byte(tsrc2qw, src1byte, imm8) {
	FOR i := 0 to 7
		retbyte.bit[i] := parity(tsrc2qw.byte[7-i] AND inverse(src1byte)) XOR imm8.bit[i]
	ENDFOR
	RETURN retbyte
}
FOR j := 0 TO 3
	FOR i := 0 to 7
		IF k[j*8+i]
			dst.qword[j].byte[i] := affine_inverse_byte(A.qword[j], x.qword[j].byte[i], b)
		ELSE
			dst.qword[j].byte[i] := src.qword[j].byte[i]
		FI
	ENDFOR
ENDFOR
dst[MAX:256] := 0
	</operation>
	<instruction name="VGF2P8AFFINEINVQB" form="ymm {k}, ymm, ymm, imm8" xed="VGF2P8AFFINEINVQB_YMMu8_MASKmskw_YMMu8_YMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm256_gf2p8affineinv_epi64_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512VL</CPUID>
	<category>Arithmetic</category>
	<return type="__m256i" varname="dst" etype="UI64"/>
	<parameter type="__m256i" varname="x" etype="UI64"/>
	<parameter type="__m256i" varname="A" etype="UI64"/>
	<parameter type="int" varname="b" etype="IMM" immwidth="8"/>
	<description>Compute an inverse affine transformation in the Galois Field 2^8. An affine transformation is defined by "A" * "x" + "b", where "A" represents an 8 by 8 bit matrix, "x" represents an 8-bit vector, and "b" is a constant immediate byte. The inverse of the 8-bit values in "x" is defined with respect to the reduction polynomial x^8 + x^4 + x^3 + x + 1. Store the packed 8-bit results in "dst".</description>
	<operation>DEFINE parity(x) {
	t := 0
	FOR i := 0 to 7
		t := t XOR x.bit[i]
	ENDFOR
	RETURN t
}
DEFINE affine_inverse_byte(tsrc2qw, src1byte, imm8) {
	FOR i := 0 to 7
		retbyte.bit[i] := parity(tsrc2qw.byte[7-i] AND inverse(src1byte)) XOR imm8.bit[i]
	ENDFOR
	RETURN retbyte
}
FOR j := 0 TO 3
	FOR i := 0 to 7
		dst.qword[j].byte[i] := affine_inverse_byte(A.qword[j], x.qword[j].byte[i], b)
	ENDFOR
ENDFOR
dst[MAX:256] := 0
	</operation>
	<instruction name="VGF2P8AFFINEINVQB" form="ymm, ymm, ymm, imm8" xed="VGF2P8AFFINEINVQB_YMMu8_MASKmskw_YMMu8_YMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_maskz_gf2p8affineinv_epi64_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512VL</CPUID>
	<category>Arithmetic</category>
	<return type="__m128i" varname="dst" etype="UI64"/>
	<parameter type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__m128i" varname="x" etype="UI64"/>
	<parameter type="__m128i" varname="A" etype="UI64"/>
	<parameter type="int" varname="b" etype="IMM" immwidth="8"/>
	<description>Compute an inverse affine transformation in the Galois Field 2^8. An affine transformation is defined by "A" * "x" + "b", where "A" represents an 8 by 8 bit matrix, "x" represents an 8-bit vector, and "b" is a constant immediate byte. The inverse of the 8-bit values in "x" is defined with respect to the reduction polynomial x^8 + x^4 + x^3 + x + 1. Store the packed 8-bit results in "dst" using zeromask "k" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>DEFINE parity(x) {
	t := 0
	FOR i := 0 to 7
		t := t XOR x.bit[i]
	ENDFOR
	RETURN t
}
DEFINE affine_inverse_byte(tsrc2qw, src1byte, imm8) {
	FOR i := 0 to 7
		retbyte.bit[i] := parity(tsrc2qw.byte[7-i] AND inverse(src1byte)) XOR imm8.bit[i]
	ENDFOR
	RETURN retbyte
}
FOR j := 0 TO 1
	FOR i := 0 to 7
		IF k[j*8+i]
			dst.qword[j].byte[i] := affine_inverse_byte(A.qword[j], x.qword[j].byte[i], b)
		ELSE
			dst.qword[j].byte[i] := 0
		FI
	ENDFOR
ENDFOR
dst[MAX:128] := 0
	</operation>
	<instruction name="VGF2P8AFFINEINVQB" form="xmm {z}, xmm, xmm, imm8" xed="VGF2P8AFFINEINVQB_XMMu8_MASKmskw_XMMu8_XMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_mask_gf2p8affineinv_epi64_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512VL</CPUID>
	<category>Arithmetic</category>
	<return type="__m128i" varname="dst" etype="UI64"/>
	<parameter type="__m128i" varname="src" etype="UI64"/>
	<parameter type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__m128i" varname="x" etype="UI64"/>
	<parameter type="__m128i" varname="A" etype="UI64"/>
	<parameter type="int" varname="b" etype="IMM" immwidth="8"/>
	<description>Compute an inverse affine transformation in the Galois Field 2^8. An affine transformation is defined by "A" * "x" + "b", where "A" represents an 8 by 8 bit matrix, "x" represents an 8-bit vector, and "b" is a constant immediate byte. The inverse of the 8-bit values in "x" is defined with respect to the reduction polynomial x^8 + x^4 + x^3 + x + 1. Store the packed 8-bit results in "dst" using writemask "k" (elements are copied from "src" when the corresponding mask bit is not set).</description>
	<operation>DEFINE parity(x) {
	t := 0
	FOR i := 0 to 7
		t := t XOR x.bit[i]
	ENDFOR
	RETURN t
}
DEFINE affine_inverse_byte(tsrc2qw, src1byte, imm8) {
	FOR i := 0 to 7
		retbyte.bit[i] := parity(tsrc2qw.byte[7-i] AND inverse(src1byte)) XOR imm8.bit[i]
	ENDFOR
	RETURN retbyte
}
FOR j := 0 TO 1
	FOR i := 0 to 7
		IF k[j*8+i]
			dst.qword[j].byte[i] := affine_inverse_byte(A.qword[j], x.qword[j].byte[i], b)
		ELSE
			dst.qword[j].byte[i] := src.qword[j].byte[i]
		FI
	ENDFOR
ENDFOR
dst[MAX:128] := 0
	</operation>
	<instruction name="VGF2P8AFFINEINVQB" form="xmm {k}, xmm, xmm, imm8" xed="VGF2P8AFFINEINVQB_XMMu8_MASKmskw_XMMu8_XMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_gf2p8affineinv_epi64_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512VL</CPUID>
	<category>Arithmetic</category>
	<return type="__m128i" varname="dst" etype="UI64"/>
	<parameter type="__m128i" varname="x" etype="UI64"/>
	<parameter type="__m128i" varname="A" etype="UI64"/>
	<parameter type="int" varname="b" etype="IMM" immwidth="8"/>
	<description>Compute an inverse affine transformation in the Galois Field 2^8. An affine transformation is defined by "A" * "x" + "b", where "A" represents an 8 by 8 bit matrix, "x" represents an 8-bit vector, and "b" is a constant immediate byte. The inverse of the 8-bit values in "x" is defined with respect to the reduction polynomial x^8 + x^4 + x^3 + x + 1. Store the packed 8-bit results in "dst".</description>
	<operation>DEFINE parity(x) {
	t := 0
	FOR i := 0 to 7
		t := t XOR x.bit[i]
	ENDFOR
	RETURN t
}
DEFINE affine_inverse_byte(tsrc2qw, src1byte, imm8) {
	FOR i := 0 to 7
		retbyte.bit[i] := parity(tsrc2qw.byte[7-i] AND inverse(src1byte)) XOR imm8.bit[i]
	ENDFOR
	RETURN retbyte
}
FOR j := 0 TO 1
	FOR i := 0 to 7
		dst.qword[j].byte[i] := affine_inverse_byte(A.qword[j], x.qword[j].byte[i], b)
	ENDFOR
ENDFOR
dst[MAX:128] := 0
	</operation>
	<instruction name="VGF2P8AFFINEINVQB" form="xmm, xmm, xmm, imm8" xed="VGF2P8AFFINEINVQB_XMMu8_MASKmskw_XMMu8_XMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm256_mask_gf2p8affine_epi64_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512VL</CPUID>
	<category>Arithmetic</category>
	<return type="__m256i" varname="dst" etype="UI64"/>
	<parameter type="__m256i" varname="src" etype="UI64"/>
	<parameter type="__mmask32" varname="k" etype="MASK"/>
	<parameter type="__m256i" varname="x" etype="UI64"/>
	<parameter type="__m256i" varname="A" etype="UI64"/>
	<parameter type="int" varname="b" etype="IMM" immwidth="8"/>
	<description>Compute an affine transformation in the Galois Field 2^8. An affine transformation is defined by "A" * "x" + "b", where "A" represents an 8 by 8 bit matrix, "x" represents an 8-bit vector, and "b" is a constant immediate byte. Store the packed 8-bit results in "dst" using writemask "k" (elements are copied from "src" when the corresponding mask bit is not set).</description>
	<operation>
DEFINE parity(x) {
	t := 0
	FOR i := 0 to 7
		t := t XOR x.bit[i]
	ENDFOR
	RETURN t
}
DEFINE affine_byte(tsrc2qw, src1byte, imm8) {
	FOR i := 0 to 7
		retbyte.bit[i] := parity(tsrc2qw.byte[7-i] AND src1byte) XOR imm8.bit[i]
	ENDFOR
	RETURN retbyte
}
FOR j := 0 TO 3
	FOR i := 0 to 7
		IF k[j*8+i]
			dst.qword[j].byte[i] := affine_byte(A.qword[j], x.qword[j].byte[i], b)
		ELSE
			dst.qword[j].byte[i] := src.qword[j].byte[i]
		FI
	ENDFOR
ENDFOR
dst[MAX:256] := 0
	</operation>
	<instruction name="VGF2P8AFFINEQB" form="ymm {k}, ymm, ymm, imm8" xed="VGF2P8AFFINEQB_YMMu8_MASKmskw_YMMu8_YMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm256_gf2p8affine_epi64_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512VL</CPUID>
	<category>Arithmetic</category>
	<return type="__m256i" varname="dst" etype="UI64"/>
	<parameter type="__m256i" varname="x" etype="UI64"/>
	<parameter type="__m256i" varname="A" etype="UI64"/>
	<parameter type="int" varname="b" etype="IMM" immwidth="8"/>
	<description>Compute an affine transformation in the Galois Field 2^8. An affine transformation is defined by "A" * "x" + "b", where "A" represents an 8 by 8 bit matrix, "x" represents an 8-bit vector, and "b" is a constant immediate byte. Store the packed 8-bit results in "dst".</description>
	<operation>
DEFINE parity(x) {
	t := 0
	FOR i := 0 to 7
		t := t XOR x.bit[i]
	ENDFOR
	RETURN t
}
DEFINE affine_byte(tsrc2qw, src1byte, imm8) {
	FOR i := 0 to 7
		retbyte.bit[i] := parity(tsrc2qw.byte[7-i] AND src1byte) XOR imm8.bit[i]
	ENDFOR
	RETURN retbyte
}
FOR j := 0 TO 3
	FOR i := 0 to 7
		dst.qword[j].byte[i] := affine_byte(A.qword[j], x.qword[j].byte[i], b)
	ENDFOR
ENDFOR
dst[MAX:256] := 0
	</operation>
	<instruction name="VGF2P8AFFINEQB" form="ymm, ymm, ymm, imm8" xed="VGF2P8AFFINEQB_YMMu8_MASKmskw_YMMu8_YMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_maskz_gf2p8affine_epi64_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512VL</CPUID>
	<category>Arithmetic</category>
	<return type="__m128i" varname="dst" etype="UI64"/>
	<parameter type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__m128i" varname="x" etype="UI64"/>
	<parameter type="__m128i" varname="A" etype="UI64"/>
	<parameter type="int" varname="b" etype="IMM" immwidth="8"/>
	<description>Compute an affine transformation in the Galois Field 2^8. An affine transformation is defined by "A" * "x" + "b", where "A" represents an 8 by 8 bit matrix, "x" represents an 8-bit vector, and "b" is a constant immediate byte. Store the packed 8-bit results in "dst" using zeromask "k" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>
DEFINE parity(x) {
	t := 0
	FOR i := 0 to 7
		t := t XOR x.bit[i]
	ENDFOR
	RETURN t
}
DEFINE affine_byte(tsrc2qw, src1byte, imm8) {
	FOR i := 0 to 7
		retbyte.bit[i] := parity(tsrc2qw.byte[7-i] AND src1byte) XOR imm8.bit[i]
	ENDFOR
	RETURN retbyte
}
FOR j := 0 TO 1
	FOR i := 0 to 7
		IF k[j*8+i]
			dst.qword[j].byte[i] := affine_byte(A.qword[j], x.qword[j].byte[i], b)
		ELSE
			dst.qword[j].byte[i] := 0
		FI
	ENDFOR
ENDFOR
dst[MAX:128] := 0
	</operation>
	<instruction name="VGF2P8AFFINEQB" form="xmm {z}, xmm, xmm, imm8" xed="VGF2P8AFFINEQB_XMMu8_MASKmskw_XMMu8_XMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_mask_gf2p8affine_epi64_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512VL</CPUID>
	<category>Arithmetic</category>
	<return type="__m128i" varname="dst" etype="UI64"/>
	<parameter type="__m128i" varname="src" etype="UI64"/>
	<parameter type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__m128i" varname="x" etype="UI64"/>
	<parameter type="__m128i" varname="A" etype="UI64"/>
	<parameter type="int" varname="b" etype="IMM" immwidth="8"/>
	<description>Compute an affine transformation in the Galois Field 2^8. An affine transformation is defined by "A" * "x" + "b", where "A" represents an 8 by 8 bit matrix, "x" represents an 8-bit vector, and "b" is a constant immediate byte. Store the packed 8-bit results in "dst" using writemask "k" (elements are copied from "src" when the corresponding mask bit is not set).</description>
	<operation>
DEFINE parity(x) {
	t := 0
	FOR i := 0 to 7
		t := t XOR x.bit[i]
	ENDFOR
	RETURN t
}
DEFINE affine_byte(tsrc2qw, src1byte, imm8) {
	FOR i := 0 to 7
		retbyte.bit[i] := parity(tsrc2qw.byte[7-i] AND src1byte) XOR imm8.bit[i]
	ENDFOR
	RETURN retbyte
}
FOR j := 0 TO 1
	FOR i := 0 to 7
		IF k[j*8+i]
			dst.qword[j].byte[i] := affine_byte(A.qword[j], x.qword[j].byte[i], b)
		ELSE
			dst.qword[j].byte[i] := src.qword[j].byte[i]
		FI
	ENDFOR
ENDFOR
dst[MAX:128] := 0
	</operation>
	<instruction name="VGF2P8AFFINEQB" form="xmm {k}, xmm, xmm, imm8" xed="VGF2P8AFFINEQB_XMMu8_MASKmskw_XMMu8_XMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_gf2p8affine_epi64_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512VL</CPUID>
	<category>Arithmetic</category>
	<return type="__m128i" varname="dst" etype="UI64"/>
	<parameter type="__m128i" varname="x" etype="UI64"/>
	<parameter type="__m128i" varname="A" etype="UI64"/>
	<parameter type="int" varname="b" etype="IMM" immwidth="8"/>
	<description>Compute an affine transformation in the Galois Field 2^8. An affine transformation is defined by "A" * "x" + "b", where "A" represents an 8 by 8 bit matrix, "x" represents an 8-bit vector, and "b" is a constant immediate byte. Store the packed 8-bit results in "dst".</description>
	<operation>
DEFINE parity(x) {
	t := 0
	FOR i := 0 to 7
		t := t XOR x.bit[i]
	ENDFOR
	RETURN t
}
DEFINE affine_byte(tsrc2qw, src1byte, imm8) {
	FOR i := 0 to 7
		retbyte.bit[i] := parity(tsrc2qw.byte[7-i] AND src1byte) XOR imm8.bit[i]
	ENDFOR
	RETURN retbyte
}
FOR j := 0 TO 1
	FOR i := 0 to 7
		dst.qword[j].byte[i] := affine_byte(A.qword[j], x.qword[j].byte[i], b)
	ENDFOR
ENDFOR
dst[MAX:128] := 0
	</operation>
	<instruction name="VGF2P8AFFINEQB" form="xmm, xmm, xmm, imm8" xed="VGF2P8AFFINEQB_XMMu8_MASKmskw_XMMu8_XMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm512_maskz_gf2p8affine_epi64_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Arithmetic</category>
	<return type="__m512i" varname="dst" etype="UI64"/>
	<parameter type="__mmask64" varname="k" etype="MASK"/>
	<parameter type="__m512i" varname="x" etype="UI64"/>
	<parameter type="__m512i" varname="A" etype="UI64"/>
	<parameter type="int" varname="b" etype="IMM" immwidth="8"/>
	<description>Compute an affine transformation in the Galois Field 2^8. An affine transformation is defined by "A" * "x" + "b", where "A" represents an 8 by 8 bit matrix, "x" represents an 8-bit vector, and "b" is a constant immediate byte. Store the packed 8-bit results in "dst" using zeromask "k" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>
DEFINE parity(x) {
	t := 0
	FOR i := 0 to 7
		t := t XOR x.bit[i]
	ENDFOR
	RETURN t
}
DEFINE affine_byte(tsrc2qw, src1byte, imm8) {
	FOR i := 0 to 7
		retbyte.bit[i] := parity(tsrc2qw.byte[7-i] AND src1byte) XOR imm8.bit[i]
	ENDFOR
	RETURN retbyte
}
FOR j := 0 TO 7
	FOR i := 0 to 7
		IF k[j*8+i]
			dst.qword[j].byte[i] := affine_byte(A.qword[j], x.qword[j].byte[i], b)
		ELSE
			dst.qword[j].byte[i] := 0
		FI
	ENDFOR
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VGF2P8AFFINEQB" form="zmm {z}, zmm, zmm, imm8" xed="VGF2P8AFFINEQB_ZMMu8_MASKmskw_ZMMu8_ZMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm512_mask_gf2p8affine_epi64_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Arithmetic</category>
	<return type="__m512i" varname="dst" etype="UI64"/>
	<parameter type="__m512i" varname="src" etype="UI64"/>
	<parameter type="__mmask64" varname="k" etype="MASK"/>
	<parameter type="__m512i" varname="x" etype="UI64"/>
	<parameter type="__m512i" varname="A" etype="UI64"/>
	<parameter type="int" varname="b" etype="IMM" immwidth="8"/>
	<description>Compute an affine transformation in the Galois Field 2^8. An affine transformation is defined by "A" * "x" + "b", where "A" represents an 8 by 8 bit matrix, "x" represents an 8-bit vector, and "b" is a constant immediate byte. Store the packed 8-bit results in "dst" using writemask "k" (elements are copied from "src" when the corresponding mask bit is not set).</description>
	<operation>
DEFINE parity(x) {
	t := 0
	FOR i := 0 to 7
		t := t XOR x.bit[i]
	ENDFOR
	RETURN t
}
DEFINE affine_byte(tsrc2qw, src1byte, imm8) {
	FOR i := 0 to 7
		retbyte.bit[i] := parity(tsrc2qw.byte[7-i] AND src1byte) XOR imm8.bit[i]
	ENDFOR
	RETURN retbyte
}
FOR j := 0 TO 7
	FOR i := 0 to 7
		IF k[j*8+i]
			dst.qword[j].byte[i] := affine_byte(A.qword[j], x.qword[j].byte[i], b)
		ELSE
			dst.qword[j].byte[i] := src.qword[j].byte[i]
		FI
	ENDFOR
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VGF2P8AFFINEQB" form="zmm {k}, zmm, zmm, imm8" xed="VGF2P8AFFINEQB_ZMMu8_MASKmskw_ZMMu8_ZMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm512_gf2p8affine_epi64_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Arithmetic</category>
	<return type="__m512i" varname="dst" etype="UI64"/>
	<parameter type="__m512i" varname="x" etype="UI64"/>
	<parameter type="__m512i" varname="A" etype="UI64"/>
	<parameter type="int" varname="b" etype="IMM" immwidth="8"/>
	<description>Compute an affine transformation in the Galois Field 2^8. An affine transformation is defined by "A" * "x" + "b", where "A" represents an 8 by 8 bit matrix, "x" represents an 8-bit vector, and "b" is a constant immediate byte. Store the packed 8-bit results in "dst".</description>
	<operation>
DEFINE parity(x) {
	t := 0
	FOR i := 0 to 7
		t := t XOR x.bit[i]
	ENDFOR
	RETURN t
}
DEFINE affine_byte(tsrc2qw, src1byte, imm8) {
	FOR i := 0 to 7
		retbyte.bit[i] := parity(tsrc2qw.byte[7-i] AND src1byte) XOR imm8.bit[i]
	ENDFOR
	RETURN retbyte
}
FOR j := 0 TO 7
	FOR i := 0 to 7
		dst.qword[j].byte[i] := affine_byte(A.qword[j], x.qword[j].byte[i], b)
	ENDFOR
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VGF2P8AFFINEQB" form="zmm, zmm, zmm, imm8" xed="VGF2P8AFFINEQB_ZMMu8_MASKmskw_ZMMu8_ZMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm256_maskz_gf2p8affine_epi64_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512VL</CPUID>
	<category>Arithmetic</category>
	<return type="__m256i" varname="dst" etype="UI64"/>
	<parameter type="__mmask32" varname="k" etype="MASK"/>
	<parameter type="__m256i" varname="x" etype="UI64"/>
	<parameter type="__m256i" varname="A" etype="UI64"/>
	<parameter type="int" varname="b" etype="IMM" immwidth="8"/>
	<description>Compute an affine transformation in the Galois Field 2^8. An affine transformation is defined by "A" * "x" + "b", where "A" represents an 8 by 8 bit matrix, "x" represents an 8-bit vector, and "b" is a constant immediate byte. Store the packed 8-bit results in "dst" using zeromask "k" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>
DEFINE parity(x) {
	t := 0
	FOR i := 0 to 7
		t := t XOR x.bit[i]
	ENDFOR
	RETURN t
}
DEFINE affine_byte(tsrc2qw, src1byte, imm8) {
	FOR i := 0 to 7
		retbyte.bit[i] := parity(tsrc2qw.byte[7-i] AND src1byte) XOR imm8.bit[i]
	ENDFOR
	RETURN retbyte
}
FOR j := 0 TO 3
	FOR i := 0 to 7
		IF k[j*8+i]
			dst.qword[j].byte[i] := affine_byte(A.qword[j], x.qword[j].byte[i], b)
		ELSE
			dst.qword[j].byte[i] := 0
		FI
	ENDFOR
ENDFOR
dst[MAX:256] := 0
	</operation>
	<instruction name="VGF2P8AFFINEQB" form="ymm {z}, ymm, ymm, imm8" xed="VGF2P8AFFINEQB_YMMu8_MASKmskw_YMMu8_YMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_addsetc_epi32">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Arithmetic</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<parameter type="__m512i" varname="v2" etype="UI32"/>
	<parameter type="__m512i" varname="v3" etype="UI32"/>
	<parameter type="__mmask16 *" varname="k2_res" etype="MASK" memwidth="16"/>
	<description>Performs element-by-element addition of packed 32-bit integer elements in "v2" and "v3", storing the resultant carry in "k2_res" (carry flag) and the addition results in "dst".</description>
	<operation>FOR j := 0 to 15
	i := j*32
	dst[i+31:i] := v2[i+31:i] + v3[i+31:i]
	k2_res[j] := Carry(v2[i+31:i] + v3[i+31:i])
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VPADDSETCD" form="zmm, k, zmm"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_adc_epi32">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Arithmetic</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<parameter type="__m512i" varname="v2" etype="UI32"/>
	<parameter type="__mmask16" varname="k2" etype="MASK"/>
	<parameter type="__m512i" varname="v3" etype="UI32"/>
	<parameter type="__mmask16 *" varname="k2_res" etype="MASK" memwidth="16"/>
	<description>Performs element-by-element addition of packed 32-bit integers in "v2" and "v3" and the corresponding bit in "k2", storing the result of the addition in "dst" and the result of the carry in "k2_res".</description>
	<operation>FOR j := 0 to 15
	i := j*32
	k2_res[j]   := Carry(v2[i+31:i] + v3[i+31:i] + k2[j])
	dst[i+31:i] := v2[i+31:i] + v3[i+31:i] + k2[j]
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VPADCD" form="zmm, k, zmm"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_mask_adc_epi32">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Arithmetic</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<parameter type="__m512i" varname="v2" etype="UI32"/>
	<parameter type="__mmask16" varname="k1" etype="MASK"/>
	<parameter type="__mmask16" varname="k2" etype="MASK"/>
	<parameter type="__m512i" varname="v3" etype="UI32"/>
	<parameter type="__mmask16 *" varname="k2_res" etype="MASK" memwidth="16"/>
	<description>Performs element-by-element addition of packed 32-bit integers in "v2" and "v3" and the corresponding bit in "k2", storing the result of the addition in "dst" and the result of the carry in "k2_res" using writemask "k1" (elements are copied from "v2" when the corresponding mask bit is not set).</description>
	<operation>FOR j := 0 to 15
	i := j*32
	IF k1[j]
		k2_res[j]   := Carry(v2[i+31:i] + v3[i+31:i] + k2[j])
		dst[i+31:i] := v2[i+31:i] + v3[i+31:i] + k2[j]
	ELSE
		dst[i+31:i] := v2[i+31:i]
	FI
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VPADCD" form="zmm {k}, k, zmm"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_sbbr_epi32">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Arithmetic</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<parameter type="__m512i" varname="v2" etype="UI32"/>
	<parameter type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__m512i" varname="v3" etype="UI32"/>
	<parameter type="__mmask16 *" varname="borrow" etype="MASK" memwidth="16"/>
	<description>Performs element-by-element three-input subtraction of packed 32-bit integer elements of "v2" as well as the corresponding bit from "k" from "v3". The borrowed value from the subtraction difference for the nth element is written to the nth bit of "borrow" (borrow flag). Results are stored in "dst".</description>
	<operation>FOR j := 0 to 15
	i := j*32
	dst[i+31:i] := v3[i+31:i] - v2[i+31:i] - k[j]
	borrow[j] := Borrow(v2[i+31:i] - v3[i+31:i] - k[j])
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VPSBBRD" form="zmm, k, zmm"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_mask_sbbr_epi32">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Arithmetic</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<parameter type="__m512i" varname="v2" etype="UI32"/>
	<parameter type="__mmask16" varname="k1" etype="MASK"/>
	<parameter type="__mmask16" varname="k2" etype="MASK"/>
	<parameter type="__m512i" varname="v3" etype="UI32"/>
	<parameter type="__mmask16 *" varname="borrow" etype="MASK" memwidth="16"/>
	<description>Performs element-by-element three-input subtraction of packed 32-bit integer elements of "v2" as well as the corresponding bit from "k2" from "v3". The borrowed value from the subtraction difference for the nth element is written to the nth bit of "borrow" (borrow flag). Results are stored in "dst" using writemask "k1" (elements are copied from "v2" when the corresponding mask bit is not set).</description>
	<operation>FOR j := 0 to 15
	i := j*32
	IF k1[j]
		dst[i+31:i] := v3[i+31:i] - v2[i+31:i] - k2[j]
		borrow[j] := Borrow(v2[i+31:i] - v3[i+31:i] - k2[j])
	ELSE
		dst[i+31:i] := v2[i+31:i]
	FI
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VPSBBRD" form="zmm {k}, k, zmm"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_subsetb_epi32">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Arithmetic</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<parameter type="__m512i" varname="v2" etype="UI32"/>
	<parameter type="__m512i" varname="v3" etype="UI32"/>
	<parameter type="__mmask16 *" varname="borrow" etype="MASK" memwidth="16"/>
	<description>Performs element-by-element subtraction of packed 32-bit integer elements in "v3" from "v2", storing the results in "dst" and the nth borrow bit in the nth position of "borrow" (borrow flag).</description>
	<operation>FOR j := 0 to 15
	i := j*32
	dst[i+31:i] := v2[i+31:i] - v3[i+31:i]
	borrow[j] := Borrow(v2[i+31:i] - v3[i+31:i])
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VPSUBSETBD" form="zmm, k, zmm"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_mask_subsetb_epi32">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Arithmetic</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<parameter type="__m512i" varname="v2" etype="UI32"/>
	<parameter type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__mmask16" varname="k_old" etype="MASK"/>
	<parameter type="__m512i" varname="v3" etype="UI32"/>
	<parameter type="__mmask16 *" varname="borrow" etype="MASK" memwidth="16"/>
	<description>Performs element-by-element subtraction of packed 32-bit integer elements in "v3" from "v2", storing the results in "dst" and the nth borrow bit in the nth position of "borrow" (borrow flag). Results are stored using writemask "k" (elements are copied from "v2" and "k_old" when the corresponding mask bit is not set).</description>
	<operation>FOR j := 0 to 15
	i := j*32
	IF k[j]
		dst[i+31:i] := v2[i+31:i] - v3[i+31:i]
		borrow[j] := Borrow(v2[i+31:i] - v3[i+31:i])
	ELSE
		dst[i+31:i] := v3[i+31:i]
		borrow[j] := k_old[j]
	FI
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VPSUBSETBD" form="zmm {k}, k, zmm"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_subrsetb_epi32">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Arithmetic</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<parameter type="__m512i" varname="v2" etype="UI32"/>
	<parameter type="__m512i" varname="v3" etype="UI32"/>
	<parameter type="__mmask16 *" varname="borrow" etype="MASK" memwidth="16"/>
	<description>Performs element-by-element subtraction of packed 32-bit integer elements in "v2" from "v3", storing the results in "dst" and "v2". The borrowed value from the subtraction difference for the nth element is written to the nth bit of "borrow" (borrow flag).</description>
	<operation>FOR j := 0 to 15
	i := j*32
	dst[i+31:i] := v3[i+31:i] - v2[i+31:i]
	borrow[j] := Borrow(v3[i+31:i] - v2[i+31:i])
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VPSUBRSETBD" form="zmm, k, zmm"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_mask_subrsetb_epi32">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Arithmetic</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<parameter type="__m512i" varname="v2" etype="UI32"/>
	<parameter type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__mmask16" varname="k_old" etype="MASK"/>
	<parameter type="__m512i" varname="v3" etype="UI32"/>
	<parameter type="__mmask16 *" varname="borrow" etype="MASK" memwidth="16"/>
	<description>Performs element-by-element subtraction of packed 32-bit integer elements in "v2" from "v3", storing the results in "dst" and "v2". The borrowed value from the subtraction difference for the nth element is written to the nth bit of "borrow" (borrow flag). Results are written using writemask "k" (elements are copied from "k" to "k_old" when the corresponding mask bit is not set).</description>
	<operation>FOR j := 0 to 15
	i := j*32
	IF k[j]
		diff := v3[i+31:i] - v2[i+31:i]
		borrow[j] := Borrow(v3[i+31:i] - v2[i+31:i])
		dst[i+31:i] := diff
		v2[i+31:i] := diff
	ELSE
		borrow[j] := k_old[j]
	FI
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VPSUBRSETBD" form="zmm {k}, k, zmm"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_sbb_epi32">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Arithmetic</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<parameter type="__m512i" varname="v2" etype="UI32"/>
	<parameter type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__m512i" varname="v3" etype="UI32"/>
	<parameter type="__mmask16 *" varname="borrow" etype="MASK" memwidth="16"/>
	<description>Performs element-by-element three-input subtraction of packed 32-bit integer elements of "v3" as well as the corresponding bit from "k" from "v2". The borrowed value from the subtraction difference for the nth element is written to the nth bit of "borrow" (borrow flag). Results are stored in "dst".</description>
	<operation>FOR j := 0 to 15
	i := j*32
	dst[i+31:i] := v2[i+31:i] - v3[i+31:i] - k[j]
	borrow[j] := Borrow(v2[i+31:i] - v3[i+31:i] - k[j])
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VPSBBD" form="zmm, k, zmm"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="KNC" name="_mm512_mask_sbb_epi32">
	<type>Integer</type>
	<CPUID>KNCNI</CPUID>
	<category>Arithmetic</category>
	<return type="__m512i" varname="dst" etype="UI32"/>
	<parameter type="__m512i" varname="v2" etype="UI32"/>
	<parameter type="__mmask16" varname="k1" etype="MASK"/>
	<parameter type="__mmask16" varname="k2" etype="MASK"/>
	<parameter type="__m512i" varname="v3" etype="UI32"/>
	<parameter type="__mmask16 *" varname="borrow" etype="MASK" memwidth="16"/>
	<description>Performs element-by-element three-input subtraction of packed 32-bit integer elements of "v3" as well as the corresponding bit from "k2" from "v2". The borrowed value from the subtraction difference for the nth element is written to the nth bit of "borrow" (borrow flag). Results are stored in "dst" using writemask "k1" (elements are copied from "v2" when the corresponding mask bit is not set).</description>
	<operation>FOR j := 0 to 15
	i := j*32
	IF k1[j]
		dst[i+31:i] := v2[i+31:i] - v3[i+31:i] - k2[j]
		borrow[j] := Borrow(v2[i+31:i] - v3[i+31:i] - k2[j])
	ELSE
		dst[i+31:i] := v2[i+31:i]
	FI
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VPSBBD" form="zmm {k}, k, zmm"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512/KNC" name="_mm512_cmp_epi32_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512F/KNCNI</CPUID>
	<category>Compare</category>
	<return type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__m512i" varname="a" etype="SI32"/>
	<parameter type="__m512i" varname="b" etype="SI32"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 32-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 15
	i := j*32
	k[j] := ( a[i+31:i] OP b[i+31:i] ) ? 1 : 0
ENDFOR
k[MAX:16] := 0
	</operation>
	<instruction name="VPCMPD" form="k, zmm, zmm, imm8" xed="VPCMPD_MASKmskw_MASKmskw_ZMMi32_ZMMi32_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512/KNC" name="_mm512_mask_cmp_epi32_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512F/KNCNI</CPUID>
	<category>Compare</category>
	<return type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__mmask16" varname="k1" etype="MASK"/>
	<parameter type="__m512i" varname="a" etype="SI32"/>
	<parameter type="__m512i" varname="b" etype="SI32"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 32-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 15
	i := j*32
	IF k1[j]
		k[j] := ( a[i+31:i] OP b[i+31:i] ) ? 1 : 0
	ELSE 
		k[j] := 0
	FI
ENDFOR
k[MAX:16] := 0
	</operation>
	<instruction name="VPCMPD" form="k {k}, zmm, zmm, imm8" xed="VPCMPD_MASKmskw_MASKmskw_ZMMi32_ZMMi32_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512/KNC" name="_mm512_cmp_epu32_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512F/KNCNI</CPUID>
	<category>Compare</category>
	<return type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__m512i" varname="a" etype="UI32"/>
	<parameter type="__m512i" varname="b" etype="UI32"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 32-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 15
	i := j*32
	k[j] := ( a[i+31:i] OP b[i+31:i] ) ? 1 : 0
ENDFOR
k[MAX:16] := 0
	</operation>
	<instruction name="VPCMPUD" form="k, zmm, zmm, imm8" xed="VPCMPUD_MASKmskw_MASKmskw_ZMMu32_ZMMu32_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512/KNC" name="_mm512_mask_cmp_epu32_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512F/KNCNI</CPUID>
	<category>Compare</category>
	<return type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__mmask16" varname="k1" etype="MASK"/>
	<parameter type="__m512i" varname="a" etype="UI32"/>
	<parameter type="__m512i" varname="b" etype="UI32"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 32-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 15
	i := j*32
	IF k1[j]
		k[j] := ( a[i+31:i] OP b[i+31:i] ) ? 1 : 0
	ELSE 
		k[j] := 0
	FI
ENDFOR
k[MAX:16] := 0
	</operation>
	<instruction name="VPCMPUD" form="k {k}, zmm, zmm, imm8" xed="VPCMPUD_MASKmskw_MASKmskw_ZMMu32_ZMMu32_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm256_cmp_epi8_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask32" varname="k" etype="MASK"/>
	<parameter type="__m256i" varname="a" etype="SI8"/>
	<parameter type="__m256i" varname="b" etype="SI8"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 8-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 31
	i := j*8
	k[j] := ( a[i+7:i] OP b[i+7:i] ) ? 1 : 0
ENDFOR
k[MAX:32] := 0
	</operation>
	<instruction name="VPCMPB" form="k, ymm, ymm, imm8" xed="VPCMPB_MASKmskw_MASKmskw_YMMi8_YMMi8_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm256_mask_cmp_epi8_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask32" varname="k" etype="MASK"/>
	<parameter type="__mmask32" varname="k1" etype="MASK"/>
	<parameter type="__m256i" varname="a" etype="SI8"/>
	<parameter type="__m256i" varname="b" etype="SI8"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 8-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 31
	i := j*8
	IF k1[j]
		k[j] := ( a[i+7:i] OP b[i+7:i] ) ? 1 : 0
	ELSE
		k[j] := 0
	FI
ENDFOR
k[MAX:32] := 0
	</operation>
	<instruction name="VPCMPB" form="k {k}, ymm, ymm, imm8" xed="VPCMPB_MASKmskw_MASKmskw_YMMi8_YMMi8_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_cmp_epi8_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask64" varname="k" etype="MASK"/>
	<parameter type="__m512i" varname="a" etype="SI8"/>
	<parameter type="__m512i" varname="b" etype="SI8"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 8-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 63
	i := j*8
	k[j] := ( a[i+7:i] OP b[i+7:i] ) ? 1 : 0
ENDFOR
k[MAX:64] := 0
	</operation>
	<instruction name="VPCMPB" form="k, zmm, zmm, imm8" xed="VPCMPB_MASKmskw_MASKmskw_ZMMi8_ZMMi8_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_mask_cmp_epi8_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask64" varname="k" etype="MASK"/>
	<parameter type="__mmask64" varname="k1" etype="MASK"/>
	<parameter type="__m512i" varname="a" etype="SI8"/>
	<parameter type="__m512i" varname="b" etype="SI8"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 8-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 63
	i := j*8
	IF k1[j]
		k[j] := ( a[i+7:i] OP b[i+7:i] ) ? 1 : 0
	ELSE
		k[j] := 0
	FI
ENDFOR
k[MAX:64] := 0
	</operation>
	<instruction name="VPCMPB" form="k {k}, zmm, zmm, imm8" xed="VPCMPB_MASKmskw_MASKmskw_ZMMi8_ZMMi8_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm_cmp_epi8_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__m128i" varname="a" etype="SI8"/>
	<parameter type="__m128i" varname="b" etype="SI8"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 8-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 15
	i := j*8
	k[j] := ( a[i+7:i] OP b[i+7:i] ) ? 1 : 0
ENDFOR
k[MAX:16] := 0
	</operation>
	<instruction name="VPCMPB" form="k, xmm, xmm, imm8" xed="VPCMPB_MASKmskw_MASKmskw_XMMi8_XMMi8_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm_mask_cmp_epi8_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__mmask16" varname="k1" etype="MASK"/>
	<parameter type="__m128i" varname="a" etype="SI8"/>
	<parameter type="__m128i" varname="b" etype="SI8"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 8-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 15
	i := j*8
	IF k1[j]
		k[j] := ( a[i+7:i] OP b[i+7:i] ) ? 1 : 0
	ELSE
		k[j] := 0
	FI
ENDFOR
k[MAX:16] := 0
	</operation>
	<instruction name="VPCMPB" form="k {k}, xmm, xmm, imm8" xed="VPCMPB_MASKmskw_MASKmskw_XMMi8_XMMi8_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm256_cmp_epu8_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask32" varname="k" etype="MASK"/>
	<parameter type="__m256i" varname="a" etype="UI8"/>
	<parameter type="__m256i" varname="b" etype="UI8"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 8-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 31
	i := j*8
	k[j] := ( a[i+7:i] OP b[i+7:i] ) ? 1 : 0
ENDFOR
k[MAX:32] := 0
	</operation>
	<instruction name="VPCMPUB" form="k, ymm, ymm, imm8" xed="VPCMPUB_MASKmskw_MASKmskw_YMMu8_YMMu8_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm256_mask_cmp_epu8_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask32" varname="k" etype="MASK"/>
	<parameter type="__mmask32" varname="k1" etype="MASK"/>
	<parameter type="__m256i" varname="a" etype="UI8"/>
	<parameter type="__m256i" varname="b" etype="UI8"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 8-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 31
	i := j*8
	IF k1[j]
		k[j] := ( a[i+7:i] OP b[i+7:i] ) ? 1 : 0
	ELSE
		k[j] := 0
	FI
ENDFOR
k[MAX:32] := 0
	</operation>
	<instruction name="VPCMPUB" form="k {k}, ymm, ymm, imm8" xed="VPCMPUB_MASKmskw_MASKmskw_YMMu8_YMMu8_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_cmp_epu8_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask64" varname="k" etype="MASK"/>
	<parameter type="__m512i" varname="a" etype="UI8"/>
	<parameter type="__m512i" varname="b" etype="UI8"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 8-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 63
	i := j*8
	k[j] := ( a[i+7:i] OP b[i+7:i] ) ? 1 : 0
ENDFOR
k[MAX:64] := 0
	</operation>
	<instruction name="VPCMPUB" form="k, zmm, zmm, imm8" xed="VPCMPUB_MASKmskw_MASKmskw_ZMMu8_ZMMu8_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_mask_cmp_epu8_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask64" varname="k" etype="MASK"/>
	<parameter type="__mmask64" varname="k1" etype="MASK"/>
	<parameter type="__m512i" varname="a" etype="UI8"/>
	<parameter type="__m512i" varname="b" etype="UI8"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 8-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 63
	i := j*8
	IF k1[j]
		k[j] := ( a[i+7:i] OP b[i+7:i] ) ? 1 : 0
	ELSE
		k[j] := 0
	FI
ENDFOR
k[MAX:64] := 0
	</operation>
	<instruction name="VPCMPUB" form="k {k}, zmm, zmm, imm8" xed="VPCMPUB_MASKmskw_MASKmskw_ZMMu8_ZMMu8_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm_cmp_epu8_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__m128i" varname="a" etype="UI8"/>
	<parameter type="__m128i" varname="b" etype="UI8"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 8-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 15
	i := j*8
	k[j] := ( a[i+7:i] OP b[i+7:i] ) ? 1 : 0
ENDFOR
k[MAX:16] := 0
	</operation>
	<instruction name="VPCMPUB" form="k, xmm, xmm, imm8" xed="VPCMPUB_MASKmskw_MASKmskw_XMMu8_XMMu8_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm_mask_cmp_epu8_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__mmask16" varname="k1" etype="MASK"/>
	<parameter type="__m128i" varname="a" etype="UI8"/>
	<parameter type="__m128i" varname="b" etype="UI8"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 8-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 15
	i := j*8
	IF k1[j]
		k[j] := ( a[i+7:i] OP b[i+7:i] ) ? 1 : 0
	ELSE
		k[j] := 0
	FI
ENDFOR
k[MAX:16] := 0
	</operation>
	<instruction name="VPCMPUB" form="k {k}, xmm, xmm, imm8" xed="VPCMPUB_MASKmskw_MASKmskw_XMMu8_XMMu8_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm256_cmp_epu16_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__m256i" varname="a" etype="UI16"/>
	<parameter type="__m256i" varname="b" etype="UI16"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 16-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 15
	i := j*16
	k[j] := ( a[i+15:i] OP b[i+15:i] ) ? 1 : 0
ENDFOR
k[MAX:16] := 0
	</operation>
	<instruction name="VPCMPUW" form="k, ymm, ymm, imm8" xed="VPCMPUW_MASKmskw_MASKmskw_YMMu16_YMMu16_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm256_mask_cmp_epu16_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__mmask16" varname="k1" etype="MASK"/>
	<parameter type="__m256i" varname="a" etype="UI16"/>
	<parameter type="__m256i" varname="b" etype="UI16"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 16-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 15
	i := j*16
	IF k1[j]
		k[j] := ( a[i+15:i] OP b[i+15:i] ) ? 1 : 0
	ELSE 
		k[j] := 0
	FI
ENDFOR
k[MAX:16] := 0
	</operation>
	<instruction name="VPCMPUW" form="k {k}, ymm, ymm, imm8" xed="VPCMPUW_MASKmskw_MASKmskw_YMMu16_YMMu16_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_cmp_epu16_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask32" varname="k" etype="MASK"/>
	<parameter type="__m512i" varname="a" etype="UI16"/>
	<parameter type="__m512i" varname="b" etype="UI16"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 16-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 31
	i := j*16
	k[j] := ( a[i+15:i] OP b[i+15:i] ) ? 1 : 0
ENDFOR
k[MAX:32] := 0
	</operation>
	<instruction name="VPCMPUW" form="k, zmm, zmm, imm8" xed="VPCMPUW_MASKmskw_MASKmskw_ZMMu16_ZMMu16_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_mask_cmp_epu16_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask32" varname="k" etype="MASK"/>
	<parameter type="__mmask32" varname="k1" etype="MASK"/>
	<parameter type="__m512i" varname="a" etype="UI16"/>
	<parameter type="__m512i" varname="b" etype="UI16"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 16-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 31
	i := j*16
	IF k1[j]
		k[j] := ( a[i+15:i] OP b[i+15:i] ) ? 1 : 0
	ELSE 
		k[j] := 0
	FI
ENDFOR
k[MAX:32] := 0
	</operation>
	<instruction name="VPCMPUW" form="k {k}, zmm, zmm, imm8" xed="VPCMPUW_MASKmskw_MASKmskw_ZMMu16_ZMMu16_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm_cmp_epu16_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__m128i" varname="a" etype="UI16"/>
	<parameter type="__m128i" varname="b" etype="UI16"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 16-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 7
	i := j*16
	k[j] := ( a[i+15:i] OP b[i+15:i] ) ? 1 : 0
ENDFOR
k[MAX:8] := 0
	</operation>
	<instruction name="VPCMPUW" form="k, xmm, xmm, imm8" xed="VPCMPUW_MASKmskw_MASKmskw_XMMu16_XMMu16_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm_mask_cmp_epu16_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__mmask8" varname="k1" etype="MASK"/>
	<parameter type="__m128i" varname="a" etype="UI16"/>
	<parameter type="__m128i" varname="b" etype="UI16"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 16-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 7
	i := j*16
	IF k1[j]
		k[j] := ( a[i+15:i] OP b[i+15:i] ) ? 1 : 0
	ELSE 
		k[j] := 0
	FI
ENDFOR
k[MAX:8] := 0
	</operation>
	<instruction name="VPCMPUW" form="k {k}, xmm, xmm, imm8" xed="VPCMPUW_MASKmskw_MASKmskw_XMMu16_XMMu16_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm256_cmp_epi16_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__m256i" varname="a" etype="SI16"/>
	<parameter type="__m256i" varname="b" etype="SI16"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 16-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 15
	i := j*16
	k[j] := ( a[i+15:i] OP b[i+15:i] ) ? 1 : 0
ENDFOR
k[MAX:16] := 0
	</operation>
	<instruction name="VPCMPW" form="k, ymm, ymm, imm8" xed="VPCMPW_MASKmskw_MASKmskw_YMMi16_YMMi16_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm256_mask_cmp_epi16_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__mmask16" varname="k1" etype="MASK"/>
	<parameter type="__m256i" varname="a" etype="SI16"/>
	<parameter type="__m256i" varname="b" etype="SI16"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 16-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 15
	i := j*16
	IF k1[j]
		k[j] := ( a[i+15:i] OP b[i+15:i] ) ? 1 : 0
	ELSE 
		k[j] := 0
	FI
ENDFOR
k[MAX:16] := 0
	</operation>
	<instruction name="VPCMPW" form="k {k}, ymm, ymm, imm8" xed="VPCMPW_MASKmskw_MASKmskw_YMMi16_YMMi16_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_cmp_epi16_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask32" varname="k" etype="MASK"/>
	<parameter type="__m512i" varname="a" etype="SI16"/>
	<parameter type="__m512i" varname="b" etype="SI16"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 16-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 31
	i := j*16
	k[j] := ( a[i+15:i] OP b[i+15:i] ) ? 1 : 0
ENDFOR
k[MAX:32] := 0
	</operation>
	<instruction name="VPCMPW" form="k, zmm, zmm, imm8" xed="VPCMPW_MASKmskw_MASKmskw_ZMMi16_ZMMi16_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_mask_cmp_epi16_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask32" varname="k" etype="MASK"/>
	<parameter type="__mmask32" varname="k1" etype="MASK"/>
	<parameter type="__m512i" varname="a" etype="SI16"/>
	<parameter type="__m512i" varname="b" etype="SI16"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 16-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 31
	i := j*16
	IF k1[j]
		k[j] := ( a[i+15:i] OP b[i+15:i] ) ? 1 : 0
	ELSE 
		k[j] := 0
	FI
ENDFOR
k[MAX:32] := 0
	</operation>
	<instruction name="VPCMPW" form="k {k}, zmm, zmm, imm8" xed="VPCMPW_MASKmskw_MASKmskw_ZMMi16_ZMMi16_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm_cmp_epi16_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__m128i" varname="a" etype="SI16"/>
	<parameter type="__m128i" varname="b" etype="SI16"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 16-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 7
	i := j*16
	k[j] := ( a[i+15:i] OP b[i+15:i] ) ? 1 : 0
ENDFOR
k[MAX:8] := 0
	</operation>
	<instruction name="VPCMPW" form="k, xmm, xmm, imm8" xed="VPCMPW_MASKmskw_MASKmskw_XMMi16_XMMi16_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm_mask_cmp_epi16_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512BW</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__mmask8" varname="k1" etype="MASK"/>
	<parameter type="__m128i" varname="a" etype="SI16"/>
	<parameter type="__m128i" varname="b" etype="SI16"/>
	<parameter type="const int" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 16-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 7
	i := j*16
	IF k1[j]
		k[j] := ( a[i+15:i] OP b[i+15:i] ) ? 1 : 0
	ELSE 
		k[j] := 0
	FI
ENDFOR
k[MAX:8] := 0
	</operation>
	<instruction name="VPCMPW" form="k {k}, xmm, xmm, imm8" xed="VPCMPW_MASKmskw_MASKmskw_XMMi16_XMMi16_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm256_cmp_epi32_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__m256i" varname="a" etype="SI32"/>
	<parameter type="__m256i" varname="b" etype="SI32"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 32-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 7
	i := j*32
	k[j] := ( a[i+31:i] OP b[i+31:i] ) ? 1 : 0
ENDFOR
k[MAX:8] := 0
	</operation>
	<instruction name="VPCMPD" form="k, ymm, ymm, imm8" xed="VPCMPD_MASKmskw_MASKmskw_YMMi32_YMMi32_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm256_mask_cmp_epi32_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__mmask8" varname="k1" etype="MASK"/>
	<parameter type="__m256i" varname="a" etype="SI32"/>
	<parameter type="__m256i" varname="b" etype="SI32"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 32-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 7
	i := j*32
	IF k1[j]
		k[j] := ( a[i+31:i] OP b[i+31:i] ) ? 1 : 0
	ELSE 
		k[j] := 0
	FI
ENDFOR
k[MAX:8] := 0
	</operation>
	<instruction name="VPCMPD" form="k {k}, ymm, ymm, imm8" xed="VPCMPD_MASKmskw_MASKmskw_YMMi32_YMMi32_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm_cmp_epi32_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__m128i" varname="a" etype="SI32"/>
	<parameter type="__m128i" varname="b" etype="SI32"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 32-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 3
	i := j*32
	k[j] := ( a[i+31:i] OP b[i+31:i] ) ? 1 : 0
ENDFOR
k[MAX:4] := 0
	</operation>
	<instruction name="VPCMPD" form="k, xmm, xmm, imm8" xed="VPCMPD_MASKmskw_MASKmskw_XMMi32_XMMi32_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm_mask_cmp_epi32_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__mmask8" varname="k1" etype="MASK"/>
	<parameter type="__m128i" varname="a" etype="SI32"/>
	<parameter type="__m128i" varname="b" etype="SI32"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 32-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 3
	i := j*32
	IF k1[j]
		k[j] := ( a[i+31:i] OP b[i+31:i] ) ? 1 : 0
	ELSE 
		k[j] := 0
	FI
ENDFOR
k[MAX:4] := 0
	</operation>
	<instruction name="VPCMPD" form="k {k}, xmm, xmm, imm8" xed="VPCMPD_MASKmskw_MASKmskw_XMMi32_XMMi32_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm256_cmp_epi64_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__m256i" varname="a" etype="SI64"/>
	<parameter type="__m256i" varname="b" etype="SI64"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 64-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 3
	i := j*64
	k[j] := ( a[i+63:i] OP b[i+63:i] ) ? 1 : 0
ENDFOR
k[MAX:4] := 0
	</operation>
	<instruction name="VPCMPQ" form="k, ymm, ymm, imm8" xed="VPCMPQ_MASKmskw_MASKmskw_YMMi64_YMMi64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm256_mask_cmp_epi64_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__mmask8" varname="k1" etype="MASK"/>
	<parameter type="__m256i" varname="a" etype="SI64"/>
	<parameter type="__m256i" varname="b" etype="SI64"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 64-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 3
	i := j*64
	IF k1[j]
		k[j] := ( a[i+63:i] OP b[i+63:i] ) ? 1 : 0
	ELSE 
		k[j] := 0
	FI
ENDFOR
k[MAX:4] := 0
	</operation>
	<instruction name="VPCMPQ" form="k {k}, ymm, ymm, imm8" xed="VPCMPQ_MASKmskw_MASKmskw_YMMi64_YMMi64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm_cmp_epi64_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__m128i" varname="a" etype="SI64"/>
	<parameter type="__m128i" varname="b" etype="SI64"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 64-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 1
	i := j*64
	k[j] := ( a[i+63:i] OP b[i+63:i] ) ? 1 : 0
ENDFOR
k[MAX:2] := 0
	</operation>
	<instruction name="VPCMPQ" form="k, xmm, xmm, imm8" xed="VPCMPQ_MASKmskw_MASKmskw_XMMi64_XMMi64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm_mask_cmp_epi64_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__mmask8" varname="k1" etype="MASK"/>
	<parameter type="__m128i" varname="a" etype="SI64"/>
	<parameter type="__m128i" varname="b" etype="SI64"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 64-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 1
	i := j*64
	IF k1[j]
		k[j] := ( a[i+63:i] OP b[i+63:i] ) ? 1 : 0
	ELSE 
		k[j] := 0
	FI
ENDFOR
k[MAX:2] := 0
	</operation>
	<instruction name="VPCMPQ" form="k {k}, xmm, xmm, imm8" xed="VPCMPQ_MASKmskw_MASKmskw_XMMi64_XMMi64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm256_cmp_epu32_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__m256i" varname="a" etype="UI32"/>
	<parameter type="__m256i" varname="b" etype="UI32"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 32-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 7
	i := j*32
	k[j] := ( a[i+31:i] OP b[i+31:i] ) ? 1 : 0
ENDFOR
k[MAX:8] := 0
	</operation>
	<instruction name="VPCMPUD" form="k, ymm, ymm, imm8" xed="VPCMPUD_MASKmskw_MASKmskw_YMMu32_YMMu32_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm256_mask_cmp_epu32_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__mmask8" varname="k1" etype="MASK"/>
	<parameter type="__m256i" varname="a" etype="UI32"/>
	<parameter type="__m256i" varname="b" etype="UI32"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 32-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 7
	i := j*32
	IF k1[j]
		k[j] := ( a[i+31:i] OP b[i+31:i] ) ? 1 : 0
	ELSE 
		k[j] := 0
	FI
ENDFOR
k[MAX:8] := 0
	</operation>
	<instruction name="VPCMPUD" form="k {k}, ymm, ymm, imm8" xed="VPCMPUD_MASKmskw_MASKmskw_YMMu32_YMMu32_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm_cmp_epu32_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__m128i" varname="a" etype="UI32"/>
	<parameter type="__m128i" varname="b" etype="UI32"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 32-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 3
	i := j*32
	k[j] := ( a[i+31:i] OP b[i+31:i] ) ? 1 : 0
ENDFOR
k[MAX:4] := 0
	</operation>
	<instruction name="VPCMPUD" form="k, xmm, xmm, imm8" xed="VPCMPUD_MASKmskw_MASKmskw_XMMu32_XMMu32_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm_mask_cmp_epu32_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__mmask8" varname="k1" etype="MASK"/>
	<parameter type="__m128i" varname="a" etype="UI32"/>
	<parameter type="__m128i" varname="b" etype="UI32"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 32-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 3
	i := j*32
	IF k1[j]
		k[j] := ( a[i+31:i] OP b[i+31:i] ) ? 1 : 0
	ELSE 
		k[j] := 0
	FI
ENDFOR
k[MAX:4] := 0
	</operation>
	<instruction name="VPCMPUD" form="k {k}, xmm, xmm, imm8" xed="VPCMPUD_MASKmskw_MASKmskw_XMMu32_XMMu32_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm256_cmp_epu64_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__m256i" varname="a" etype="UI64"/>
	<parameter type="__m256i" varname="b" etype="UI64"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 64-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 3
	i := j*64
	k[j] := ( a[i+63:i] OP b[i+63:i] ) ? 1 : 0
ENDFOR
k[MAX:4] := 0
	</operation>
	<instruction name="VPCMPUQ" form="k, ymm, ymm, imm8" xed="VPCMPUQ_MASKmskw_MASKmskw_YMMu64_YMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm256_mask_cmp_epu64_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__mmask8" varname="k1" etype="MASK"/>
	<parameter type="__m256i" varname="a" etype="UI64"/>
	<parameter type="__m256i" varname="b" etype="UI64"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 64-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 3
	i := j*64
	IF k1[j]
		k[j] := ( a[i+63:i] OP b[i+63:i] ) ? 1 : 0
	ELSE 
		k[j] := 0
	FI
ENDFOR
k[MAX:4] := 0
	</operation>
	<instruction name="VPCMPUQ" form="k {k}, ymm, ymm, imm8" xed="VPCMPUQ_MASKmskw_MASKmskw_YMMu64_YMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm_cmp_epu64_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__m128i" varname="a" etype="UI64"/>
	<parameter type="__m128i" varname="b" etype="UI64"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 64-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 1
	i := j*64
	k[j] := ( a[i+63:i] OP b[i+63:i] ) ? 1 : 0
ENDFOR
k[MAX:2] := 0
	</operation>
	<instruction name="VPCMPUQ" form="k, xmm, xmm, imm8" xed="VPCMPUQ_MASKmskw_MASKmskw_XMMu64_XMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm_mask_cmp_epu64_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512VL</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__mmask8" varname="k1" etype="MASK"/>
	<parameter type="__m128i" varname="a" etype="UI64"/>
	<parameter type="__m128i" varname="b" etype="UI64"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 64-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 1
	i := j*64
	IF k1[j]
		k[j] := ( a[i+63:i] OP b[i+63:i] ) ? 1 : 0
	ELSE 
		k[j] := 0
	FI
ENDFOR
k[MAX:2] := 0
	</operation>
	<instruction name="VPCMPUQ" form="k {k}, xmm, xmm, imm8" xed="VPCMPUQ_MASKmskw_MASKmskw_XMMu64_XMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_cmp_epi64_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512F</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__m512i" varname="a" etype="SI64"/>
	<parameter type="__m512i" varname="b" etype="SI64"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 64-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 7
	i := j*64
	k[j] := ( a[i+63:i] OP b[i+63:i] ) ? 1 : 0
ENDFOR
k[MAX:8] := 0
	</operation>
	<instruction name="VPCMPQ" form="k, zmm, zmm, imm8" xed="VPCMPQ_MASKmskw_MASKmskw_ZMMi64_ZMMi64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_mask_cmp_epi64_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512F</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__mmask8" varname="k1" etype="MASK"/>
	<parameter type="__m512i" varname="a" etype="SI64"/>
	<parameter type="__m512i" varname="b" etype="SI64"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed signed 64-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 7
	i := j*64
	IF k1[j]
		k[j] := ( a[i+63:i] OP b[i+63:i] ) ? 1 : 0
	ELSE 
		k[j] := 0
	FI
ENDFOR
k[MAX:8] := 0
	</operation>
	<instruction name="VPCMPQ" form="k {k}, zmm, zmm, imm8" xed="VPCMPQ_MASKmskw_MASKmskw_ZMMi64_ZMMi64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_cmp_epu64_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512F</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__m512i" varname="a" etype="UI64"/>
	<parameter type="__m512i" varname="b" etype="UI64"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 64-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k".</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 7
	i := j*64
	k[j] := ( a[i+63:i] OP b[i+63:i] ) ? 1 : 0
ENDFOR
k[MAX:8] := 0
	</operation>
	<instruction name="VPCMPUQ" form="k, zmm, zmm, imm8" xed="VPCMPUQ_MASKmskw_MASKmskw_ZMMu64_ZMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="AVX-512" name="_mm512_mask_cmp_epu64_mask">
	<type>Integer</type>
	<type>Mask</type>
	<CPUID>AVX512F</CPUID>
	<category>Compare</category>
	<return type="__mmask8" varname="k" etype="MASK"/>
	<parameter type="__mmask8" varname="k1" etype="MASK"/>
	<parameter type="__m512i" varname="a" etype="UI64"/>
	<parameter type="__m512i" varname="b" etype="UI64"/>
	<parameter type="_MM_CMPINT_ENUM" varname="imm8" etype="IMM" immtype="_MM_CMPINT"/>
	<description>Compare packed unsigned 64-bit integers in "a" and "b" based on the comparison operand specified by "imm8", and store the results in mask vector "k" using zeromask "k1" (elements are zeroed out when the corresponding mask bit is not set).</description>
	<operation>CASE (imm8[2:0]) OF
0: OP := _MM_CMPINT_EQ
1: OP := _MM_CMPINT_LT
2: OP := _MM_CMPINT_LE
3: OP := _MM_CMPINT_FALSE
4: OP := _MM_CMPINT_NE
5: OP := _MM_CMPINT_NLT
6: OP := _MM_CMPINT_NLE
7: OP := _MM_CMPINT_TRUE
ESAC
FOR j := 0 to 7
	i := j*64
	IF k1[j]
		k[j] := ( a[i+63:i] OP b[i+63:i] ) ? 1 : 0
	ELSE 
		k[j] := 0
	FI
ENDFOR
k[MAX:8] := 0
	</operation>
	<instruction name="VPCMPUQ" form="k {k}, zmm, zmm, imm8" xed="VPCMPUQ_MASKmskw_MASKmskw_ZMMu64_ZMMu64_IMM8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm512_maskz_gf2p8mul_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Arithmetic</category>
	<return type="__m512i" varname="dst" etype="UI8"/>
	<parameter type="__mmask64" varname="k" etype="MASK"/>
	<parameter type="__m512i" varname="a" etype="UI8"/>
	<parameter type="__m512i" varname="b" etype="UI8"/>
	<description>Multiply the packed 8-bit integers in "a" and "b" in the finite field GF(2^8), and store the results in "dst" using zeromask "k" (elements are zeroed out when the corresponding mask bit is not set). The field GF(2^8) is represented in polynomial representation with the reduction polynomial x^8 + x^4 + x^3 + x + 1.</description>
	<operation>
DEFINE gf2p8mul_byte(src1byte, src2byte) {
	tword := 0
	FOR i := 0 to 7
		IF src2byte.bit[i]
			tword := tword XOR (src1byte &lt;&lt; i)
		FI
	ENDFOR
	FOR i := 14 downto 8
		p := 0x11B &lt;&lt; (i-8)
		IF tword.bit[i]
			tword := tword XOR p
		FI
	ENDFOR
	RETURN tword.byte[0]
}
FOR j := 0 TO 63
	IF k[j]
		dst.byte[j] := gf2p8mul_byte(a.byte[j], b.byte[j])
	ELSE
		dst.byte[j] := 0
	FI
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VGF2P8MULB" form="zmm {z}, zmm, zmm" xed="VGF2P8MULB_ZMMu8_MASKmskw_ZMMu8_ZMMu8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm512_mask_gf2p8mul_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Arithmetic</category>
	<return type="__m512i" varname="dst" etype="UI8"/>
	<parameter type="__m512i" varname="src" etype="UI8"/>
	<parameter type="__mmask64" varname="k" etype="MASK"/>
	<parameter type="__m512i" varname="a" etype="UI8"/>
	<parameter type="__m512i" varname="b" etype="UI8"/>
	<description>Multiply the packed 8-bit integers in "a" and "b" in the finite field GF(2^8), and store the results in "dst" using writemask "k" (elements are copied from "src"" when the corresponding mask bit is not set). The field GF(2^8) is represented in polynomial representation with the reduction polynomial x^8 + x^4 + x^3 + x + 1.</description>
	<operation>
DEFINE gf2p8mul_byte(src1byte, src2byte) {
	tword := 0
	FOR i := 0 to 7
		IF src2byte.bit[i]
			tword := tword XOR (src1byte &lt;&lt; i)
		FI
	ENDFOR
	FOR i := 14 downto 8
		p := 0x11B &lt;&lt; (i-8)
		IF tword.bit[i]
			tword := tword XOR p
		FI
	ENDFOR
	RETURN tword.byte[0]
}
FOR j := 0 TO 63
	IF k[j]
		dst.byte[j] := gf2p8mul_byte(a.byte[j], b.byte[j])
	ELSE
		dst.byte[j] := src.byte[j]
	FI
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VGF2P8MULB" form="zmm {k}, zmm, zmm" xed="VGF2P8MULB_ZMMu8_MASKmskw_ZMMu8_ZMMu8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm512_gf2p8mul_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512F</CPUID>
	<category>Arithmetic</category>
	<return type="__m512i" varname="dst" etype="UI8"/>
	<parameter type="__m512i" varname="a" etype="UI8"/>
	<parameter type="__m512i" varname="b" etype="UI8"/>
	<description>Multiply the packed 8-bit integers in "a" and "b" in the finite field GF(2^8), and store the results in "dst". The field GF(2^8) is represented in polynomial representation with the reduction polynomial x^8 + x^4 + x^3 + x + 1.</description>
	<operation>
DEFINE gf2p8mul_byte(src1byte, src2byte) {
	tword := 0
	FOR i := 0 to 7
		IF src2byte.bit[i]
			tword := tword XOR (src1byte &lt;&lt; i)
		FI
	ENDFOR
	FOR i := 14 downto 8
		p := 0x11B &lt;&lt; (i-8)
		IF tword.bit[i]
			tword := tword XOR p
		FI
	ENDFOR
	RETURN tword.byte[0]
}
FOR j := 0 TO 63
	dst.byte[j] := gf2p8mul_byte(a.byte[j], b.byte[j])
ENDFOR
dst[MAX:512] := 0
	</operation>
	<instruction name="VGF2P8MULB" form="zmm, zmm, zmm" xed="VGF2P8MULB_ZMMu8_MASKmskw_ZMMu8_ZMMu8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm256_maskz_gf2p8mul_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512VL</CPUID>
	<category>Arithmetic</category>
	<return type="__m256i" varname="dst" etype="UI8"/>
	<parameter type="__mmask32" varname="k" etype="MASK"/>
	<parameter type="__m256i" varname="a" etype="UI8"/>
	<parameter type="__m256i" varname="b" etype="UI8"/>
	<description>Multiply the packed 8-bit integers in "a" and "b" in the finite field GF(2^8), and store the results in "dst" using zeromask "k" (elements are zeroed out when the corresponding mask bit is not set). The field GF(2^8) is represented in polynomial representation with the reduction polynomial x^8 + x^4 + x^3 + x + 1.</description>
	<operation>
DEFINE gf2p8mul_byte(src1byte, src2byte) {
	tword := 0
	FOR i := 0 to 7
		IF src2byte.bit[i]
			tword := tword XOR (src1byte &lt;&lt; i)
		FI
	ENDFOR
	FOR i := 14 downto 8
		p := 0x11B &lt;&lt; (i-8)
		IF tword.bit[i]
			tword := tword XOR p
		FI
	ENDFOR
	RETURN tword.byte[0]
}
FOR j := 0 TO 31
	IF k[j]
		dst.byte[j] := gf2p8mul_byte(a.byte[j], b.byte[j])
	ELSE
		dst.byte[j] := 0
	FI
ENDFOR
dst[MAX:256] := 0
	</operation>
	<instruction name="VGF2P8MULB" form="ymm {z}, ymm, ymm" xed="VGF2P8MULB_YMMu8_MASKmskw_YMMu8_YMMu8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm256_mask_gf2p8mul_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512VL</CPUID>
	<category>Arithmetic</category>
	<return type="__m256i" varname="dst" etype="UI8"/>
	<parameter type="__m256i" varname="src" etype="UI8"/>
	<parameter type="__mmask32" varname="k" etype="MASK"/>
	<parameter type="__m256i" varname="a" etype="UI8"/>
	<parameter type="__m256i" varname="b" etype="UI8"/>
	<description>Multiply the packed 8-bit integers in "a" and "b" in the finite field GF(2^8), and store the results in "dst" using writemask "k" (elements are copied from "src"" when the corresponding mask bit is not set). The field GF(2^8) is represented in polynomial representation with the reduction polynomial x^8 + x^4 + x^3 + x + 1.</description>
	<operation>
DEFINE gf2p8mul_byte(src1byte, src2byte) {
	tword := 0
	FOR i := 0 to 7
		IF src2byte.bit[i]
			tword := tword XOR (src1byte &lt;&lt; i)
		FI
	ENDFOR
	FOR i := 14 downto 8
		p := 0x11B &lt;&lt; (i-8)
		IF tword.bit[i]
			tword := tword XOR p
		FI
	ENDFOR
	RETURN tword.byte[0]
}
FOR j := 0 TO 31
	IF k[j]
		dst.byte[j] := gf2p8mul_byte(a.byte[j], b.byte[j])
	ELSE
		dst.byte[j] := src.byte[j]
	FI
ENDFOR
dst[MAX:256] := 0
	</operation>
	<instruction name="VGF2P8MULB" form="ymm {k}, ymm, ymm" xed="VGF2P8MULB_YMMu8_MASKmskw_YMMu8_YMMu8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm256_gf2p8mul_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512VL</CPUID>
	<category>Arithmetic</category>
	<return type="__m256i" varname="dst" etype="UI8"/>
	<parameter type="__m256i" varname="a" etype="UI8"/>
	<parameter type="__m256i" varname="b" etype="UI8"/>
	<description>Multiply the packed 8-bit integers in "a" and "b" in the finite field GF(2^8), and store the results in "dst". The field GF(2^8) is represented in polynomial representation with the reduction polynomial x^8 + x^4 + x^3 + x + 1.</description>
	<operation>
DEFINE gf2p8mul_byte(src1byte, src2byte) {
	tword := 0
	FOR i := 0 to 7
		IF src2byte.bit[i]
			tword := tword XOR (src1byte &lt;&lt; i)
		FI
	ENDFOR
	FOR i := 14 downto 8
		p := 0x11B &lt;&lt; (i-8)
		IF tword.bit[i]
			tword := tword XOR p
		FI
	ENDFOR
	RETURN tword.byte[0]
}
FOR j := 0 TO 31
	dst.byte[j] := gf2p8mul_byte(a.byte[j], b.byte[j])
ENDFOR
dst[MAX:256] := 0
	</operation>
	<instruction name="VGF2P8MULB" form="ymm, ymm, ymm" xed="VGF2P8MULB_YMMu8_MASKmskw_YMMu8_YMMu8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_maskz_gf2p8mul_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512VL</CPUID>
	<category>Arithmetic</category>
	<return type="__m128i" varname="dst" etype="UI8"/>
	<parameter type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__m128i" varname="a" etype="UI8"/>
	<parameter type="__m128i" varname="b" etype="UI8"/>
	<description>Multiply the packed 8-bit integers in "a" and "b" in the finite field GF(2^8), and store the results in "dst" using zeromask "k" (elements are zeroed out when the corresponding mask bit is not set). The field GF(2^8) is represented in polynomial representation with the reduction polynomial x^8 + x^4 + x^3 + x + 1.</description>
	<operation>
DEFINE gf2p8mul_byte(src1byte, src2byte) {
	tword := 0
	FOR i := 0 to 7
		IF src2byte.bit[i]
			tword := tword XOR (src1byte &lt;&lt; i)
		FI
	ENDFOR
	FOR i := 14 downto 8
		p := 0x11B &lt;&lt; (i-8)
		IF tword.bit[i]
			tword := tword XOR p
		FI
	ENDFOR
	RETURN tword.byte[0]
}
FOR j := 0 TO 15
	IF k[j]
		dst.byte[j] := gf2p8mul_byte(a.byte[j], b.byte[j])
	ELSE
		dst.byte[j] := 0
	FI
ENDFOR
dst[MAX:128] := 0
	</operation>
	<instruction name="VGF2P8MULB" form="xmm {z}, xmm, xmm" xed="VGF2P8MULB_XMMu8_MASKmskw_XMMu8_XMMu8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_mask_gf2p8mul_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512VL</CPUID>
	<category>Arithmetic</category>
	<return type="__m128i" varname="dst" etype="UI8"/>
	<parameter type="__m128i" varname="src" etype="UI8"/>
	<parameter type="__mmask16" varname="k" etype="MASK"/>
	<parameter type="__m128i" varname="a" etype="UI8"/>
	<parameter type="__m128i" varname="b" etype="UI8"/>
	<description>Multiply the packed 8-bit integers in "a" and "b" in the finite field GF(2^8), and store the results in "dst" using writemask "k" (elements are copied from "src"" when the corresponding mask bit is not set). The field GF(2^8) is represented in polynomial representation with the reduction polynomial x^8 + x^4 + x^3 + x + 1.</description>
	<operation>
DEFINE gf2p8mul_byte(src1byte, src2byte) {
	tword := 0
	FOR i := 0 to 7
		IF src2byte.bit[i]
			tword := tword XOR (src1byte &lt;&lt; i)
		FI
	ENDFOR
	FOR i := 14 downto 8
		p := 0x11B &lt;&lt; (i-8)
		IF tword.bit[i]
			tword := tword XOR p
		FI
	ENDFOR
	RETURN tword.byte[0]
}
FOR j := 0 TO 15
	IF k[j]
		dst.byte[j] := gf2p8mul_byte(a.byte[j], b.byte[j])
	ELSE
		dst.byte[j] := src.byte[j]
	FI
ENDFOR
dst[MAX:128] := 0
	</operation>
	<instruction name="VGF2P8MULB" form="xmm {k}, xmm, xmm" xed="VGF2P8MULB_XMMu8_MASKmskw_XMMu8_XMMu8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>
<intrinsic tech="Other" name="_mm_gf2p8mul_epi8">
	<type>Integer</type>
	<CPUID>GFNI</CPUID>
	<CPUID>AVX512VL</CPUID>
	<category>Arithmetic</category>
	<return type="__m128i" varname="dst" etype="UI8"/>
	<parameter type="__m128i" varname="a" etype="UI8"/>
	<parameter type="__m128i" varname="b" etype="UI8"/>
	<description>Multiply the packed 8-bit integers in "a" and "b" in the finite field GF(2^8), and store the results in "dst". The field GF(2^8) is represented in polynomial representation with the reduction polynomial x^8 + x^4 + x^3 + x + 1.</description>
	<operation>
DEFINE gf2p8mul_byte(src1byte, src2byte) {
	tword := 0
	FOR i := 0 to 7
		IF src2byte.bit[i]
			tword := tword XOR (src1byte &lt;&lt; i)
		FI
	ENDFOR
	FOR i := 14 downto 8
		p := 0x11B &lt;&lt; (i-8)
		IF tword.bit[i]
			tword := tword XOR p
		FI
	ENDFOR
	RETURN tword.byte[0]
}
FOR j := 0 TO 15
	dst.byte[j] := gf2p8mul_byte(a.byte[j], b.byte[j])
ENDFOR
dst[MAX:128] := 0
	</operation>
	<instruction name="VGF2P8MULB" form="xmm, xmm, xmm" xed="VGF2P8MULB_XMMu8_MASKmskw_XMMu8_XMMu8_AVX512"/>
	<header>immintrin.h</header>
</intrinsic>

