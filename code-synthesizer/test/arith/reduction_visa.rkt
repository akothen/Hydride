#lang rosette
(require rosette/lib/synthax)
(require rosette/lib/angelic)
(require racket/pretty)
(require data/bit-vector)
(require rosette/lib/destruct)
(require rosette/solver/smt/boolector)
(require hydride)


(custodian-limit-memory (current-custodian) (* 20000 1024 1024))
(enable-debug)
(define reg_0_tensor (?? (bitvector 512)))
(define reg_0 (arith:create-tensor reg_0_tensor (vector 16) (vector 0) 'int32 0))
(define reg_1_tensor (?? (bitvector 512)))
(define reg_1 (arith:create-tensor reg_1_tensor (vector 16) (vector 0) 'int32 1))
;;; (define reg_2_tensor (?? (bitvector 512)))
;;; (define reg_2 (arith:create-tensor reg_2_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_3_tensor (?? (bitvector 512)))
;;; (define reg_3 (arith:create-tensor reg_3_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_4_tensor (?? (bitvector 512)))
;;; (define reg_4 (arith:create-tensor reg_4_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_5_tensor (?? (bitvector 512)))
;;; (define reg_5 (arith:create-tensor reg_5_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_6_tensor (?? (bitvector 512)))
;;; (define reg_6 (arith:create-tensor reg_6_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_7_tensor (?? (bitvector 512)))
;;; (define reg_7 (arith:create-tensor reg_7_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_8_tensor (?? (bitvector 512)))
;;; (define reg_8 (arith:create-tensor reg_8_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_9_tensor (?? (bitvector 512)))
;;; (define reg_9 (arith:create-tensor reg_9_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_10_tensor (?? (bitvector 512)))
;;; (define reg_10 (arith:create-tensor reg_10_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_11_tensor (?? (bitvector 512)))
;;; (define reg_11 (arith:create-tensor reg_11_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_12_tensor (?? (bitvector 512)))
;;; (define reg_12 (arith:create-tensor reg_12_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_25_tensor (?? (bitvector 512)))
;;; (define reg_25 (arith:create-tensor reg_25_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_13_tensor (?? (bitvector 512)))
;;; (define reg_13 (arith:create-tensor reg_13_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_14_tensor (?? (bitvector 512)))
;;; (define reg_14 (arith:create-tensor reg_14_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_15_tensor (?? (bitvector 512)))
;;; (define reg_15 (arith:create-tensor reg_15_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_16_tensor (?? (bitvector 512)))
;;; (define reg_16 (arith:create-tensor reg_16_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_17_tensor (?? (bitvector 512)))
;;; (define reg_17 (arith:create-tensor reg_17_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_18_tensor (?? (bitvector 512)))
;;; (define reg_18 (arith:create-tensor reg_18_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_19_tensor (?? (bitvector 512)))
;;; (define reg_19 (arith:create-tensor reg_19_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_20_tensor (?? (bitvector 512)))
;;; (define reg_20 (arith:create-tensor reg_20_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_21_tensor (?? (bitvector 512)))
;;; (define reg_21 (arith:create-tensor reg_21_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_22_tensor (?? (bitvector 512)))
;;; (define reg_22 (arith:create-tensor reg_22_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_23_tensor (?? (bitvector 512)))
;;; (define reg_23 (arith:create-tensor reg_23_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_24_tensor (?? (bitvector 512)))
;;; (define reg_24 (arith:create-tensor reg_24_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_26_tensor (?? (bitvector 512)))
;;; (define reg_26 (arith:create-tensor reg_26_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_27_tensor (?? (bitvector 512)))
;;; (define reg_27 (arith:create-tensor reg_27_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_28_tensor (?? (bitvector 512)))
;;; (define reg_28 (arith:create-tensor reg_28_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_29_tensor (?? (bitvector 512)))
;;; (define reg_29 (arith:create-tensor reg_29_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_30_tensor (?? (bitvector 512)))
;;; (define reg_30 (arith:create-tensor reg_30_tensor (vector 16) (vector 0) 'int32))
;;; (define reg_31_tensor (?? (bitvector 512)))
;;; (define reg_31 (arith:create-tensor reg_31_tensor (vector 16) (vector 0) 'int32))

; Creating a map between buffers and mlir call node arguments
(define id-map (make-hash))
(hash-set! id-map reg_0 (bv 0 (bitvector 8)))
(hash-set! id-map reg_1 (bv 1 (bitvector 8)))
;;; (hash-set! id-map reg_2 (bv 2 (bitvector 8)))
;;; (hash-set! id-map reg_3 (bv 3 (bitvector 8)))
;;; (hash-set! id-map reg_4 (bv 4 (bitvector 8)))
;;; (hash-set! id-map reg_5 (bv 5 (bitvector 8)))
;;; (hash-set! id-map reg_6 (bv 6 (bitvector 8)))
;;; (hash-set! id-map reg_7 (bv 7 (bitvector 8)))
;;; (hash-set! id-map reg_8 (bv 8 (bitvector 8)))
;;; (hash-set! id-map reg_9 (bv 9 (bitvector 8)))
;;; (hash-set! id-map reg_10 (bv 10 (bitvector 8)))
;;; (hash-set! id-map reg_11 (bv 11 (bitvector 8)))
;;; (hash-set! id-map reg_12 (bv 12 (bitvector 8)))
;;; (hash-set! id-map reg_25 (bv 25 (bitvector 8)))
;;; (hash-set! id-map reg_13 (bv 13 (bitvector 8)))
;;; (hash-set! id-map reg_14 (bv 14 (bitvector 8)))
;;; (hash-set! id-map reg_15 (bv 15 (bitvector 8)))
;;; (hash-set! id-map reg_16 (bv 16 (bitvector 8)))
;;; (hash-set! id-map reg_17 (bv 17 (bitvector 8)))
;;; (hash-set! id-map reg_18 (bv 18 (bitvector 8)))
;;; (hash-set! id-map reg_19 (bv 19 (bitvector 8)))
;;; (hash-set! id-map reg_20 (bv 20 (bitvector 8)))
;;; (hash-set! id-map reg_21 (bv 21 (bitvector 8)))
;;; (hash-set! id-map reg_22 (bv 22 (bitvector 8)))
;;; (hash-set! id-map reg_23 (bv 23 (bitvector 8)))
;;; (hash-set! id-map reg_24 (bv 24 (bitvector 8)))
;;; (hash-set! id-map reg_26 (bv 26 (bitvector 8)))
;;; (hash-set! id-map reg_27 (bv 27 (bitvector 8)))
;;; (hash-set! id-map reg_28 (bv 28 (bitvector 8)))
;;; (hash-set! id-map reg_29 (bv 29 (bitvector 8)))
;;; (hash-set! id-map reg_30 (bv 30 (bitvector 8)))
;;; (hash-set! id-map reg_31 (bv 31 (bitvector 8)))


;;; (define mlir-expr 
;;;   (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add (arith:tensor-add reg_0 reg_1) reg_2) reg_3) reg_4) reg_5) reg_6) reg_7) reg_8) reg_9) reg_10) reg_11) reg_12) reg_13) reg_14) reg_15) reg_16) reg_17) reg_18) reg_19) reg_20) reg_21) reg_22) reg_23) reg_24) reg_25) reg_26) reg_27) reg_28) reg_29) reg_30) reg_31)  )


(define mlir-expr
  (arith:tensor-add reg_0 reg_1)
  )


(clear-vc!)
(define synth-res (synthesize-mlir-expr mlir-expr id-map 3 16 'z3 #t #f  ""  ""  "x86"))
(println synth-res)
(dump-synth-res-with-typeinfo synth-res id-map)
; Translate synthesized hydride-expression into LLVM-IR
(compile-to-llvm synth-res id-map "hydride.node.vecdim_reduction.0" "vecdim_reduction")
