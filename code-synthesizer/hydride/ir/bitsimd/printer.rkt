;#============================== Hydride File =================================
;#
;# Part of the Hydride Compiler Infrastructure.
;# <Placeholder for license information>
;#
;#=============================================================================
;#
;# Do NOT modify this file. It is automatically generated.
;#
;#=============================================================================

#lang rosette
(require rosette/lib/synthax)
(require rosette/lib/angelic)
(require racket/pretty)
(require rosette/lib/destruct)

(require hydride/utils/bvops)
(require hydride/utils/misc)

(require hydride/ir/hydride/definition)


(require hydride/ir/bitsimd/definition)
(require hydride/ir/bitsimd/length)
(require hydride/ir/bitsimd/prec)


(provide (all-defined-out))
;; ================================================================================
;;                                DSL Custom Printer
;; ================================================================================
(define (bitsimd:hydride-printer  prog)
 (destruct prog
	[(dim-x id) (string-append "\n"  "(dim-x " (~s id) ")")]
	[(dim-y id) (string-append "\n" "(dim-y " (~s id) ")")]
	[(idx-i id) (string-append "\n" "(idx-i " (~s id) ")")]
	[(idx-j id) (string-append "\n" "(idx-j " (~s id) ")")]
	[(reg id) (string-append  "\n" "(reg " (~s  (bitvector->natural id)) ")")]
	[(lit v) (string-append   "(lit " (~s v) ")")]
	[(nop v1) (string-append "\n" "(nop " (bitsimd:hydride-printer v1) ")")]
	[(idx-add i1 i2) (string-append "\n" "(idx-add " (~s i1) (~s i2) ")" )]
	[(idx-mul i1 i2) (string-append "\n" "(idx-mul " (~s i1) (~s i2) ")" )]
	[(vector-two-input-swizzle_dsl v0 v1 num_2 prec_i_o num_4 num_5 num_6 num_7 num_8) 
	(string-append "\n" 
	(string-append "(vector-two-input-swizzle_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v1 (vector 0)) (bitsimd:get-prec v1 (vector 0))) (/ (bitsimd:get-prec v1 (vector 0))) )] [else (values (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v1)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_2 (vector 0)) (bitsimd:get-prec num_2 (vector 0))) (/ (bitsimd:get-prec num_2 (vector 0))) )] [else (values (/ (bitsimd:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_2)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_4 (vector 0)) (bitsimd:get-prec num_4 (vector 0))) (/ (bitsimd:get-prec num_4 (vector 0))) )] [else (values (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_5 (vector 0)) (bitsimd:get-prec num_5 (vector 0))) (/ (bitsimd:get-prec num_5 (vector 0))) )] [else (values (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_6 (vector 0)) (bitsimd:get-prec num_6 (vector 0))) (/ (bitsimd:get-prec num_6 (vector 0))) )] [else (values (/ (bitsimd:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_7 (vector 0)) (bitsimd:get-prec num_7 (vector 0))) (/ (bitsimd:get-prec num_7 (vector 0))) )] [else (values (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_8 (vector 0)) (bitsimd:get-prec num_8 (vector 0))) (/ (bitsimd:get-prec num_8 (vector 0))) )] [else (values (/ (bitsimd:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
	[(interleave-vectors_dsl v0 v1 size_i_o prec_i_o) 
	(string-append "\n" 
	(string-append "(interleave-vectors_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v1 (vector 0)) (bitsimd:get-prec v1 (vector 0))) (/ (bitsimd:get-prec v1 (vector 0))) )] [else (values (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length size_i_o (vector 0)) (bitsimd:get-prec size_i_o (vector 0))) (/ (bitsimd:get-prec size_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer size_i_o)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
	[(interleave-vector_dsl v0 size_i_o prec_i_o) 
	(string-append "\n" 
	(string-append "(interleave-vector_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length size_i_o (vector 0)) (bitsimd:get-prec size_i_o (vector 0))) (/ (bitsimd:get-prec size_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer size_i_o)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
	[(deinterleave-vector_dsl v0 size_i_o prec_i_o) 
	(string-append "\n" 
	(string-append "(deinterleave-vector_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length size_i_o (vector 0)) (bitsimd:get-prec size_i_o (vector 0))) (/ (bitsimd:get-prec size_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer size_i_o)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
	[(llvm-vect-add_dsl v0 v1 num_2 prec_i_o) 
	(string-append "\n" 
	(string-append "(llvm-vect-add_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v1 (vector 0)) (bitsimd:get-prec v1 (vector 0))) (/ (bitsimd:get-prec v1 (vector 0))) )] [else (values (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v1)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_2 (vector 0)) (bitsimd:get-prec num_2 (vector 0))) (/ (bitsimd:get-prec num_2 (vector 0))) )] [else (values (/ (bitsimd:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_2)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
	[(llvm-vect-sub_dsl v0 v1 num_2 prec_i_o) 
	(string-append "\n" 
	(string-append "(llvm-vect-sub_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v1 (vector 0)) (bitsimd:get-prec v1 (vector 0))) (/ (bitsimd:get-prec v1 (vector 0))) )] [else (values (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v1)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_2 (vector 0)) (bitsimd:get-prec num_2 (vector 0))) (/ (bitsimd:get-prec num_2 (vector 0))) )] [else (values (/ (bitsimd:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_2)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
	[(llvm-vect-mul_dsl v0 v1 num_2 prec_i_o) 
	(string-append "\n" 
	(string-append "(llvm-vect-mul_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v1 (vector 0)) (bitsimd:get-prec v1 (vector 0))) (/ (bitsimd:get-prec v1 (vector 0))) )] [else (values (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v1)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_2 (vector 0)) (bitsimd:get-prec num_2 (vector 0))) (/ (bitsimd:get-prec num_2 (vector 0))) )] [else (values (/ (bitsimd:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_2)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
	[(llvm-vect-sdiv_dsl v0 v1 num_2 prec_i_o) 
	(string-append "\n" 
	(string-append "(llvm-vect-sdiv_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v1 (vector 0)) (bitsimd:get-prec v1 (vector 0))) (/ (bitsimd:get-prec v1 (vector 0))) )] [else (values (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v1)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_2 (vector 0)) (bitsimd:get-prec num_2 (vector 0))) (/ (bitsimd:get-prec num_2 (vector 0))) )] [else (values (/ (bitsimd:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_2)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
	[(llvm-vect-udiv_dsl v0 v1 num_2 prec_i_o) 
	(string-append "\n" 
	(string-append "(llvm-vect-udiv_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v1 (vector 0)) (bitsimd:get-prec v1 (vector 0))) (/ (bitsimd:get-prec v1 (vector 0))) )] [else (values (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v1)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_2 (vector 0)) (bitsimd:get-prec num_2 (vector 0))) (/ (bitsimd:get-prec num_2 (vector 0))) )] [else (values (/ (bitsimd:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_2)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
	[(llvm-zext_dsl v0 size_i size_o) 
	(string-append "\n" 
	(string-append "(llvm-zext_dsl " (if (lit? v0) (bitsimd:hydride-printer v0) (bitsimd:hydride-printer v0)) " " " " (if (lit? size_i) (bitsimd:hydride-printer size_i) (bitsimd:hydride-printer size_i)) " " " " (if (lit? size_o) (bitsimd:hydride-printer size_o) (bitsimd:hydride-printer size_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
	[(scalar_splat_dsl v0 size_i size_o) 
	(string-append "\n" 
	(string-append "(scalar_splat_dsl " (if (lit? v0) (bitsimd:hydride-printer v0) (bitsimd:hydride-printer v0)) " " " " (if (lit? size_i) (bitsimd:hydride-printer size_i) (bitsimd:hydride-printer size_i)) " " " " (if (lit? size_o) (bitsimd:hydride-printer size_o) (bitsimd:hydride-printer size_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
[(pimMax_v16384_e8__v16384_e8__v16384_e8_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8) 
	(string-append "\n" 
	(string-append "(pimMax_v16384_e8__v16384_e8__v16384_e8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v1 (vector 0)) (bitsimd:get-prec v1 (vector 0))) (/ (bitsimd:get-prec v1 (vector 0))) )] [else (values (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length size_i_o (vector 0)) (bitsimd:get-prec size_i_o (vector 0))) (/ (bitsimd:get-prec size_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_3 (vector 0)) (bitsimd:get-prec num_3 (vector 0))) (/ (bitsimd:get-prec num_3 (vector 0))) )] [else (values (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_4 (vector 0)) (bitsimd:get-prec num_4 (vector 0))) (/ (bitsimd:get-prec num_4 (vector 0))) )] [else (values (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_5 (vector 0)) (bitsimd:get-prec num_5 (vector 0))) (/ (bitsimd:get-prec num_5 (vector 0))) )] [else (values (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_7 (vector 0)) (bitsimd:get-prec num_7 (vector 0))) (/ (bitsimd:get-prec num_7 (vector 0))) )] [else (values (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_8 (vector 0)) (bitsimd:get-prec num_8 (vector 0))) (/ (bitsimd:get-prec num_8 (vector 0))) )] [else (values (/ (bitsimd:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
[(pimXor_v16384_e8__v16384_e8__v16384_e8_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7) 
	(string-append "\n" 
	(string-append "(pimXor_v16384_e8__v16384_e8__v16384_e8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v1 (vector 0)) (bitsimd:get-prec v1 (vector 0))) (/ (bitsimd:get-prec v1 (vector 0))) )] [else (values (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length size_i_o (vector 0)) (bitsimd:get-prec size_i_o (vector 0))) (/ (bitsimd:get-prec size_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_3 (vector 0)) (bitsimd:get-prec num_3 (vector 0))) (/ (bitsimd:get-prec num_3 (vector 0))) )] [else (values (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_4 (vector 0)) (bitsimd:get-prec num_4 (vector 0))) (/ (bitsimd:get-prec num_4 (vector 0))) )] [else (values (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_5 (vector 0)) (bitsimd:get-prec num_5 (vector 0))) (/ (bitsimd:get-prec num_5 (vector 0))) )] [else (values (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_7 (vector 0)) (bitsimd:get-prec num_7 (vector 0))) (/ (bitsimd:get-prec num_7 (vector 0))) )] [else (values (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_7)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
[(pimDiv_v512_e16__v512_e16__v512_e16_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(pimDiv_v512_e16__v512_e16__v512_e16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v1 (vector 0)) (bitsimd:get-prec v1 (vector 0))) (/ (bitsimd:get-prec v1 (vector 0))) )] [else (values (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length size_i_o (vector 0)) (bitsimd:get-prec size_i_o (vector 0))) (/ (bitsimd:get-prec size_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_3 (vector 0)) (bitsimd:get-prec num_3 (vector 0))) (/ (bitsimd:get-prec num_3 (vector 0))) )] [else (values (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_4 (vector 0)) (bitsimd:get-prec num_4 (vector 0))) (/ (bitsimd:get-prec num_4 (vector 0))) )] [else (values (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_5 (vector 0)) (bitsimd:get-prec num_5 (vector 0))) (/ (bitsimd:get-prec num_5 (vector 0))) )] [else (values (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_7 (vector 0)) (bitsimd:get-prec num_7 (vector 0))) (/ (bitsimd:get-prec num_7 (vector 0))) )] [else (values (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_8 (vector 0)) (bitsimd:get-prec num_8 (vector 0))) (/ (bitsimd:get-prec num_8 (vector 0))) )] [else (values (/ (bitsimd:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_9 (vector 0)) (bitsimd:get-prec num_9 (vector 0))) (/ (bitsimd:get-prec num_9 (vector 0))) )] [else (values (/ (bitsimd:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_10 (vector 0)) (bitsimd:get-prec num_10 (vector 0))) (/ (bitsimd:get-prec num_10 (vector 0))) )] [else (values (/ (bitsimd:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_11 (vector 0)) (bitsimd:get-prec num_11 (vector 0))) (/ (bitsimd:get-prec num_11 (vector 0))) )] [else (values (/ (bitsimd:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_12 (vector 0)) (bitsimd:get-prec num_12 (vector 0))) (/ (bitsimd:get-prec num_12 (vector 0))) )] [else (values (/ (bitsimd:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
[(pimEQ_v512_e8__v512_e8__v512_e8_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9) 
	(string-append "\n" 
	(string-append "(pimEQ_v512_e8__v512_e8__v512_e8_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length vc_0 (vector 0)) (bitsimd:get-prec vc_0 (vector 0))) (/ (bitsimd:get-prec vc_0 (vector 0))) )] [else (values (/ (bitsimd:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length vc_1 (vector 0)) (bitsimd:get-prec vc_1 (vector 0))) (/ (bitsimd:get-prec vc_1 (vector 0))) )] [else (values (/ (bitsimd:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v2 (vector 0)) (bitsimd:get-prec v2 (vector 0))) (/ (bitsimd:get-prec v2 (vector 0))) )] [else (values (/ (bitsimd:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v3 (vector 0)) (bitsimd:get-prec v3 (vector 0))) (/ (bitsimd:get-prec v3 (vector 0))) )] [else (values (/ (bitsimd:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length size_i_o (vector 0)) (bitsimd:get-prec size_i_o (vector 0))) (/ (bitsimd:get-prec size_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_5 (vector 0)) (bitsimd:get-prec num_5 (vector 0))) (/ (bitsimd:get-prec num_5 (vector 0))) )] [else (values (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_6 (vector 0)) (bitsimd:get-prec num_6 (vector 0))) (/ (bitsimd:get-prec num_6 (vector 0))) )] [else (values (/ (bitsimd:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_7 (vector 0)) (bitsimd:get-prec num_7 (vector 0))) (/ (bitsimd:get-prec num_7 (vector 0))) )] [else (values (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_9 (vector 0)) (bitsimd:get-prec num_9 (vector 0))) (/ (bitsimd:get-prec num_9 (vector 0))) )] [else (values (/ (bitsimd:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_9)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
[(pimMin_v512_e8__v512_e8__v512_e8_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8) 
	(string-append "\n" 
	(string-append "(pimMin_v512_e8__v512_e8__v512_e8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v1 (vector 0)) (bitsimd:get-prec v1 (vector 0))) (/ (bitsimd:get-prec v1 (vector 0))) )] [else (values (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length size_i_o (vector 0)) (bitsimd:get-prec size_i_o (vector 0))) (/ (bitsimd:get-prec size_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_3 (vector 0)) (bitsimd:get-prec num_3 (vector 0))) (/ (bitsimd:get-prec num_3 (vector 0))) )] [else (values (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_4 (vector 0)) (bitsimd:get-prec num_4 (vector 0))) (/ (bitsimd:get-prec num_4 (vector 0))) )] [else (values (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_5 (vector 0)) (bitsimd:get-prec num_5 (vector 0))) (/ (bitsimd:get-prec num_5 (vector 0))) )] [else (values (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_7 (vector 0)) (bitsimd:get-prec num_7 (vector 0))) (/ (bitsimd:get-prec num_7 (vector 0))) )] [else (values (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_8 (vector 0)) (bitsimd:get-prec num_8 (vector 0))) (/ (bitsimd:get-prec num_8 (vector 0))) )] [else (values (/ (bitsimd:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
[(pimDiv_v512_e8__v512_e8__v512_e8_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(pimDiv_v512_e8__v512_e8__v512_e8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v1 (vector 0)) (bitsimd:get-prec v1 (vector 0))) (/ (bitsimd:get-prec v1 (vector 0))) )] [else (values (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length size_i_o (vector 0)) (bitsimd:get-prec size_i_o (vector 0))) (/ (bitsimd:get-prec size_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_3 (vector 0)) (bitsimd:get-prec num_3 (vector 0))) (/ (bitsimd:get-prec num_3 (vector 0))) )] [else (values (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_4 (vector 0)) (bitsimd:get-prec num_4 (vector 0))) (/ (bitsimd:get-prec num_4 (vector 0))) )] [else (values (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_5 (vector 0)) (bitsimd:get-prec num_5 (vector 0))) (/ (bitsimd:get-prec num_5 (vector 0))) )] [else (values (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_7 (vector 0)) (bitsimd:get-prec num_7 (vector 0))) (/ (bitsimd:get-prec num_7 (vector 0))) )] [else (values (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_8 (vector 0)) (bitsimd:get-prec num_8 (vector 0))) (/ (bitsimd:get-prec num_8 (vector 0))) )] [else (values (/ (bitsimd:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_9 (vector 0)) (bitsimd:get-prec num_9 (vector 0))) (/ (bitsimd:get-prec num_9 (vector 0))) )] [else (values (/ (bitsimd:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_10 (vector 0)) (bitsimd:get-prec num_10 (vector 0))) (/ (bitsimd:get-prec num_10 (vector 0))) )] [else (values (/ (bitsimd:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_11 (vector 0)) (bitsimd:get-prec num_11 (vector 0))) (/ (bitsimd:get-prec num_11 (vector 0))) )] [else (values (/ (bitsimd:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_12 (vector 0)) (bitsimd:get-prec num_12 (vector 0))) (/ (bitsimd:get-prec num_12 (vector 0))) )] [else (values (/ (bitsimd:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
[(pimOr_v1024_e32__v1024_e32__v1024_e32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7) 
	(string-append "\n" 
	(string-append "(pimOr_v1024_e32__v1024_e32__v1024_e32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v1 (vector 0)) (bitsimd:get-prec v1 (vector 0))) (/ (bitsimd:get-prec v1 (vector 0))) )] [else (values (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length size_i_o (vector 0)) (bitsimd:get-prec size_i_o (vector 0))) (/ (bitsimd:get-prec size_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_3 (vector 0)) (bitsimd:get-prec num_3 (vector 0))) (/ (bitsimd:get-prec num_3 (vector 0))) )] [else (values (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_4 (vector 0)) (bitsimd:get-prec num_4 (vector 0))) (/ (bitsimd:get-prec num_4 (vector 0))) )] [else (values (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_5 (vector 0)) (bitsimd:get-prec num_5 (vector 0))) (/ (bitsimd:get-prec num_5 (vector 0))) )] [else (values (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_7 (vector 0)) (bitsimd:get-prec num_7 (vector 0))) (/ (bitsimd:get-prec num_7 (vector 0))) )] [else (values (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_7)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
[(pimSub_v512_e8__v512_e8__v512_e8_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8) 
	(string-append "\n" 
	(string-append "(pimSub_v512_e8__v512_e8__v512_e8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v1 (vector 0)) (bitsimd:get-prec v1 (vector 0))) (/ (bitsimd:get-prec v1 (vector 0))) )] [else (values (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length size_i_o (vector 0)) (bitsimd:get-prec size_i_o (vector 0))) (/ (bitsimd:get-prec size_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_3 (vector 0)) (bitsimd:get-prec num_3 (vector 0))) (/ (bitsimd:get-prec num_3 (vector 0))) )] [else (values (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_4 (vector 0)) (bitsimd:get-prec num_4 (vector 0))) (/ (bitsimd:get-prec num_4 (vector 0))) )] [else (values (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_5 (vector 0)) (bitsimd:get-prec num_5 (vector 0))) (/ (bitsimd:get-prec num_5 (vector 0))) )] [else (values (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_7 (vector 0)) (bitsimd:get-prec num_7 (vector 0))) (/ (bitsimd:get-prec num_7 (vector 0))) )] [else (values (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_8 (vector 0)) (bitsimd:get-prec num_8 (vector 0))) (/ (bitsimd:get-prec num_8 (vector 0))) )] [else (values (/ (bitsimd:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
[(pimMul_v1024_e16__v1024_e16__v1024_e16_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10) 
	(string-append "\n" 
	(string-append "(pimMul_v1024_e16__v1024_e16__v1024_e16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v1 (vector 0)) (bitsimd:get-prec v1 (vector 0))) (/ (bitsimd:get-prec v1 (vector 0))) )] [else (values (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length size_i_o (vector 0)) (bitsimd:get-prec size_i_o (vector 0))) (/ (bitsimd:get-prec size_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_3 (vector 0)) (bitsimd:get-prec num_3 (vector 0))) (/ (bitsimd:get-prec num_3 (vector 0))) )] [else (values (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_4 (vector 0)) (bitsimd:get-prec num_4 (vector 0))) (/ (bitsimd:get-prec num_4 (vector 0))) )] [else (values (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_5 (vector 0)) (bitsimd:get-prec num_5 (vector 0))) (/ (bitsimd:get-prec num_5 (vector 0))) )] [else (values (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_7 (vector 0)) (bitsimd:get-prec num_7 (vector 0))) (/ (bitsimd:get-prec num_7 (vector 0))) )] [else (values (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_8 (vector 0)) (bitsimd:get-prec num_8 (vector 0))) (/ (bitsimd:get-prec num_8 (vector 0))) )] [else (values (/ (bitsimd:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_9 (vector 0)) (bitsimd:get-prec num_9 (vector 0))) (/ (bitsimd:get-prec num_9 (vector 0))) )] [else (values (/ (bitsimd:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_10 (vector 0)) (bitsimd:get-prec num_10 (vector 0))) (/ (bitsimd:get-prec num_10 (vector 0))) )] [else (values (/ (bitsimd:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
[(pimDiv_v1024_e32__v1024_e32__v1024_e32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(pimDiv_v1024_e32__v1024_e32__v1024_e32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v1 (vector 0)) (bitsimd:get-prec v1 (vector 0))) (/ (bitsimd:get-prec v1 (vector 0))) )] [else (values (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length size_i_o (vector 0)) (bitsimd:get-prec size_i_o (vector 0))) (/ (bitsimd:get-prec size_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_3 (vector 0)) (bitsimd:get-prec num_3 (vector 0))) (/ (bitsimd:get-prec num_3 (vector 0))) )] [else (values (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_4 (vector 0)) (bitsimd:get-prec num_4 (vector 0))) (/ (bitsimd:get-prec num_4 (vector 0))) )] [else (values (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_5 (vector 0)) (bitsimd:get-prec num_5 (vector 0))) (/ (bitsimd:get-prec num_5 (vector 0))) )] [else (values (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_7 (vector 0)) (bitsimd:get-prec num_7 (vector 0))) (/ (bitsimd:get-prec num_7 (vector 0))) )] [else (values (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_8 (vector 0)) (bitsimd:get-prec num_8 (vector 0))) (/ (bitsimd:get-prec num_8 (vector 0))) )] [else (values (/ (bitsimd:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_9 (vector 0)) (bitsimd:get-prec num_9 (vector 0))) (/ (bitsimd:get-prec num_9 (vector 0))) )] [else (values (/ (bitsimd:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_10 (vector 0)) (bitsimd:get-prec num_10 (vector 0))) (/ (bitsimd:get-prec num_10 (vector 0))) )] [else (values (/ (bitsimd:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_11 (vector 0)) (bitsimd:get-prec num_11 (vector 0))) (/ (bitsimd:get-prec num_11 (vector 0))) )] [else (values (/ (bitsimd:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_12 (vector 0)) (bitsimd:get-prec num_12 (vector 0))) (/ (bitsimd:get-prec num_12 (vector 0))) )] [else (values (/ (bitsimd:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
[(pimGT_v1024_e8__v1024_e8__v1024_e8_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10) 
	(string-append "\n" 
	(string-append "(pimGT_v1024_e8__v1024_e8__v1024_e8_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length vc_0 (vector 0)) (bitsimd:get-prec vc_0 (vector 0))) (/ (bitsimd:get-prec vc_0 (vector 0))) )] [else (values (/ (bitsimd:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length vc_1 (vector 0)) (bitsimd:get-prec vc_1 (vector 0))) (/ (bitsimd:get-prec vc_1 (vector 0))) )] [else (values (/ (bitsimd:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v2 (vector 0)) (bitsimd:get-prec v2 (vector 0))) (/ (bitsimd:get-prec v2 (vector 0))) )] [else (values (/ (bitsimd:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v3 (vector 0)) (bitsimd:get-prec v3 (vector 0))) (/ (bitsimd:get-prec v3 (vector 0))) )] [else (values (/ (bitsimd:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length size_i_o (vector 0)) (bitsimd:get-prec size_i_o (vector 0))) (/ (bitsimd:get-prec size_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_5 (vector 0)) (bitsimd:get-prec num_5 (vector 0))) (/ (bitsimd:get-prec num_5 (vector 0))) )] [else (values (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_6 (vector 0)) (bitsimd:get-prec num_6 (vector 0))) (/ (bitsimd:get-prec num_6 (vector 0))) )] [else (values (/ (bitsimd:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_7 (vector 0)) (bitsimd:get-prec num_7 (vector 0))) (/ (bitsimd:get-prec num_7 (vector 0))) )] [else (values (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_9 (vector 0)) (bitsimd:get-prec num_9 (vector 0))) (/ (bitsimd:get-prec num_9 (vector 0))) )] [else (values (/ (bitsimd:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_10 (vector 0)) (bitsimd:get-prec num_10 (vector 0))) (/ (bitsimd:get-prec num_10 (vector 0))) )] [else (values (/ (bitsimd:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
[(pimAdd_v1024_e16__v1024_e16__v1024_e16_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8) 
	(string-append "\n" 
	(string-append "(pimAdd_v1024_e16__v1024_e16__v1024_e16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v1 (vector 0)) (bitsimd:get-prec v1 (vector 0))) (/ (bitsimd:get-prec v1 (vector 0))) )] [else (values (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length size_i_o (vector 0)) (bitsimd:get-prec size_i_o (vector 0))) (/ (bitsimd:get-prec size_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_3 (vector 0)) (bitsimd:get-prec num_3 (vector 0))) (/ (bitsimd:get-prec num_3 (vector 0))) )] [else (values (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_4 (vector 0)) (bitsimd:get-prec num_4 (vector 0))) (/ (bitsimd:get-prec num_4 (vector 0))) )] [else (values (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_5 (vector 0)) (bitsimd:get-prec num_5 (vector 0))) (/ (bitsimd:get-prec num_5 (vector 0))) )] [else (values (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_7 (vector 0)) (bitsimd:get-prec num_7 (vector 0))) (/ (bitsimd:get-prec num_7 (vector 0))) )] [else (values (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_8 (vector 0)) (bitsimd:get-prec num_8 (vector 0))) (/ (bitsimd:get-prec num_8 (vector 0))) )] [else (values (/ (bitsimd:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
[(pimBroadCast_v512_e8__v8_e8_dsl v0 size_o num_2 num_3 num_4 prec_i_o num_6 num_7) 
	(string-append "\n" 
	(string-append "(pimBroadCast_v512_e8__v8_e8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? size_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length size_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length size_o (vector 0)) (bitsimd:get-prec size_o (vector 0))) (/ (bitsimd:get-prec size_o (vector 0))) )] [else (values (/ (bitsimd:get-length size_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer size_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer size_o)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_2 (vector 0)) (bitsimd:get-prec num_2 (vector 0))) (/ (bitsimd:get-prec num_2 (vector 0))) )] [else (values (/ (bitsimd:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_2)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_3 (vector 0)) (bitsimd:get-prec num_3 (vector 0))) (/ (bitsimd:get-prec num_3 (vector 0))) )] [else (values (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_4 (vector 0)) (bitsimd:get-prec num_4 (vector 0))) (/ (bitsimd:get-prec num_4 (vector 0))) )] [else (values (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_4)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_6 (vector 0)) (bitsimd:get-prec num_6 (vector 0))) (/ (bitsimd:get-prec num_6 (vector 0))) )] [else (values (/ (bitsimd:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_7 (vector 0)) (bitsimd:get-prec num_7 (vector 0))) (/ (bitsimd:get-prec num_7 (vector 0))) )] [else (values (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_7)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
[(pimAnd_v16384_e8__v16384_e8__v16384_e8_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7) 
	(string-append "\n" 
	(string-append "(pimAnd_v16384_e8__v16384_e8__v16384_e8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v0 (vector 0)) (bitsimd:get-prec v0 (vector 0))) (/ (bitsimd:get-prec v0 (vector 0))) )] [else (values (/ (bitsimd:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length v1 (vector 0)) (bitsimd:get-prec v1 (vector 0))) (/ (bitsimd:get-prec v1 (vector 0))) )] [else (values (/ (bitsimd:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length size_i_o (vector 0)) (bitsimd:get-prec size_i_o (vector 0))) (/ (bitsimd:get-prec size_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_3 (vector 0)) (bitsimd:get-prec num_3 (vector 0))) (/ (bitsimd:get-prec num_3 (vector 0))) )] [else (values (/ (bitsimd:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_4 (vector 0)) (bitsimd:get-prec num_4 (vector 0))) (/ (bitsimd:get-prec num_4 (vector 0))) )] [else (values (/ (bitsimd:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_5 (vector 0)) (bitsimd:get-prec num_5 (vector 0))) (/ (bitsimd:get-prec num_5 (vector 0))) )] [else (values (/ (bitsimd:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length prec_i_o (vector 0)) (bitsimd:get-prec prec_i_o (vector 0))) (/ (bitsimd:get-prec prec_i_o (vector 0))) )] [else (values (/ (bitsimd:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (bitsimd:get-length num_7 (vector 0)) (bitsimd:get-prec num_7 (vector 0))) (/ (bitsimd:get-prec num_7 (vector 0))) )] [else (values (/ (bitsimd:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (bitsimd:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (bitsimd:hydride-printer num_7)) " " " " ")")
	(string-append ";" "<" (~s (/ (bitsimd:get-length prog (vector 0)) (bitsimd:get-prec prog (vector 0))) ) " x " "i" (~s (bitsimd:get-prec prog (vector 0))) ">") "\n")]
	[v (pretty-format v)]
 )
)
;; ================================================================================

