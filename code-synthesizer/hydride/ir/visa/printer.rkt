;#============================== Hydride File =================================
;#
;# Part of the Hydride Compiler Infrastructure.
;# <Placeholder for license information>
;#
;#=============================================================================
;#
;# Do NOT modify this file. It is automatically generated.
;#
;#=============================================================================

#lang rosette
(require rosette/lib/synthax)
(require rosette/lib/angelic)
(require racket/pretty)
(require rosette/lib/destruct)

(require hydride/utils/bvops)
(require hydride/utils/misc)

(require hydride/ir/hydride/definition)


(require hydride/ir/visa/definition)
(require hydride/ir/visa/length)
(require hydride/ir/visa/prec)


(provide (all-defined-out))
;; ================================================================================
;;                                DSL Custom Printer
;; ================================================================================
(define (visa:hydride-printer  prog)
 (destruct prog
	[(dim-x id) (string-append "\n"  "(dim-x " (~s id) ")")]
	[(dim-y id) (string-append "\n" "(dim-y " (~s id) ")")]
	[(idx-i id) (string-append "\n" "(idx-i " (~s id) ")")]
	[(idx-j id) (string-append "\n" "(idx-j " (~s id) ")")]
	[(reg id) (string-append  "\n" "(reg " (~s  (bitvector->natural id)) ")")]
	[(lit v) (string-append   "(lit " (~s v) ")")]
	[(nop v1) (string-append "\n" "(nop " (visa:hydride-printer v1) ")")]
	[(idx-add i1 i2) (string-append "\n" "(idx-add " (~s i1) (~s i2) ")" )]
	[(idx-mul i1 i2) (string-append "\n" "(idx-mul " (~s i1) (~s i2) ")" )]
	[(vector-two-input-swizzle_dsl v0 v1 num_2 prec_i_o num_4 num_5 num_6 num_7 num_8) 
	(string-append "\n" 
	(string-append "(vector-two-input-swizzle_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v1 (vector 0)) (visa:get-prec v1 (vector 0))) (/ (visa:get-prec v1 (vector 0))) )] [else (values (/ (visa:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v1)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_2 (vector 0)) (visa:get-prec num_2 (vector 0))) (/ (visa:get-prec num_2 (vector 0))) )] [else (values (/ (visa:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_2)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_4 (vector 0)) (visa:get-prec num_4 (vector 0))) (/ (visa:get-prec num_4 (vector 0))) )] [else (values (/ (visa:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_5 (vector 0)) (visa:get-prec num_5 (vector 0))) (/ (visa:get-prec num_5 (vector 0))) )] [else (values (/ (visa:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_6 (vector 0)) (visa:get-prec num_6 (vector 0))) (/ (visa:get-prec num_6 (vector 0))) )] [else (values (/ (visa:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_7 (vector 0)) (visa:get-prec num_7 (vector 0))) (/ (visa:get-prec num_7 (vector 0))) )] [else (values (/ (visa:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_8 (vector 0)) (visa:get-prec num_8 (vector 0))) (/ (visa:get-prec num_8 (vector 0))) )] [else (values (/ (visa:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
	[(interleave-vectors_dsl v0 v1 size_i_o prec_i_o) 
	(string-append "\n" 
	(string-append "(interleave-vectors_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v1 (vector 0)) (visa:get-prec v1 (vector 0))) (/ (visa:get-prec v1 (vector 0))) )] [else (values (/ (visa:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length size_i_o (vector 0)) (visa:get-prec size_i_o (vector 0))) (/ (visa:get-prec size_i_o (vector 0))) )] [else (values (/ (visa:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer size_i_o)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
	[(interleave-vector_dsl v0 size_i_o prec_i_o) 
	(string-append "\n" 
	(string-append "(interleave-vector_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length size_i_o (vector 0)) (visa:get-prec size_i_o (vector 0))) (/ (visa:get-prec size_i_o (vector 0))) )] [else (values (/ (visa:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer size_i_o)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
	[(deinterleave-vector_dsl v0 size_i_o prec_i_o) 
	(string-append "\n" 
	(string-append "(deinterleave-vector_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length size_i_o (vector 0)) (visa:get-prec size_i_o (vector 0))) (/ (visa:get-prec size_i_o (vector 0))) )] [else (values (/ (visa:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer size_i_o)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
	[(llvm-vect-add_dsl v0 v1 num_2 prec_i_o) 
	(string-append "\n" 
	(string-append "(llvm-vect-add_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v1 (vector 0)) (visa:get-prec v1 (vector 0))) (/ (visa:get-prec v1 (vector 0))) )] [else (values (/ (visa:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v1)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_2 (vector 0)) (visa:get-prec num_2 (vector 0))) (/ (visa:get-prec num_2 (vector 0))) )] [else (values (/ (visa:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_2)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
	[(llvm-vect-sub_dsl v0 v1 num_2 prec_i_o) 
	(string-append "\n" 
	(string-append "(llvm-vect-sub_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v1 (vector 0)) (visa:get-prec v1 (vector 0))) (/ (visa:get-prec v1 (vector 0))) )] [else (values (/ (visa:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v1)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_2 (vector 0)) (visa:get-prec num_2 (vector 0))) (/ (visa:get-prec num_2 (vector 0))) )] [else (values (/ (visa:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_2)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
	[(llvm-vect-mul_dsl v0 v1 num_2 prec_i_o) 
	(string-append "\n" 
	(string-append "(llvm-vect-mul_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v1 (vector 0)) (visa:get-prec v1 (vector 0))) (/ (visa:get-prec v1 (vector 0))) )] [else (values (/ (visa:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v1)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_2 (vector 0)) (visa:get-prec num_2 (vector 0))) (/ (visa:get-prec num_2 (vector 0))) )] [else (values (/ (visa:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_2)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
	[(llvm-vect-sdiv_dsl v0 v1 num_2 prec_i_o) 
	(string-append "\n" 
	(string-append "(llvm-vect-sdiv_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v1 (vector 0)) (visa:get-prec v1 (vector 0))) (/ (visa:get-prec v1 (vector 0))) )] [else (values (/ (visa:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v1)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_2 (vector 0)) (visa:get-prec num_2 (vector 0))) (/ (visa:get-prec num_2 (vector 0))) )] [else (values (/ (visa:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_2)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
	[(llvm-vect-udiv_dsl v0 v1 num_2 prec_i_o) 
	(string-append "\n" 
	(string-append "(llvm-vect-udiv_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v1 (vector 0)) (visa:get-prec v1 (vector 0))) (/ (visa:get-prec v1 (vector 0))) )] [else (values (/ (visa:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v1)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_2 (vector 0)) (visa:get-prec num_2 (vector 0))) (/ (visa:get-prec num_2 (vector 0))) )] [else (values (/ (visa:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_2)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
	[(llvm-zext_dsl v0 size_i size_o) 
	(string-append "\n" 
	(string-append "(llvm-zext_dsl " (if (lit? v0) (visa:hydride-printer v0) (visa:hydride-printer v0)) " " " " (if (lit? size_i) (visa:hydride-printer size_i) (visa:hydride-printer size_i)) " " " " (if (lit? size_o) (visa:hydride-printer size_o) (visa:hydride-printer size_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
	[(scalar_splat_dsl v0 size_i size_o) 
	(string-append "\n" 
	(string-append "(scalar_splat_dsl " (if (lit? v0) (visa:hydride-printer v0) (visa:hydride-printer v0)) " " " " (if (lit? size_i) (visa:hydride-printer size_i) (visa:hydride-printer size_i)) " " " " (if (lit? size_o) (visa:hydride-printer size_o) (visa:hydride-printer size_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
[(VMAD_sat_2_UB_UB_UB_UB_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14) 
	(string-append "\n" 
	(string-append "(VMAD_sat_2_UB_UB_UB_UB_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v1 (vector 0)) (visa:get-prec v1 (vector 0))) (/ (visa:get-prec v1 (vector 0))) )] [else (values (/ (visa:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v2 (vector 0)) (visa:get-prec v2 (vector 0))) (/ (visa:get-prec v2 (vector 0))) )] [else (values (/ (visa:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length size_i_o (vector 0)) (visa:get-prec size_i_o (vector 0))) (/ (visa:get-prec size_i_o (vector 0))) )] [else (values (/ (visa:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_4 (vector 0)) (visa:get-prec num_4 (vector 0))) (/ (visa:get-prec num_4 (vector 0))) )] [else (values (/ (visa:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_5 (vector 0)) (visa:get-prec num_5 (vector 0))) (/ (visa:get-prec num_5 (vector 0))) )] [else (values (/ (visa:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_6 (vector 0)) (visa:get-prec num_6 (vector 0))) (/ (visa:get-prec num_6 (vector 0))) )] [else (values (/ (visa:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_8 (vector 0)) (visa:get-prec num_8 (vector 0))) (/ (visa:get-prec num_8 (vector 0))) )] [else (values (/ (visa:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_9 (vector 0)) (visa:get-prec num_9 (vector 0))) (/ (visa:get-prec num_9 (vector 0))) )] [else (values (/ (visa:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_10 (vector 0)) (visa:get-prec num_10 (vector 0))) (/ (visa:get-prec num_10 (vector 0))) )] [else (values (/ (visa:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_11 (vector 0)) (visa:get-prec num_11 (vector 0))) (/ (visa:get-prec num_11 (vector 0))) )] [else (values (/ (visa:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_12 (vector 0)) (visa:get-prec num_12 (vector 0))) (/ (visa:get-prec num_12 (vector 0))) )] [else (values (/ (visa:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_13 (vector 0)) (visa:get-prec num_13 (vector 0))) (/ (visa:get-prec num_13 (vector 0))) )] [else (values (/ (visa:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_14 (vector 0)) (visa:get-prec num_14 (vector 0))) (/ (visa:get-prec num_14 (vector 0))) )] [else (values (/ (visa:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_14)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
[(VBFI_4_UD_UD_UD_UD_UD_dsl vc_0 vc_1 vc_2 vc_3 v4 v5 v6 v7 size_i_o num_9 num_10 num_11 prec_i_o num_13) 
	(string-append "\n" 
	(string-append "(VBFI_4_UD_UD_UD_UD_UD_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length vc_0 (vector 0)) (visa:get-prec vc_0 (vector 0))) (/ (visa:get-prec vc_0 (vector 0))) )] [else (values (/ (visa:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length vc_1 (vector 0)) (visa:get-prec vc_1 (vector 0))) (/ (visa:get-prec vc_1 (vector 0))) )] [else (values (/ (visa:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length vc_2 (vector 0)) (visa:get-prec vc_2 (vector 0))) (/ (visa:get-prec vc_2 (vector 0))) )] [else (values (/ (visa:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer vc_2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length vc_3 (vector 0)) (visa:get-prec vc_3 (vector 0))) (/ (visa:get-prec vc_3 (vector 0))) )] [else (values (/ (visa:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer vc_3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v4 (vector 0)) (visa:get-prec v4 (vector 0))) (/ (visa:get-prec v4 (vector 0))) )] [else (values (/ (visa:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v4)) " " " " (if (lit? v5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v5 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v5 (vector 0)) (visa:get-prec v5 (vector 0))) (/ (visa:get-prec v5 (vector 0))) )] [else (values (/ (visa:get-length v5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v5)) " " " " (if (lit? v6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v6 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v6 (vector 0)) (visa:get-prec v6 (vector 0))) (/ (visa:get-prec v6 (vector 0))) )] [else (values (/ (visa:get-length v6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v6)) " " " " (if (lit? v7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v7 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v7 (vector 0)) (visa:get-prec v7 (vector 0))) (/ (visa:get-prec v7 (vector 0))) )] [else (values (/ (visa:get-length v7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v7)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length size_i_o (vector 0)) (visa:get-prec size_i_o (vector 0))) (/ (visa:get-prec size_i_o (vector 0))) )] [else (values (/ (visa:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer size_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_9 (vector 0)) (visa:get-prec num_9 (vector 0))) (/ (visa:get-prec num_9 (vector 0))) )] [else (values (/ (visa:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_10 (vector 0)) (visa:get-prec num_10 (vector 0))) (/ (visa:get-prec num_10 (vector 0))) )] [else (values (/ (visa:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_11 (vector 0)) (visa:get-prec num_11 (vector 0))) (/ (visa:get-prec num_11 (vector 0))) )] [else (values (/ (visa:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_11)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_13 (vector 0)) (visa:get-prec num_13 (vector 0))) (/ (visa:get-prec num_13 (vector 0))) )] [else (values (/ (visa:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
[(VBFE_32_D_D_D_D_dsl vc_0 vc_1 vc_2 vc_3 vc_4 v5 v6 v7 size_i_o num_9 num_10 num_11 prec_i_o num_13 num_14) 
	(string-append "\n" 
	(string-append "(VBFE_32_D_D_D_D_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length vc_0 (vector 0)) (visa:get-prec vc_0 (vector 0))) (/ (visa:get-prec vc_0 (vector 0))) )] [else (values (/ (visa:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length vc_1 (vector 0)) (visa:get-prec vc_1 (vector 0))) (/ (visa:get-prec vc_1 (vector 0))) )] [else (values (/ (visa:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length vc_2 (vector 0)) (visa:get-prec vc_2 (vector 0))) (/ (visa:get-prec vc_2 (vector 0))) )] [else (values (/ (visa:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer vc_2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length vc_3 (vector 0)) (visa:get-prec vc_3 (vector 0))) (/ (visa:get-prec vc_3 (vector 0))) )] [else (values (/ (visa:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer vc_3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length vc_4 (vector 0)) (visa:get-prec vc_4 (vector 0))) (/ (visa:get-prec vc_4 (vector 0))) )] [else (values (/ (visa:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer vc_4)) " " " " (if (lit? v5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v5 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v5 (vector 0)) (visa:get-prec v5 (vector 0))) (/ (visa:get-prec v5 (vector 0))) )] [else (values (/ (visa:get-length v5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v5)) " " " " (if (lit? v6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v6 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v6 (vector 0)) (visa:get-prec v6 (vector 0))) (/ (visa:get-prec v6 (vector 0))) )] [else (values (/ (visa:get-length v6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v6)) " " " " (if (lit? v7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v7 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v7 (vector 0)) (visa:get-prec v7 (vector 0))) (/ (visa:get-prec v7 (vector 0))) )] [else (values (/ (visa:get-length v7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v7)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length size_i_o (vector 0)) (visa:get-prec size_i_o (vector 0))) (/ (visa:get-prec size_i_o (vector 0))) )] [else (values (/ (visa:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer size_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_9 (vector 0)) (visa:get-prec num_9 (vector 0))) (/ (visa:get-prec num_9 (vector 0))) )] [else (values (/ (visa:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_10 (vector 0)) (visa:get-prec num_10 (vector 0))) (/ (visa:get-prec num_10 (vector 0))) )] [else (values (/ (visa:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_11 (vector 0)) (visa:get-prec num_11 (vector 0))) (/ (visa:get-prec num_11 (vector 0))) )] [else (values (/ (visa:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_11)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_13 (vector 0)) (visa:get-prec num_13 (vector 0))) (/ (visa:get-prec num_13 (vector 0))) )] [else (values (/ (visa:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_14 (vector 0)) (visa:get-prec num_14 (vector 0))) (/ (visa:get-prec num_14 (vector 0))) )] [else (values (/ (visa:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_14)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
[(VAVG_sat_8_UB_UB_UB_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12 num_13 num_14 num_15) 
	(string-append "\n" 
	(string-append "(VAVG_sat_8_UB_UB_UB_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length vc_0 (vector 0)) (visa:get-prec vc_0 (vector 0))) (/ (visa:get-prec vc_0 (vector 0))) )] [else (values (/ (visa:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length vc_1 (vector 0)) (visa:get-prec vc_1 (vector 0))) (/ (visa:get-prec vc_1 (vector 0))) )] [else (values (/ (visa:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v2 (vector 0)) (visa:get-prec v2 (vector 0))) (/ (visa:get-prec v2 (vector 0))) )] [else (values (/ (visa:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v3 (vector 0)) (visa:get-prec v3 (vector 0))) (/ (visa:get-prec v3 (vector 0))) )] [else (values (/ (visa:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length size_i_o (vector 0)) (visa:get-prec size_i_o (vector 0))) (/ (visa:get-prec size_i_o (vector 0))) )] [else (values (/ (visa:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_5 (vector 0)) (visa:get-prec num_5 (vector 0))) (/ (visa:get-prec num_5 (vector 0))) )] [else (values (/ (visa:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_6 (vector 0)) (visa:get-prec num_6 (vector 0))) (/ (visa:get-prec num_6 (vector 0))) )] [else (values (/ (visa:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_7 (vector 0)) (visa:get-prec num_7 (vector 0))) (/ (visa:get-prec num_7 (vector 0))) )] [else (values (/ (visa:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_9 (vector 0)) (visa:get-prec num_9 (vector 0))) (/ (visa:get-prec num_9 (vector 0))) )] [else (values (/ (visa:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_10 (vector 0)) (visa:get-prec num_10 (vector 0))) (/ (visa:get-prec num_10 (vector 0))) )] [else (values (/ (visa:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_11 (vector 0)) (visa:get-prec num_11 (vector 0))) (/ (visa:get-prec num_11 (vector 0))) )] [else (values (/ (visa:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_12 (vector 0)) (visa:get-prec num_12 (vector 0))) (/ (visa:get-prec num_12 (vector 0))) )] [else (values (/ (visa:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_13 (vector 0)) (visa:get-prec num_13 (vector 0))) (/ (visa:get-prec num_13 (vector 0))) )] [else (values (/ (visa:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_14 (vector 0)) (visa:get-prec num_14 (vector 0))) (/ (visa:get-prec num_14 (vector 0))) )] [else (values (/ (visa:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_15 (vector 0)) (visa:get-prec num_15 (vector 0))) (/ (visa:get-prec num_15 (vector 0))) )] [else (values (/ (visa:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_15)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
[(VMAD_4_B_B_B_B_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14) 
	(string-append "\n" 
	(string-append "(VMAD_4_B_B_B_B_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v1 (vector 0)) (visa:get-prec v1 (vector 0))) (/ (visa:get-prec v1 (vector 0))) )] [else (values (/ (visa:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v2 (vector 0)) (visa:get-prec v2 (vector 0))) (/ (visa:get-prec v2 (vector 0))) )] [else (values (/ (visa:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length size_i_o (vector 0)) (visa:get-prec size_i_o (vector 0))) (/ (visa:get-prec size_i_o (vector 0))) )] [else (values (/ (visa:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_4 (vector 0)) (visa:get-prec num_4 (vector 0))) (/ (visa:get-prec num_4 (vector 0))) )] [else (values (/ (visa:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_5 (vector 0)) (visa:get-prec num_5 (vector 0))) (/ (visa:get-prec num_5 (vector 0))) )] [else (values (/ (visa:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_6 (vector 0)) (visa:get-prec num_6 (vector 0))) (/ (visa:get-prec num_6 (vector 0))) )] [else (values (/ (visa:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_8 (vector 0)) (visa:get-prec num_8 (vector 0))) (/ (visa:get-prec num_8 (vector 0))) )] [else (values (/ (visa:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_9 (vector 0)) (visa:get-prec num_9 (vector 0))) (/ (visa:get-prec num_9 (vector 0))) )] [else (values (/ (visa:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_10 (vector 0)) (visa:get-prec num_10 (vector 0))) (/ (visa:get-prec num_10 (vector 0))) )] [else (values (/ (visa:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_11 (vector 0)) (visa:get-prec num_11 (vector 0))) (/ (visa:get-prec num_11 (vector 0))) )] [else (values (/ (visa:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_12 (vector 0)) (visa:get-prec num_12 (vector 0))) (/ (visa:get-prec num_12 (vector 0))) )] [else (values (/ (visa:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_13 (vector 0)) (visa:get-prec num_13 (vector 0))) (/ (visa:get-prec num_13 (vector 0))) )] [else (values (/ (visa:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_14 (vector 0)) (visa:get-prec num_14 (vector 0))) (/ (visa:get-prec num_14 (vector 0))) )] [else (values (/ (visa:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_14)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
[(VMULH_1_D_D_D_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10) 
	(string-append "\n" 
	(string-append "(VMULH_1_D_D_D_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v1 (vector 0)) (visa:get-prec v1 (vector 0))) (/ (visa:get-prec v1 (vector 0))) )] [else (values (/ (visa:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length size_i_o (vector 0)) (visa:get-prec size_i_o (vector 0))) (/ (visa:get-prec size_i_o (vector 0))) )] [else (values (/ (visa:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_3 (vector 0)) (visa:get-prec num_3 (vector 0))) (/ (visa:get-prec num_3 (vector 0))) )] [else (values (/ (visa:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_4 (vector 0)) (visa:get-prec num_4 (vector 0))) (/ (visa:get-prec num_4 (vector 0))) )] [else (values (/ (visa:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_5 (vector 0)) (visa:get-prec num_5 (vector 0))) (/ (visa:get-prec num_5 (vector 0))) )] [else (values (/ (visa:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_7 (vector 0)) (visa:get-prec num_7 (vector 0))) (/ (visa:get-prec num_7 (vector 0))) )] [else (values (/ (visa:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_8 (vector 0)) (visa:get-prec num_8 (vector 0))) (/ (visa:get-prec num_8 (vector 0))) )] [else (values (/ (visa:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_9 (vector 0)) (visa:get-prec num_9 (vector 0))) (/ (visa:get-prec num_9 (vector 0))) )] [else (values (/ (visa:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_10 (vector 0)) (visa:get-prec num_10 (vector 0))) (/ (visa:get-prec num_10 (vector 0))) )] [else (values (/ (visa:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
[(VMUL_sat_8_UW_UW_UW_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o) 
	(string-append "\n" 
	(string-append "(VMUL_sat_8_UW_UW_UW_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v1 (vector 0)) (visa:get-prec v1 (vector 0))) (/ (visa:get-prec v1 (vector 0))) )] [else (values (/ (visa:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length size_i_o (vector 0)) (visa:get-prec size_i_o (vector 0))) (/ (visa:get-prec size_i_o (vector 0))) )] [else (values (/ (visa:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_3 (vector 0)) (visa:get-prec num_3 (vector 0))) (/ (visa:get-prec num_3 (vector 0))) )] [else (values (/ (visa:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_4 (vector 0)) (visa:get-prec num_4 (vector 0))) (/ (visa:get-prec num_4 (vector 0))) )] [else (values (/ (visa:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_5 (vector 0)) (visa:get-prec num_5 (vector 0))) (/ (visa:get-prec num_5 (vector 0))) )] [else (values (/ (visa:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
[(VADD_4_W_W_W_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7) 
	(string-append "\n" 
	(string-append "(VADD_4_W_W_W_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v1 (vector 0)) (visa:get-prec v1 (vector 0))) (/ (visa:get-prec v1 (vector 0))) )] [else (values (/ (visa:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length size_i_o (vector 0)) (visa:get-prec size_i_o (vector 0))) (/ (visa:get-prec size_i_o (vector 0))) )] [else (values (/ (visa:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_3 (vector 0)) (visa:get-prec num_3 (vector 0))) (/ (visa:get-prec num_3 (vector 0))) )] [else (values (/ (visa:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_4 (vector 0)) (visa:get-prec num_4 (vector 0))) (/ (visa:get-prec num_4 (vector 0))) )] [else (values (/ (visa:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_5 (vector 0)) (visa:get-prec num_5 (vector 0))) (/ (visa:get-prec num_5 (vector 0))) )] [else (values (/ (visa:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_7 (vector 0)) (visa:get-prec num_7 (vector 0))) (/ (visa:get-prec num_7 (vector 0))) )] [else (values (/ (visa:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_7)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
[(VMOV_1_Q_Q_dsl v0 size_i_o num_2 num_3 num_4 prec_i_o) 
	(string-append "\n" 
	(string-append "(VMOV_1_Q_Q_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length size_i_o (vector 0)) (visa:get-prec size_i_o (vector 0))) (/ (visa:get-prec size_i_o (vector 0))) )] [else (values (/ (visa:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer size_i_o)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_2 (vector 0)) (visa:get-prec num_2 (vector 0))) (/ (visa:get-prec num_2 (vector 0))) )] [else (values (/ (visa:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_2)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_3 (vector 0)) (visa:get-prec num_3 (vector 0))) (/ (visa:get-prec num_3 (vector 0))) )] [else (values (/ (visa:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_4 (vector 0)) (visa:get-prec num_4 (vector 0))) (/ (visa:get-prec num_4 (vector 0))) )] [else (values (/ (visa:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_4)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
[(VDP4A_sat_32_D_D_D_D_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i prec_o num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18 num_19 num_20 num_21 num_22 num_23 num_24 num_25 num_26 num_27 num_28 num_29 num_30 num_31) 
	(string-append "\n" 
	(string-append "(VDP4A_sat_32_D_D_D_D_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length v1 (vector 0)) (visa:get-prec v1 (vector 0))) (/ (visa:get-prec v1 (vector 0))) )] [else (values (/ (visa:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length v2 (vector 0)) (visa:get-prec v2 (vector 0))) (/ (visa:get-prec v2 (vector 0))) )] [else (values (/ (visa:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (visa:get-length size_i_o (vector 0)) (visa:get-prec size_i_o (vector 0))) (/ (visa:get-prec size_i_o (vector 0))) )] [else (values (/ (visa:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_4 (vector 0)) (visa:get-prec num_4 (vector 0))) (/ (visa:get-prec num_4 (vector 0))) )] [else (values (/ (visa:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_5 (vector 0)) (visa:get-prec num_5 (vector 0))) (/ (visa:get-prec num_5 (vector 0))) )] [else (values (/ (visa:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_6 (vector 0)) (visa:get-prec num_6 (vector 0))) (/ (visa:get-prec num_6 (vector 0))) )] [else (values (/ (visa:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_6)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (visa:get-length prec_i (vector 0)) (visa:get-prec prec_i (vector 0))) (/ (visa:get-prec prec_i (vector 0))) )] [else (values (/ (visa:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (visa:get-length prec_o (vector 0)) (visa:get-prec prec_o (vector 0))) (/ (visa:get-prec prec_o (vector 0))) )] [else (values (/ (visa:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_9 (vector 0)) (visa:get-prec num_9 (vector 0))) (/ (visa:get-prec num_9 (vector 0))) )] [else (values (/ (visa:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_10 (vector 0)) (visa:get-prec num_10 (vector 0))) (/ (visa:get-prec num_10 (vector 0))) )] [else (values (/ (visa:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_11 (vector 0)) (visa:get-prec num_11 (vector 0))) (/ (visa:get-prec num_11 (vector 0))) )] [else (values (/ (visa:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_12 (vector 0)) (visa:get-prec num_12 (vector 0))) (/ (visa:get-prec num_12 (vector 0))) )] [else (values (/ (visa:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_13 (vector 0)) (visa:get-prec num_13 (vector 0))) (/ (visa:get-prec num_13 (vector 0))) )] [else (values (/ (visa:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_14 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_14 (vector 0)) (visa:get-prec num_14 (vector 0))) (/ (visa:get-prec num_14 (vector 0))) )] [else (values (/ (visa:get-length num_14 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_15 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_15 (vector 0)) (visa:get-prec num_15 (vector 0))) (/ (visa:get-prec num_15 (vector 0))) )] [else (values (/ (visa:get-length num_15 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_16 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_16 (vector 0)) (visa:get-prec num_16 (vector 0))) (/ (visa:get-prec num_16 (vector 0))) )] [else (values (/ (visa:get-length num_16 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_17 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_17 (vector 0)) (visa:get-prec num_17 (vector 0))) (/ (visa:get-prec num_17 (vector 0))) )] [else (values (/ (visa:get-length num_17 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_18 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_18 (vector 0)) (visa:get-prec num_18 (vector 0))) (/ (visa:get-prec num_18 (vector 0))) )] [else (values (/ (visa:get-length num_18 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_19 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_19 (vector 0)) (visa:get-prec num_19 (vector 0))) (/ (visa:get-prec num_19 (vector 0))) )] [else (values (/ (visa:get-length num_19 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_20 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_20 (vector 0)) (visa:get-prec num_20 (vector 0))) (/ (visa:get-prec num_20 (vector 0))) )] [else (values (/ (visa:get-length num_20 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_21 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_21 (vector 0)) (visa:get-prec num_21 (vector 0))) (/ (visa:get-prec num_21 (vector 0))) )] [else (values (/ (visa:get-length num_21 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_21)) " " " " (if (lit? num_22) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_22 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_22 (vector 0)) (visa:get-prec num_22 (vector 0))) (/ (visa:get-prec num_22 (vector 0))) )] [else (values (/ (visa:get-length num_22 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_22) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_22)) " " " " (if (lit? num_23) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_23 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_23 (vector 0)) (visa:get-prec num_23 (vector 0))) (/ (visa:get-prec num_23 (vector 0))) )] [else (values (/ (visa:get-length num_23 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_23) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_23)) " " " " (if (lit? num_24) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_24 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_24 (vector 0)) (visa:get-prec num_24 (vector 0))) (/ (visa:get-prec num_24 (vector 0))) )] [else (values (/ (visa:get-length num_24 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_24) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_24)) " " " " (if (lit? num_25) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_25 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_25 (vector 0)) (visa:get-prec num_25 (vector 0))) (/ (visa:get-prec num_25 (vector 0))) )] [else (values (/ (visa:get-length num_25 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_25) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_25)) " " " " (if (lit? num_26) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_26 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_26 (vector 0)) (visa:get-prec num_26 (vector 0))) (/ (visa:get-prec num_26 (vector 0))) )] [else (values (/ (visa:get-length num_26 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_26) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_26)) " " " " (if (lit? num_27) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_27 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_27 (vector 0)) (visa:get-prec num_27 (vector 0))) (/ (visa:get-prec num_27 (vector 0))) )] [else (values (/ (visa:get-length num_27 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_27) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_27)) " " " " (if (lit? num_28) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_28 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_28 (vector 0)) (visa:get-prec num_28 (vector 0))) (/ (visa:get-prec num_28 (vector 0))) )] [else (values (/ (visa:get-length num_28 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_28) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_28)) " " " " (if (lit? num_29) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_29 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_29 (vector 0)) (visa:get-prec num_29 (vector 0))) (/ (visa:get-prec num_29 (vector 0))) )] [else (values (/ (visa:get-length num_29 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_29) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_29)) " " " " (if (lit? num_30) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_30 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_30 (vector 0)) (visa:get-prec num_30 (vector 0))) (/ (visa:get-prec num_30 (vector 0))) )] [else (values (/ (visa:get-length num_30 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_30) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_30)) " " " " (if (lit? num_31) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_31 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_31 (vector 0)) (visa:get-prec num_31 (vector 0))) (/ (visa:get-prec num_31 (vector 0))) )] [else (values (/ (visa:get-length num_31 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_31) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_31)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
[(VNOT_32_W_W_dsl v0 size_i_o num_2 num_3 num_4 prec_i_o) 
	(string-append "\n" 
	(string-append "(VNOT_32_W_W_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length size_i_o (vector 0)) (visa:get-prec size_i_o (vector 0))) (/ (visa:get-prec size_i_o (vector 0))) )] [else (values (/ (visa:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer size_i_o)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_2 (vector 0)) (visa:get-prec num_2 (vector 0))) (/ (visa:get-prec num_2 (vector 0))) )] [else (values (/ (visa:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_2)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_3 (vector 0)) (visa:get-prec num_3 (vector 0))) (/ (visa:get-prec num_3 (vector 0))) )] [else (values (/ (visa:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_4 (vector 0)) (visa:get-prec num_4 (vector 0))) (/ (visa:get-prec num_4 (vector 0))) )] [else (values (/ (visa:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_4)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
[(VXOR_32_UD_UD_UD_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o) 
	(string-append "\n" 
	(string-append "(VXOR_32_UD_UD_UD_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v1 (vector 0)) (visa:get-prec v1 (vector 0))) (/ (visa:get-prec v1 (vector 0))) )] [else (values (/ (visa:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length size_i_o (vector 0)) (visa:get-prec size_i_o (vector 0))) (/ (visa:get-prec size_i_o (vector 0))) )] [else (values (/ (visa:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_3 (vector 0)) (visa:get-prec num_3 (vector 0))) (/ (visa:get-prec num_3 (vector 0))) )] [else (values (/ (visa:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_4 (vector 0)) (visa:get-prec num_4 (vector 0))) (/ (visa:get-prec num_4 (vector 0))) )] [else (values (/ (visa:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_5 (vector 0)) (visa:get-prec num_5 (vector 0))) (/ (visa:get-prec num_5 (vector 0))) )] [else (values (/ (visa:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
[(VDP4A_1_UD_UD_UD_UD_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i prec_o num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18 num_19 num_20 num_21 num_22 num_23 num_24 num_25 num_26 num_27 num_28 num_29 num_30 num_31) 
	(string-append "\n" 
	(string-append "(VDP4A_1_UD_UD_UD_UD_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length v1 (vector 0)) (visa:get-prec v1 (vector 0))) (/ (visa:get-prec v1 (vector 0))) )] [else (values (/ (visa:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length v2 (vector 0)) (visa:get-prec v2 (vector 0))) (/ (visa:get-prec v2 (vector 0))) )] [else (values (/ (visa:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (visa:get-length size_i_o (vector 0)) (visa:get-prec size_i_o (vector 0))) (/ (visa:get-prec size_i_o (vector 0))) )] [else (values (/ (visa:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_4 (vector 0)) (visa:get-prec num_4 (vector 0))) (/ (visa:get-prec num_4 (vector 0))) )] [else (values (/ (visa:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_5 (vector 0)) (visa:get-prec num_5 (vector 0))) (/ (visa:get-prec num_5 (vector 0))) )] [else (values (/ (visa:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_6 (vector 0)) (visa:get-prec num_6 (vector 0))) (/ (visa:get-prec num_6 (vector 0))) )] [else (values (/ (visa:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_6)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (visa:get-length prec_i (vector 0)) (visa:get-prec prec_i (vector 0))) (/ (visa:get-prec prec_i (vector 0))) )] [else (values (/ (visa:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (visa:get-length prec_o (vector 0)) (visa:get-prec prec_o (vector 0))) (/ (visa:get-prec prec_o (vector 0))) )] [else (values (/ (visa:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_9 (vector 0)) (visa:get-prec num_9 (vector 0))) (/ (visa:get-prec num_9 (vector 0))) )] [else (values (/ (visa:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_10 (vector 0)) (visa:get-prec num_10 (vector 0))) (/ (visa:get-prec num_10 (vector 0))) )] [else (values (/ (visa:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_11 (vector 0)) (visa:get-prec num_11 (vector 0))) (/ (visa:get-prec num_11 (vector 0))) )] [else (values (/ (visa:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_12 (vector 0)) (visa:get-prec num_12 (vector 0))) (/ (visa:get-prec num_12 (vector 0))) )] [else (values (/ (visa:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_13 (vector 0)) (visa:get-prec num_13 (vector 0))) (/ (visa:get-prec num_13 (vector 0))) )] [else (values (/ (visa:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_14 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_14 (vector 0)) (visa:get-prec num_14 (vector 0))) (/ (visa:get-prec num_14 (vector 0))) )] [else (values (/ (visa:get-length num_14 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_15 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_15 (vector 0)) (visa:get-prec num_15 (vector 0))) (/ (visa:get-prec num_15 (vector 0))) )] [else (values (/ (visa:get-length num_15 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_16 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_16 (vector 0)) (visa:get-prec num_16 (vector 0))) (/ (visa:get-prec num_16 (vector 0))) )] [else (values (/ (visa:get-length num_16 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_17 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_17 (vector 0)) (visa:get-prec num_17 (vector 0))) (/ (visa:get-prec num_17 (vector 0))) )] [else (values (/ (visa:get-length num_17 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_18 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_18 (vector 0)) (visa:get-prec num_18 (vector 0))) (/ (visa:get-prec num_18 (vector 0))) )] [else (values (/ (visa:get-length num_18 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_19 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_19 (vector 0)) (visa:get-prec num_19 (vector 0))) (/ (visa:get-prec num_19 (vector 0))) )] [else (values (/ (visa:get-length num_19 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_20 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_20 (vector 0)) (visa:get-prec num_20 (vector 0))) (/ (visa:get-prec num_20 (vector 0))) )] [else (values (/ (visa:get-length num_20 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_21 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_21 (vector 0)) (visa:get-prec num_21 (vector 0))) (/ (visa:get-prec num_21 (vector 0))) )] [else (values (/ (visa:get-length num_21 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_21)) " " " " (if (lit? num_22) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_22 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_22 (vector 0)) (visa:get-prec num_22 (vector 0))) (/ (visa:get-prec num_22 (vector 0))) )] [else (values (/ (visa:get-length num_22 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_22) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_22)) " " " " (if (lit? num_23) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_23 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_23 (vector 0)) (visa:get-prec num_23 (vector 0))) (/ (visa:get-prec num_23 (vector 0))) )] [else (values (/ (visa:get-length num_23 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_23) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_23)) " " " " (if (lit? num_24) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_24 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_24 (vector 0)) (visa:get-prec num_24 (vector 0))) (/ (visa:get-prec num_24 (vector 0))) )] [else (values (/ (visa:get-length num_24 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_24) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_24)) " " " " (if (lit? num_25) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_25 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_25 (vector 0)) (visa:get-prec num_25 (vector 0))) (/ (visa:get-prec num_25 (vector 0))) )] [else (values (/ (visa:get-length num_25 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_25) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_25)) " " " " (if (lit? num_26) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_26 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_26 (vector 0)) (visa:get-prec num_26 (vector 0))) (/ (visa:get-prec num_26 (vector 0))) )] [else (values (/ (visa:get-length num_26 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_26) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_26)) " " " " (if (lit? num_27) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_27 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_27 (vector 0)) (visa:get-prec num_27 (vector 0))) (/ (visa:get-prec num_27 (vector 0))) )] [else (values (/ (visa:get-length num_27 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_27) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_27)) " " " " (if (lit? num_28) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_28 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_28 (vector 0)) (visa:get-prec num_28 (vector 0))) (/ (visa:get-prec num_28 (vector 0))) )] [else (values (/ (visa:get-length num_28 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_28) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_28)) " " " " (if (lit? num_29) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_29 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_29 (vector 0)) (visa:get-prec num_29 (vector 0))) (/ (visa:get-prec num_29 (vector 0))) )] [else (values (/ (visa:get-length num_29 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_29) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_29)) " " " " (if (lit? num_30) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_30 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_30 (vector 0)) (visa:get-prec num_30 (vector 0))) (/ (visa:get-prec num_30 (vector 0))) )] [else (values (/ (visa:get-length num_30 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_30) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_30)) " " " " (if (lit? num_31) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_31 (vector 0)) prec_i) 1)  (values  (/ (visa:get-length num_31 (vector 0)) (visa:get-prec num_31 (vector 0))) (/ (visa:get-prec num_31 (vector 0))) )] [else (values (/ (visa:get-length num_31 (vector 0)) prec_i) prec_i)]))(string-append (visa:hydride-printer num_31) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_31)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
[(VMUL_1_UB_UB_UB_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o) 
	(string-append "\n" 
	(string-append "(VMUL_1_UB_UB_UB_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v1 (vector 0)) (visa:get-prec v1 (vector 0))) (/ (visa:get-prec v1 (vector 0))) )] [else (values (/ (visa:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length size_i_o (vector 0)) (visa:get-prec size_i_o (vector 0))) (/ (visa:get-prec size_i_o (vector 0))) )] [else (values (/ (visa:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_3 (vector 0)) (visa:get-prec num_3 (vector 0))) (/ (visa:get-prec num_3 (vector 0))) )] [else (values (/ (visa:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_4 (vector 0)) (visa:get-prec num_4 (vector 0))) (/ (visa:get-prec num_4 (vector 0))) )] [else (values (/ (visa:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_5 (vector 0)) (visa:get-prec num_5 (vector 0))) (/ (visa:get-prec num_5 (vector 0))) )] [else (values (/ (visa:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
[(VAND_1_UD_UD_UD_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o) 
	(string-append "\n" 
	(string-append "(VAND_1_UD_UD_UD_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v1 (vector 0)) (visa:get-prec v1 (vector 0))) (/ (visa:get-prec v1 (vector 0))) )] [else (values (/ (visa:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length size_i_o (vector 0)) (visa:get-prec size_i_o (vector 0))) (/ (visa:get-prec size_i_o (vector 0))) )] [else (values (/ (visa:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_3 (vector 0)) (visa:get-prec num_3 (vector 0))) (/ (visa:get-prec num_3 (vector 0))) )] [else (values (/ (visa:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_4 (vector 0)) (visa:get-prec num_4 (vector 0))) (/ (visa:get-prec num_4 (vector 0))) )] [else (values (/ (visa:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_5 (vector 0)) (visa:get-prec num_5 (vector 0))) (/ (visa:get-prec num_5 (vector 0))) )] [else (values (/ (visa:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
[(VOR_8_D_D_D_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o) 
	(string-append "\n" 
	(string-append "(VOR_8_D_D_D_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v0 (vector 0)) (visa:get-prec v0 (vector 0))) (/ (visa:get-prec v0 (vector 0))) )] [else (values (/ (visa:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length v1 (vector 0)) (visa:get-prec v1 (vector 0))) (/ (visa:get-prec v1 (vector 0))) )] [else (values (/ (visa:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length size_i_o (vector 0)) (visa:get-prec size_i_o (vector 0))) (/ (visa:get-prec size_i_o (vector 0))) )] [else (values (/ (visa:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_3 (vector 0)) (visa:get-prec num_3 (vector 0))) (/ (visa:get-prec num_3 (vector 0))) )] [else (values (/ (visa:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_4 (vector 0)) (visa:get-prec num_4 (vector 0))) (/ (visa:get-prec num_4 (vector 0))) )] [else (values (/ (visa:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length num_5 (vector 0)) (visa:get-prec num_5 (vector 0))) (/ (visa:get-prec num_5 (vector 0))) )] [else (values (/ (visa:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (visa:get-length prec_i_o (vector 0)) (visa:get-prec prec_i_o (vector 0))) (/ (visa:get-prec prec_i_o (vector 0))) )] [else (values (/ (visa:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (visa:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (visa:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (visa:get-length prog (vector 0)) (visa:get-prec prog (vector 0))) ) " x " "i" (~s (visa:get-prec prog (vector 0))) ">") "\n")]
	[v (~s v)]
 )
)
;; ================================================================================

