;#============================== Hydride File =================================
;#
;# Part of the Hydride Compiler Infrastructure.
;# <Placeholder for license information>
;#
;#=============================================================================
;#
;# Do NOT modify this file. It is automatically generated.
;#
;#=============================================================================

#lang rosette
(require rosette/lib/synthax)
(require rosette/lib/angelic)
(require racket/pretty)
(require rosette/lib/destruct)

(require hydride/utils/bvops)
(require hydride/utils/misc)


(require hydride/ir/hydride/definition)
(require hydride/ir/visa/definition)
(require hydride/ir/visa/printer)

(provide (all-defined-out))
;; ================================================================================
;;                                DSL Get Variants
;; ================================================================================
(define (visa:get-variants prog input-sizes input-precs)
 (cond 
		[(equal? prog vector-two-input-swizzle_dsl)
		(define input-precs-dsl (list  8  ))
		(define input-size-dsl (list   (list 64 64 ) ) )
		(define variants (list (vector-two-input-swizzle_dsl (reg (bv 0 8)) (reg (bv 1 8)) 6 8 0 3 3 1 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog interleave-vectors_dsl)
		(define input-precs-dsl (list  16 8 16 32 8 16 32  ))
		(define input-size-dsl (list   (list 128 128 ) (list 1024 1024 ) (list 1024 1024 ) (list 1024 1024 ) (list 2048 2048 ) (list 2048 2048 ) (list 2048 2048 ) ) )
		(define variants (list (interleave-vectors_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 16 ) 
(interleave-vectors_dsl (reg (bv 0 8)) (reg (bv 1 8)) 1024 8 ) 
(interleave-vectors_dsl (reg (bv 0 8)) (reg (bv 1 8)) 1024 16 ) 
(interleave-vectors_dsl (reg (bv 0 8)) (reg (bv 1 8)) 1024 32 ) 
(interleave-vectors_dsl (reg (bv 0 8)) (reg (bv 1 8)) 2048 8 ) 
(interleave-vectors_dsl (reg (bv 0 8)) (reg (bv 1 8)) 2048 16 ) 
(interleave-vectors_dsl (reg (bv 0 8)) (reg (bv 1 8)) 2048 32 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 7)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog interleave-vector_dsl)
		(define input-precs-dsl (list  16 8 16 32 8 16 32  ))
		(define input-size-dsl (list   (list 128 ) (list 1024 ) (list 1024 ) (list 1024 ) (list 2048 ) (list 2048 ) (list 2048 ) ) )
		(define variants (list (interleave-vector_dsl (reg (bv 0 8)) 128 16 ) 
(interleave-vector_dsl (reg (bv 0 8)) 1024 8 ) 
(interleave-vector_dsl (reg (bv 0 8)) 1024 16 ) 
(interleave-vector_dsl (reg (bv 0 8)) 1024 32 ) 
(interleave-vector_dsl (reg (bv 0 8)) 2048 8 ) 
(interleave-vector_dsl (reg (bv 0 8)) 2048 16 ) 
(interleave-vector_dsl (reg (bv 0 8)) 2048 32 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 7)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog deinterleave-vector_dsl)
		(define input-precs-dsl (list  16 8 16 32 8 16 32  ))
		(define input-size-dsl (list   (list 128 ) (list 1024 ) (list 1024 ) (list 1024 ) (list 2048 ) (list 2048 ) (list 2048 ) ) )
		(define variants (list (deinterleave-vector_dsl (reg (bv 0 8)) 128 16 ) 
(deinterleave-vector_dsl (reg (bv 0 8)) 1024 8 ) 
(deinterleave-vector_dsl (reg (bv 0 8)) 1024 16 ) 
(deinterleave-vector_dsl (reg (bv 0 8)) 1024 32 ) 
(deinterleave-vector_dsl (reg (bv 0 8)) 2048 8 ) 
(deinterleave-vector_dsl (reg (bv 0 8)) 2048 16 ) 
(deinterleave-vector_dsl (reg (bv 0 8)) 2048 32 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 7)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog llvm_shuffle_vectors_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 128 128 ) ) )
		(define variants (list (llvm_shuffle_vectors_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 16 (reg (bv 2 8)) 4 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog llvm-vect-add_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 128 ) ) )
		(define variants (list (llvm-vect-add_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog llvm-vect-sub_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 128 ) ) )
		(define variants (list (llvm-vect-sub_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog llvm-vect-mul_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 128 ) ) )
		(define variants (list (llvm-vect-mul_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog llvm-vect-sdiv_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 128 ) ) )
		(define variants (list (llvm-vect-sdiv_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog llvm-vect-udiv_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 128 ) ) )
		(define variants (list (llvm-vect-udiv_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog llvm-zext_dsl)
		(define input-precs-dsl (list  8 16  ))
		(define input-size-dsl (list   (list 8 ) (list 16 ) ) )
		(define variants (list (llvm-zext_dsl (reg (bv 0 8)) 8 32 ) 
(llvm-zext_dsl (reg (bv 0 8)) 16 32 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 2)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog scalar_splat_dsl)
		(define input-precs-dsl (list  8 16  ))
		(define input-size-dsl (list   (list 8 ) (list 16 ) ) )
		(define variants (list (scalar_splat_dsl (reg (bv 0 8)) 8 32 ) 
(scalar_splat_dsl (reg (bv 0 8)) 16 32 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 2)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog VMAD_sat_2_UB_UB_UB_UB_dsl)
		(define input-precs-dsl (list  8 8 8 8 8 8 8 8 8 8 8 8  ))
		(define input-size-dsl (list   (list 16 16 16 ) (list 8 8 8 ) (list 256 256 256 ) (list 128 128 128 ) (list 8 8 8 ) (list 256 256 256 ) (list 64 64 64 ) (list 64 64 64 ) (list 32 32 32 ) (list 128 128 128 ) (list 32 32 32 ) (list 16 16 16 ) ) )
		(define variants (list (VMAD_sat_2_UB_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 16 16 0 16 8 1 1 1 64 1 64 1 ) 
(VMAD_sat_2_UB_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 8 8 0 8 8 1 1 1 64 1 64 1 ) 
(VMAD_sat_2_UB_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 256 256 0 256 8 1 1 1 64 1 64 1 ) 
(VMAD_sat_2_UB_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 1 1 1 64 1 64 1 ) 
(VMAD_sat_2_UB_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 8 8 0 8 8 1 1 1 64 1 64 1 ) 
(VMAD_sat_2_UB_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 256 256 0 256 8 1 1 1 64 1 64 1 ) 
(VMAD_sat_2_UB_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 1 1 1 64 1 64 1 ) 
(VMAD_sat_2_UB_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 1 1 1 64 1 64 1 ) 
(VMAD_sat_2_UB_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 32 32 0 32 8 1 1 1 64 1 64 1 ) 
(VMAD_sat_2_UB_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 1 1 1 64 1 64 1 ) 
(VMAD_sat_2_UB_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 32 32 0 32 8 1 1 1 64 1 64 1 ) 
(VMAD_sat_2_UB_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 16 16 0 16 8 1 1 1 64 1 64 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog VBFI_4_UD_UD_UD_UD_UD_dsl)
		(define input-precs-dsl (list  32 32 32 32 32 32 32 32 32 32 32 32  ))
		(define input-size-dsl (list   (list 128 128 128 128 ) (list 64 64 64 64 ) (list 256 256 256 256 ) (list 1024 1024 1024 1024 ) (list 64 64 64 64 ) (list 512 512 512 512 ) (list 512 512 512 512 ) (list 32 32 32 32 ) (list 256 256 256 256 ) (list 1024 1024 1024 1024 ) (list 32 32 32 32 ) (list 128 128 128 128 ) ) )
		(define variants (list (VBFI_4_UD_UD_UD_UD_UD_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) (reg (bv 3 8)) 128 128 0 128 32 -1 ) 
(VBFI_4_UD_UD_UD_UD_UD_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) (reg (bv 3 8)) 64 64 0 64 32 -1 ) 
(VBFI_4_UD_UD_UD_UD_UD_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) (reg (bv 3 8)) 256 256 0 256 32 -1 ) 
(VBFI_4_UD_UD_UD_UD_UD_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) (reg (bv 3 8)) 1024 1024 0 1024 32 -1 ) 
(VBFI_4_UD_UD_UD_UD_UD_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) (reg (bv 3 8)) 64 64 0 64 32 -1 ) 
(VBFI_4_UD_UD_UD_UD_UD_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) (reg (bv 3 8)) 512 512 0 512 32 -1 ) 
(VBFI_4_UD_UD_UD_UD_UD_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) (reg (bv 3 8)) 512 512 0 512 32 -1 ) 
(VBFI_4_UD_UD_UD_UD_UD_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) (reg (bv 3 8)) 32 32 0 32 32 -1 ) 
(VBFI_4_UD_UD_UD_UD_UD_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) (reg (bv 3 8)) 256 256 0 256 32 -1 ) 
(VBFI_4_UD_UD_UD_UD_UD_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) (reg (bv 3 8)) 1024 1024 0 1024 32 -1 ) 
(VBFI_4_UD_UD_UD_UD_UD_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) (reg (bv 3 8)) 32 32 0 32 32 -1 ) 
(VBFI_4_UD_UD_UD_UD_UD_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) (reg (bv 3 8)) 128 128 0 128 32 -1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog VBFE_32_D_D_D_D_dsl)
		(define input-precs-dsl (list  32 32 32 32 32 32 32 32 32 32 32 32  ))
		(define input-size-dsl (list   (list 1024 1024 1024 ) (list 256 256 256 ) (list 128 128 128 ) (list 512 512 512 ) (list 512 512 512 ) (list 32 32 32 ) (list 64 64 64 ) (list 256 256 256 ) (list 64 64 64 ) (list 32 32 32 ) (list 128 128 128 ) (list 1024 1024 1024 ) ) )
		(define variants (list (VBFE_32_D_D_D_D_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000020 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 1024 1024 0 1024 32 -1 -1 ) 
(VBFE_32_D_D_D_D_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000020 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 256 256 0 256 32 -1 -1 ) 
(VBFE_32_D_D_D_D_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000020 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 -1 -1 ) 
(VBFE_32_D_D_D_D_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000020 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 512 512 0 512 32 -1 -1 ) 
(VBFE_32_D_D_D_D_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000020 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 512 512 0 512 32 -1 -1 ) 
(VBFE_32_D_D_D_D_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000020 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 32 32 0 32 32 -1 -1 ) 
(VBFE_32_D_D_D_D_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000020 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 -1 -1 ) 
(VBFE_32_D_D_D_D_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000020 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 256 256 0 256 32 -1 -1 ) 
(VBFE_32_D_D_D_D_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000020 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 -1 -1 ) 
(VBFE_32_D_D_D_D_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000020 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 32 32 0 32 32 -1 -1 ) 
(VBFE_32_D_D_D_D_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000020 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 -1 -1 ) 
(VBFE_32_D_D_D_D_dsl (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x0000000000000000000000000000001f (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000001 (bitvector 32))) (lit (bv #x00000000000000000000000000000020 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 1024 1024 0 1024 32 -1 -1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog VAVG_sat_8_UB_UB_UB_dsl)
		(define input-precs-dsl (list  8 8 16 16 8 32 8 32 16 8 16 32 32 16 32 32 16 32 8 16 8 16 16 32 16 32 16 16 32 32 32 16 8 32 32 32 16 8 8 16 16 32 8 8 8 16 16 8 8 32 16 8 16 16 8 32 32 8 16 8 16 32 32 16 32 8 8 32 32 8 8 8  ))
		(define input-size-dsl (list   (list 64 64 ) (list 8 8 ) (list 512 512 ) (list 512 512 ) (list 256 256 ) (list 32 32 ) (list 128 128 ) (list 32 32 ) (list 64 64 ) (list 16 16 ) (list 16 16 ) (list 32 32 ) (list 1024 1024 ) (list 32 32 ) (list 512 512 ) (list 512 512 ) (list 128 128 ) (list 256 256 ) (list 128 128 ) (list 64 64 ) (list 32 32 ) (list 32 32 ) (list 512 512 ) (list 128 128 ) (list 16 16 ) (list 1024 1024 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 512 512 ) (list 256 256 ) (list 32 32 ) (list 128 128 ) (list 256 256 ) (list 128 128 ) (list 32 32 ) (list 64 64 ) (list 8 8 ) (list 256 256 ) (list 64 64 ) (list 64 64 ) (list 32 32 ) (list 32 32 ) (list 256 256 ) (list 64 64 ) (list 256 256 ) (list 256 256 ) (list 64 64 ) (list 1024 1024 ) (list 16 16 ) (list 64 64 ) (list 128 128 ) (list 512 512 ) (list 16 16 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 256 256 ) (list 16 16 ) (list 16 16 ) (list 32 32 ) (list 512 512 ) (list 32 32 ) (list 1024 1024 ) (list 256 256 ) (list 128 128 ) (list 256 256 ) (list 256 256 ) (list 8 8 ) (list 16 16 ) (list 8 8 ) ) )
		(define variants (list (VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 16 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 16 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 8 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 8 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 1024 1024 0 1024 32 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 16 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 32 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 32 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 32 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 8 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 16 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 16 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 1024 1024 0 1024 32 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 32 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 16 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 8 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 32 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 16 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 16 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 8 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 8 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 8 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 16 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 8 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 1024 1024 0 1024 32 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 16 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 8 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 16 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 8 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 32 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 16 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 1024 1024 0 1024 32 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 8 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 32 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 32 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 1 1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 8 0 -1 -1 1 64 1 64 ) 
(VAVG_sat_8_UB_UB_UB_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000001 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 -1 -1 1 64 1 64 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 72)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog VMAD_4_B_B_B_B_dsl)
		(define input-precs-dsl (list  8 16 32 16 8 8 16 32 32 32 8 16 16 16 32 16 32 32 8 8 8 32 32 16 32 8 8 16 8 16 8 16 32 8 16 32  ))
		(define input-size-dsl (list   (list 32 32 32 ) (list 64 64 64 ) (list 64 64 64 ) (list 128 128 128 ) (list 128 128 128 ) (list 32 32 32 ) (list 16 16 16 ) (list 1024 1024 1024 ) (list 32 32 32 ) (list 64 64 64 ) (list 128 128 128 ) (list 512 512 512 ) (list 256 256 256 ) (list 512 512 512 ) (list 256 256 256 ) (list 16 16 16 ) (list 1024 1024 1024 ) (list 512 512 512 ) (list 64 64 64 ) (list 16 16 16 ) (list 8 8 8 ) (list 512 512 512 ) (list 256 256 256 ) (list 32 32 32 ) (list 128 128 128 ) (list 256 256 256 ) (list 256 256 256 ) (list 256 256 256 ) (list 8 8 8 ) (list 32 32 32 ) (list 64 64 64 ) (list 128 128 128 ) (list 128 128 128 ) (list 16 16 16 ) (list 64 64 64 ) (list 32 32 32 ) ) )
		(define variants (list (VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 32 32 0 32 8 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 32 32 0 32 8 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 16 16 0 16 16 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 1024 1024 0 1024 32 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 32 32 0 32 32 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 512 512 0 512 16 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 256 256 0 256 16 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 512 512 0 512 16 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 256 256 0 256 32 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 16 16 0 16 16 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 1024 1024 0 1024 32 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 512 512 0 512 32 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 16 16 0 16 8 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 8 8 0 8 8 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 512 512 0 512 32 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 256 256 0 256 32 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 32 32 0 32 16 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 256 256 0 256 8 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 256 256 0 256 8 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 256 256 0 256 16 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 8 8 0 8 8 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 32 32 0 32 16 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 16 16 0 16 8 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 0 -1 1 64 1 64 1 ) 
(VMAD_4_B_B_B_B_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 32 32 0 32 32 0 -1 1 64 1 64 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 36)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog VMULH_1_D_D_D_dsl)
		(define input-precs-dsl (list  32 32 32 32 32 32 32 32 32 32 32 32  ))
		(define input-size-dsl (list   (list 32 32 ) (list 256 256 ) (list 32 32 ) (list 64 64 ) (list 64 64 ) (list 256 256 ) (list 1024 1024 ) (list 512 512 ) (list 512 512 ) (list 1024 1024 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (VMULH_1_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 32 1 64 1 ) 
(VMULH_1_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 32 32 1 64 1 ) 
(VMULH_1_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 32 1 64 1 ) 
(VMULH_1_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 1 64 1 ) 
(VMULH_1_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 1 64 1 ) 
(VMULH_1_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 32 32 1 64 1 ) 
(VMULH_1_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 1024 1024 0 1024 32 32 1 64 1 ) 
(VMULH_1_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 32 32 1 64 1 ) 
(VMULH_1_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 32 32 1 64 1 ) 
(VMULH_1_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 1024 1024 0 1024 32 32 1 64 1 ) 
(VMULH_1_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 32 1 64 1 ) 
(VMULH_1_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 32 1 64 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog VMUL_sat_8_UW_UW_UW_dsl)
		(define input-precs-dsl (list  16 16 8 8 16 8 8 16 16 8 16 8 16 8 8 16 8 8 16 8 16 16 8 16  ))
		(define input-size-dsl (list   (list 128 128 ) (list 256 256 ) (list 256 256 ) (list 8 8 ) (list 128 128 ) (list 16 16 ) (list 128 128 ) (list 16 16 ) (list 64 64 ) (list 16 16 ) (list 64 64 ) (list 64 64 ) (list 512 512 ) (list 256 256 ) (list 32 32 ) (list 32 32 ) (list 8 8 ) (list 128 128 ) (list 256 256 ) (list 64 64 ) (list 16 16 ) (list 32 32 ) (list 32 32 ) (list 512 512 ) ) )
		(define variants (list (VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 16 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 8 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 8 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 8 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 16 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 8 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 8 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 16 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 16 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 16 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 8 ) 
(VMUL_sat_8_UW_UW_UW_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 24)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog VADD_4_W_W_W_dsl)
		(define input-precs-dsl (list  16 8 16 8 32 16 16 8 8 32 32 8 32 8 16 16 16 32 32 32 8 16 8 32 32 16 16 8 16 8 32 8 32 32 16 8 16 8 16 8 8 16 8 8 16 8 32 32 16 32 8 32 32 32 8 32 8 16 16 16 8 16 32 8 8 32 16 16 32 16 32 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 32 32 ) (list 512 512 ) (list 64 64 ) (list 512 512 ) (list 64 64 ) (list 16 16 ) (list 16 16 ) (list 16 16 ) (list 64 64 ) (list 512 512 ) (list 16 16 ) (list 32 32 ) (list 256 256 ) (list 128 128 ) (list 16 16 ) (list 256 256 ) (list 256 256 ) (list 256 256 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 256 256 ) (list 128 128 ) (list 1024 1024 ) (list 32 32 ) (list 512 512 ) (list 8 8 ) (list 512 512 ) (list 256 256 ) (list 64 64 ) (list 128 128 ) (list 32 32 ) (list 32 32 ) (list 32 32 ) (list 256 256 ) (list 64 64 ) (list 128 128 ) (list 256 256 ) (list 32 32 ) (list 8 8 ) (list 16 16 ) (list 8 8 ) (list 32 32 ) (list 256 256 ) (list 128 128 ) (list 128 128 ) (list 256 256 ) (list 16 16 ) (list 1024 1024 ) (list 8 8 ) (list 1024 1024 ) (list 256 256 ) (list 1024 1024 ) (list 16 16 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 256 256 ) (list 128 128 ) (list 32 32 ) (list 32 32 ) (list 512 512 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 32 32 ) (list 128 128 ) (list 512 512 ) (list 512 512 ) (list 64 64 ) (list 32 32 ) ) )
		(define variants (list (VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 8 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 16 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 32 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 8 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 8 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 32 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 8 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 8 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 16 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 32 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 32 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 8 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 1024 1024 0 1024 32 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 16 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 16 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 16 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 8 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 16 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 8 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 16 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 8 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 8 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 16 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 32 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 1024 1024 0 1024 32 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 1024 1024 0 1024 32 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 32 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 1024 1024 0 1024 32 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 8 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 16 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 8 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 16 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 32 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 16 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 32 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 16 1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 ) 
(VADD_4_W_W_W_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 72)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog VMOV_1_Q_Q_dsl)
		(define input-precs-dsl (list  64 16 8 64 8 32 32 8 8 32 64 32 16 8 32 64 16 16 16 32 32 8 64 8 16 16 64 16 8 16 32 32 32 8 16 64 16 8 8 8 32 64 32 16 8 8 64 32 16 64 16 32 32 16 64 32 64 8 8 64 8 32 16 8 32 64 8 32 64 64 64 8 16 8 32 16 8 16 64 16 64 32 64 8 8 16 32 64 64 16 16 32 64 32 16 64  ))
		(define input-size-dsl (list   (list 64 ) (list 512 ) (list 64 ) (list 512 ) (list 64 ) (list 128 ) (list 128 ) (list 8 ) (list 32 ) (list 128 ) (list 2048 ) (list 64 ) (list 256 ) (list 32 ) (list 32 ) (list 512 ) (list 256 ) (list 256 ) (list 32 ) (list 32 ) (list 256 ) (list 8 ) (list 1024 ) (list 256 ) (list 64 ) (list 128 ) (list 1024 ) (list 128 ) (list 32 ) (list 16 ) (list 512 ) (list 256 ) (list 512 ) (list 16 ) (list 16 ) (list 64 ) (list 64 ) (list 256 ) (list 64 ) (list 128 ) (list 512 ) (list 256 ) (list 1024 ) (list 64 ) (list 16 ) (list 256 ) (list 1024 ) (list 64 ) (list 512 ) (list 1024 ) (list 128 ) (list 32 ) (list 1024 ) (list 512 ) (list 512 ) (list 512 ) (list 128 ) (list 8 ) (list 128 ) (list 64 ) (list 128 ) (list 256 ) (list 128 ) (list 128 ) (list 128 ) (list 2048 ) (list 256 ) (list 1024 ) (list 64 ) (list 128 ) (list 2048 ) (list 16 ) (list 32 ) (list 8 ) (list 32 ) (list 32 ) (list 64 ) (list 32 ) (list 256 ) (list 16 ) (list 2048 ) (list 256 ) (list 128 ) (list 16 ) (list 32 ) (list 256 ) (list 1024 ) (list 256 ) (list 128 ) (list 16 ) (list 64 ) (list 64 ) (list 512 ) (list 64 ) (list 512 ) (list 256 ) ) )
		(define variants (list (VMOV_1_Q_Q_dsl (reg (bv 0 8)) 64 64 0 64 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 512 512 0 512 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 512 512 0 512 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 128 128 0 128 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 128 128 0 128 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 8 8 0 8 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 32 32 0 32 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 128 128 0 128 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 2048 2048 0 2048 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 64 64 0 64 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 256 256 0 256 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 32 32 0 32 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 32 32 0 32 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 512 512 0 512 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 256 256 0 256 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 256 256 0 256 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 32 32 0 32 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 32 32 0 32 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 256 256 0 256 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 8 8 0 8 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 1024 1024 0 1024 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 256 256 0 256 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 64 64 0 64 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 128 128 0 128 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 1024 1024 0 1024 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 128 128 0 128 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 32 32 0 32 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 16 16 0 16 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 512 512 0 512 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 256 256 0 256 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 512 512 0 512 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 16 16 0 16 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 16 16 0 16 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 64 64 0 64 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 64 64 0 64 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 256 256 0 256 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 512 512 0 512 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 256 256 0 256 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 1024 1024 0 1024 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 64 64 0 64 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 16 16 0 16 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 256 256 0 256 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 1024 1024 0 1024 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 64 64 0 64 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 512 512 0 512 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 1024 1024 0 1024 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 128 128 0 128 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 32 32 0 32 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 1024 1024 0 1024 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 512 512 0 512 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 512 512 0 512 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 512 512 0 512 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 128 128 0 128 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 8 8 0 8 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 64 64 0 64 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 256 256 0 256 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 128 128 0 128 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 128 128 0 128 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 2048 2048 0 2048 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 256 256 0 256 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 1024 1024 0 1024 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 64 64 0 64 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 128 128 0 128 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 2048 2048 0 2048 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 16 16 0 16 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 32 32 0 32 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 8 8 0 8 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 32 32 0 32 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 32 32 0 32 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 32 32 0 32 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 256 256 0 256 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 16 16 0 16 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 2048 2048 0 2048 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 256 256 0 256 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 128 128 0 128 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 16 16 0 16 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 32 32 0 32 8 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 256 256 0 256 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 1024 1024 0 1024 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 256 256 0 256 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 128 128 0 128 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 16 16 0 16 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 64 64 0 64 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 64 64 0 64 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 512 512 0 512 64 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 64 64 0 64 32 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 512 512 0 512 16 ) 
(VMOV_1_Q_Q_dsl (reg (bv 0 8)) 256 256 0 256 64 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 96)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog VDP4A_sat_32_D_D_D_D_dsl)
		(define input-precs-dsl (list  8 8 8 8 8 8 8 8 8 8 8 8  ))
		(define input-size-dsl (list   (list 1024 1024 1024 ) (list 128 128 128 ) (list 32 32 32 ) (list 256 256 256 ) (list 64 64 64 ) (list 512 512 512 ) (list 32 32 32 ) (list 512 512 512 ) (list 128 128 128 ) (list 256 256 256 ) (list 64 64 64 ) (list 1024 1024 1024 ) ) )
		(define variants (list (VDP4A_sat_32_D_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 1024 1024 0 256 8 32 1 1 1 64 1 1 64 1 24 1 1 64 1 16 1 1 64 1 8 1 64 1 4 ) 
(VDP4A_sat_32_D_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 32 8 32 1 1 1 64 1 1 64 1 24 1 1 64 1 16 1 1 64 1 8 1 64 1 4 ) 
(VDP4A_sat_32_D_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 32 32 0 8 8 32 1 1 1 64 1 1 64 1 24 1 1 64 1 16 1 1 64 1 8 1 64 1 4 ) 
(VDP4A_sat_32_D_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 256 256 0 64 8 32 1 1 1 64 1 1 64 1 24 1 1 64 1 16 1 1 64 1 8 1 64 1 4 ) 
(VDP4A_sat_32_D_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 16 8 32 1 1 1 64 1 1 64 1 24 1 1 64 1 16 1 1 64 1 8 1 64 1 4 ) 
(VDP4A_sat_32_D_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 512 512 0 128 8 32 1 1 1 64 1 1 64 1 24 1 1 64 1 16 1 1 64 1 8 1 64 1 4 ) 
(VDP4A_sat_32_D_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 32 32 0 8 8 32 1 1 1 64 1 1 64 1 24 1 1 64 1 16 1 1 64 1 8 1 64 1 4 ) 
(VDP4A_sat_32_D_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 512 512 0 128 8 32 1 1 1 64 1 1 64 1 24 1 1 64 1 16 1 1 64 1 8 1 64 1 4 ) 
(VDP4A_sat_32_D_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 32 8 32 1 1 1 64 1 1 64 1 24 1 1 64 1 16 1 1 64 1 8 1 64 1 4 ) 
(VDP4A_sat_32_D_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 256 256 0 64 8 32 1 1 1 64 1 1 64 1 24 1 1 64 1 16 1 1 64 1 8 1 64 1 4 ) 
(VDP4A_sat_32_D_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 16 8 32 1 1 1 64 1 1 64 1 24 1 1 64 1 16 1 1 64 1 8 1 64 1 4 ) 
(VDP4A_sat_32_D_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 1024 1024 0 256 8 32 1 1 1 64 1 1 64 1 24 1 1 64 1 16 1 1 64 1 8 1 64 1 4 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog VNOT_32_W_W_dsl)
		(define input-precs-dsl (list  16 32 16 16 8 32 16 32 8 16 16 32 8 8 8 16 16 16 32 32 32 32 16 8 16 32 32 8 8 8 8 8 16 32 8 32  ))
		(define input-size-dsl (list   (list 512 ) (list 128 ) (list 16 ) (list 128 ) (list 16 ) (list 1024 ) (list 128 ) (list 32 ) (list 8 ) (list 256 ) (list 256 ) (list 32 ) (list 128 ) (list 128 ) (list 64 ) (list 32 ) (list 64 ) (list 512 ) (list 512 ) (list 512 ) (list 256 ) (list 64 ) (list 16 ) (list 256 ) (list 64 ) (list 64 ) (list 1024 ) (list 32 ) (list 8 ) (list 16 ) (list 64 ) (list 256 ) (list 32 ) (list 128 ) (list 32 ) (list 256 ) ) )
		(define variants (list (VNOT_32_W_W_dsl (reg (bv 0 8)) 512 512 0 512 16 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 128 128 0 128 32 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 16 16 0 16 16 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 128 128 0 128 16 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 16 16 0 16 8 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 1024 1024 0 1024 32 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 128 128 0 128 16 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 32 32 0 32 32 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 8 8 0 8 8 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 256 256 0 256 16 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 256 256 0 256 16 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 32 32 0 32 32 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 32 32 0 32 16 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 64 64 0 64 16 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 512 512 0 512 16 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 512 512 0 512 32 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 512 512 0 512 32 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 256 256 0 256 32 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 64 64 0 64 32 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 16 16 0 16 16 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 256 256 0 256 8 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 64 64 0 64 16 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 64 64 0 64 32 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 1024 1024 0 1024 32 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 32 32 0 32 8 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 8 8 0 8 8 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 16 16 0 16 8 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 256 256 0 256 8 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 32 32 0 32 16 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 128 128 0 128 32 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 32 32 0 32 8 ) 
(VNOT_32_W_W_dsl (reg (bv 0 8)) 256 256 0 256 32 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 36)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog VXOR_32_UD_UD_UD_dsl)
		(define input-precs-dsl (list  32 32 32 8 8 16 8 8 32 16 16 32 16 32 16 16 16 32 16 16 8 8 8 8 32 8 32 32 16 32 8 8 8 32 16 16  ))
		(define input-size-dsl (list   (list 1024 1024 ) (list 64 64 ) (list 64 64 ) (list 256 256 ) (list 64 64 ) (list 256 256 ) (list 16 16 ) (list 64 64 ) (list 256 256 ) (list 32 32 ) (list 512 512 ) (list 256 256 ) (list 128 128 ) (list 32 32 ) (list 16 16 ) (list 512 512 ) (list 32 32 ) (list 32 32 ) (list 128 128 ) (list 64 64 ) (list 32 32 ) (list 16 16 ) (list 128 128 ) (list 8 8 ) (list 128 128 ) (list 8 8 ) (list 128 128 ) (list 512 512 ) (list 64 64 ) (list 512 512 ) (list 32 32 ) (list 256 256 ) (list 128 128 ) (list 1024 1024 ) (list 256 256 ) (list 16 16 ) ) )
		(define variants (list (VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 1024 1024 0 1024 32 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 8 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 16 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 8 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 32 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 16 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 16 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 32 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 16 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 16 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 8 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 8 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 32 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 32 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 8 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 8 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 1024 1024 0 1024 32 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 16 ) 
(VXOR_32_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 36)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog VDP4A_1_UD_UD_UD_UD_dsl)
		(define input-precs-dsl (list  8 8 8 8 8 8 8 8 8 8 8 8  ))
		(define input-size-dsl (list   (list 32 32 32 ) (list 256 256 256 ) (list 256 256 256 ) (list 128 128 128 ) (list 512 512 512 ) (list 32 32 32 ) (list 64 64 64 ) (list 1024 1024 1024 ) (list 128 128 128 ) (list 1024 1024 1024 ) (list 512 512 512 ) (list 64 64 64 ) ) )
		(define variants (list (VDP4A_1_UD_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 32 32 0 8 8 32 0 -1 1 64 -1 1 64 1 24 -1 1 64 1 16 -1 1 64 1 8 1 64 1 4 ) 
(VDP4A_1_UD_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 256 256 0 64 8 32 0 -1 1 64 -1 1 64 1 24 -1 1 64 1 16 -1 1 64 1 8 1 64 1 4 ) 
(VDP4A_1_UD_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 256 256 0 64 8 32 0 -1 1 64 -1 1 64 1 24 -1 1 64 1 16 -1 1 64 1 8 1 64 1 4 ) 
(VDP4A_1_UD_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 32 8 32 0 -1 1 64 -1 1 64 1 24 -1 1 64 1 16 -1 1 64 1 8 1 64 1 4 ) 
(VDP4A_1_UD_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 512 512 0 128 8 32 0 -1 1 64 -1 1 64 1 24 -1 1 64 1 16 -1 1 64 1 8 1 64 1 4 ) 
(VDP4A_1_UD_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 32 32 0 8 8 32 0 -1 1 64 -1 1 64 1 24 -1 1 64 1 16 -1 1 64 1 8 1 64 1 4 ) 
(VDP4A_1_UD_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 16 8 32 0 -1 1 64 -1 1 64 1 24 -1 1 64 1 16 -1 1 64 1 8 1 64 1 4 ) 
(VDP4A_1_UD_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 1024 1024 0 256 8 32 0 -1 1 64 -1 1 64 1 24 -1 1 64 1 16 -1 1 64 1 8 1 64 1 4 ) 
(VDP4A_1_UD_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 32 8 32 0 -1 1 64 -1 1 64 1 24 -1 1 64 1 16 -1 1 64 1 8 1 64 1 4 ) 
(VDP4A_1_UD_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 1024 1024 0 256 8 32 0 -1 1 64 -1 1 64 1 24 -1 1 64 1 16 -1 1 64 1 8 1 64 1 4 ) 
(VDP4A_1_UD_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 512 512 0 128 8 32 0 -1 1 64 -1 1 64 1 24 -1 1 64 1 16 -1 1 64 1 8 1 64 1 4 ) 
(VDP4A_1_UD_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 16 8 32 0 -1 1 64 -1 1 64 1 24 -1 1 64 1 16 -1 1 64 1 8 1 64 1 4 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog VMUL_1_UB_UB_UB_dsl)
		(define input-precs-dsl (list  8 16 32 32 16 8 32 8 32 16 8 16 16 8 16 8 16 32 16 8 8 32 8 16 32 32 16 8 8 8 32 32 32 16 32 16  ))
		(define input-size-dsl (list   (list 8 8 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 16 16 ) (list 64 64 ) (list 1024 1024 ) (list 16 16 ) (list 1024 1024 ) (list 512 512 ) (list 256 256 ) (list 128 128 ) (list 256 256 ) (list 128 128 ) (list 64 64 ) (list 256 256 ) (list 32 32 ) (list 256 256 ) (list 256 256 ) (list 32 32 ) (list 8 8 ) (list 64 64 ) (list 64 64 ) (list 32 32 ) (list 512 512 ) (list 128 128 ) (list 512 512 ) (list 32 32 ) (list 16 16 ) (list 128 128 ) (list 256 256 ) (list 32 32 ) (list 512 512 ) (list 16 16 ) (list 32 32 ) (list 64 64 ) ) )
		(define variants (list (VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 1024 1024 0 1024 32 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 8 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 1024 1024 0 1024 32 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 16 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 8 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 16 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 8 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 16 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 32 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 16 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 8 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 16 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 32 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 16 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 8 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 8 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 32 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 32 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 ) 
(VMUL_1_UB_UB_UB_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 36)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog VAND_1_UD_UD_UD_dsl)
		(define input-precs-dsl (list  32 8 16 8 16 16 8 32 16 8 16 32 16 32 16 8 16 32 8 16 8 8 32 32 16 8 32 32 32 16 8 32 8 16 8 32  ))
		(define input-size-dsl (list   (list 32 32 ) (list 8 8 ) (list 32 32 ) (list 64 64 ) (list 128 128 ) (list 16 16 ) (list 32 32 ) (list 128 128 ) (list 128 128 ) (list 256 256 ) (list 256 256 ) (list 128 128 ) (list 256 256 ) (list 64 64 ) (list 512 512 ) (list 32 32 ) (list 32 32 ) (list 512 512 ) (list 256 256 ) (list 512 512 ) (list 128 128 ) (list 64 64 ) (list 1024 1024 ) (list 64 64 ) (list 16 16 ) (list 16 16 ) (list 256 256 ) (list 32 32 ) (list 1024 1024 ) (list 64 64 ) (list 128 128 ) (list 256 256 ) (list 16 16 ) (list 64 64 ) (list 8 8 ) (list 512 512 ) ) )
		(define variants (list (VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 16 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 8 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 8 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 16 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 16 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 16 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 8 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 16 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 32 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 8 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 16 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 1024 1024 0 1024 32 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 8 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 32 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 1024 1024 0 1024 32 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 32 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 8 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 ) 
(VAND_1_UD_UD_UD_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 32 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 36)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog VOR_8_D_D_D_dsl)
		(define input-precs-dsl (list  32 8 32 8 16 16 16 8 8 16 16 8 32 8 32 16 16 16 32 32 32 16 8 32 8 16 8 8 8 32 16 16 32 32 32 8  ))
		(define input-size-dsl (list   (list 256 256 ) (list 256 256 ) (list 1024 1024 ) (list 128 128 ) (list 64 64 ) (list 32 32 ) (list 256 256 ) (list 32 32 ) (list 256 256 ) (list 32 32 ) (list 16 16 ) (list 8 8 ) (list 64 64 ) (list 8 8 ) (list 32 32 ) (list 256 256 ) (list 512 512 ) (list 16 16 ) (list 512 512 ) (list 512 512 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 16 16 ) (list 512 512 ) (list 16 16 ) (list 64 64 ) (list 32 32 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 32 32 ) (list 256 256 ) (list 1024 1024 ) (list 64 64 ) ) )
		(define variants (list (VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 32 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 8 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 1024 1024 0 1024 32 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 16 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 16 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 8 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 8 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 16 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 16 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 16 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 32 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 32 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 8 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 512 512 0 512 16 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 8 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 8 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 256 256 0 256 32 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 1024 1024 0 1024 32 ) 
(VOR_8_D_D_D_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 36)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
 )
)
;; ================================================================================

